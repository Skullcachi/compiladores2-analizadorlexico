/* The following code was generated by JFlex 1.7.0 */

package analizadorlexico;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/cachi/OneDrive/Documents/NetBeansProjects/AnalizadorLexico/src/analizadorlexico/Yylex.flex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\72\1\3\1\72\1\72\1\5\22\0\1\42\1\50\1\0"+
    "\1\64\1\0\1\44\1\51\1\70\1\57\1\60\1\2\1\43\1\53"+
    "\1\4\1\54\1\1\12\65\1\0\1\52\1\45\1\46\1\47\1\0"+
    "\1\63\1\7\1\10\1\17\1\22\1\16\1\36\1\30\1\25\1\20"+
    "\1\40\1\31\1\13\1\35\1\21\1\12\1\32\1\41\1\23\1\11"+
    "\1\15\1\14\1\27\1\33\1\37\1\24\1\26\1\55\1\0\1\56"+
    "\1\0\1\34\1\0\4\66\1\71\25\66\1\61\1\6\1\62\7\0"+
    "\1\72\32\0\1\72\23\0\1\67\u15cb\0\1\72\u097f\0\13\72\35\0"+
    "\1\72\1\72\5\0\1\72\57\0\1\72\u0fa0\0\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\31\7\1\10\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\1\1\0\1\32\1\0"+
    "\1\33\1\7\1\34\2\7\1\34\31\7\2\34\2\7"+
    "\1\34\11\7\1\34\17\7\2\34\3\7\1\34\25\7"+
    "\1\34\35\7\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\0\1\47\1\0\1\50"+
    "\2\0\1\32\2\7\1\34\7\7\1\34\6\7\1\34"+
    "\10\7\1\34\4\7\1\34\7\7\1\34\20\7\1\34"+
    "\25\7\1\34\24\7\1\34\50\7\1\34\1\7\1\34"+
    "\6\7\1\0\1\51\27\7\2\34\11\7\1\34\1\7"+
    "\1\34\3\7\1\0\26\7\1\34\16\7\1\34\3\7"+
    "\1\34\13\7\1\34\15\7\1\34\5\7\1\34\1\7"+
    "\1\34\4\7\1\0\1\46\25\7\1\34\6\7\1\0"+
    "\16\7\1\34\35\7\1\34\32\7\1\0\1\34\34\7"+
    "\1\34\10\7\1\0\1\34\4\7\1\34\10\7\1\0"+
    "\10\7\1\34\1\7\1\34\3\7\1\34\2\7\1\0"+
    "\11\7\1\0\10\7\1\0\7\7\1\0\2\7\1\34"+
    "\21\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[686];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\73\0\261\0\354\0\261\0\u0127"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\73\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\73\0\73\0\73\0\u0887\0\73\0\u08c2\0\73\0\u08fd"+
    "\0\73\0\73\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\73\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0639\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\u2591\0\u09ae\0\73\0\u09e9\0\u0a24\0\u25cc\0\u2607\0\73"+
    "\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df"+
    "\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7"+
    "\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f"+
    "\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67"+
    "\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f"+
    "\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117"+
    "\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef"+
    "\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7"+
    "\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f"+
    "\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877"+
    "\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u14be"+
    "\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4"+
    "\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c"+
    "\0\u3fd7\0\u4012\0\u404d\0\u2f3f\0\u4088\0\u40c3\0\u40fe\0\u4139"+
    "\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311"+
    "\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9"+
    "\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1"+
    "\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\73\0\u485e"+
    "\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36"+
    "\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e"+
    "\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6"+
    "\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe"+
    "\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196"+
    "\0\u51d1\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e"+
    "\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u4610"+
    "\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3"+
    "\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb"+
    "\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93"+
    "\0\u5ace\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b"+
    "\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43"+
    "\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b"+
    "\0\u6056\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3"+
    "\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb"+
    "\0\u6406\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568"+
    "\0\u65a3\0\u65de\0\u6619\0\u6654\0\u668f\0\u66ca\0\u6705\0\u2890"+
    "\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u6867\0\u68a2\0\u68dd"+
    "\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5"+
    "\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d"+
    "\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u6db4\0\u6def\0\u6e2a\0\u6e65"+
    "\0\u6ea0\0\u6edb\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7\0\u7002\0\u703d"+
    "\0\u26b8\0\u7078\0\u70b3\0\u70ee\0\u7129\0\u7164\0\u719f\0\u71da"+
    "\0\u7215\0\u7250\0\u728b\0\u72c6\0\u7301\0\u733c\0\u7377\0\u73b2"+
    "\0\u73ed\0\u7428\0\u7463\0\u5632\0\u749e\0\u74d9\0\u7514\0\u754f"+
    "\0\u758a\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1\0\u76ec\0\u7727"+
    "\0\u7762\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889\0\u78c4\0\u78ff"+
    "\0\u793a\0\u7975\0\u79b0\0\u79eb\0\u7a26\0\u7a61\0\u7a9c\0\u2769"+
    "\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74"+
    "\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c"+
    "\0\u7e87\0\u7ec2\0\u7efd\0\u7f38\0\u7f73\0\u7fae\0\u7fe9\0\u8024"+
    "\0\u805f\0\u809a\0\u80d5\0\u8110\0\u784e\0\u814b\0\u8186\0\u2a2d"+
    "\0\u81c1\0\u81fc\0\u8237\0\u8272\0\u82ad\0\u82e8\0\u2ddd\0\u8323"+
    "\0\u835e\0\u8399\0\u83d4\0\u840f\0\u844a\0\u1184\0\u8485\0\u84c0"+
    "\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u8622\0\u865d\0\u8698"+
    "\0\u86d3\0\u870e\0\u8749\0\u8784\0\u87bf\0\73\0\u87fa\0\u8835"+
    "\0\u8870\0\u88ab\0\u88e6\0\u8921\0\u895c\0\u8997\0\u89d2\0\u8a0d"+
    "\0\u8a48\0\u8a83\0\u8abe\0\u8af9\0\u8b34\0\u8b6f\0\u8baa\0\u8be5"+
    "\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd"+
    "\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f\0\u8f5a\0\u8f95"+
    "\0\u8fd0\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132\0\u916d"+
    "\0\u91a8\0\u91e3\0\u921e\0\u9259\0\u9294\0\u92cf\0\u8835\0\u930a"+
    "\0\u9345\0\u9380\0\u93bb\0\u93f6\0\u9431\0\u946c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[686];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\36"+
    "\1\41\1\36\1\5\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\36\1\65"+
    "\1\66\1\36\1\7\75\0\1\67\73\0\1\7\1\0"+
    "\1\7\34\0\1\7\27\0\1\7\4\0\1\70\60\0"+
    "\1\71\13\0\1\72\73\0\1\36\1\73\1\74\1\36"+
    "\1\75\1\76\1\77\1\36\1\100\1\36\1\101\1\102"+
    "\1\103\3\36\1\104\12\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\105\2\36\1\106\1\36\1\107\1\36\1\110"+
    "\1\36\1\111\2\36\1\112\1\77\15\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\113\2\36\1\114\1\36\1\115"+
    "\1\116\1\117\1\120\1\121\3\36\1\122\1\123\4\36"+
    "\1\124\2\36\1\125\3\36\1\126\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\127\2\36\1\130\1\36\1\131"+
    "\1\36\1\132\3\36\1\133\2\36\1\134\3\36\1\135"+
    "\3\36\23\0\2\36\2\0\1\36\10\0\1\136\2\36"+
    "\1\137\3\36\1\140\1\36\1\141\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\142\7\36\1\143\10\36"+
    "\1\144\7\36\23\0\2\36\2\0\1\36\10\0\1\145"+
    "\1\36\1\146\1\147\3\36\1\150\1\36\1\151\2\36"+
    "\1\152\1\36\1\153\14\36\23\0\2\36\2\0\1\36"+
    "\10\0\2\36\1\154\1\36\1\155\5\36\1\156\1\36"+
    "\1\157\13\36\1\160\2\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\161\2\36\1\162\1\163\1\164\6\36\1\165"+
    "\1\36\1\166\14\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\167\7\36\1\170\1\171\12\36\1\172\1\77"+
    "\3\36\23\0\2\36\2\0\1\36\10\0\1\173\2\36"+
    "\1\174\1\36\1\175\1\36\1\176\1\177\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\200\1\201\1\36\1\202"+
    "\1\36\1\203\1\36\1\204\1\36\1\205\2\36\1\206"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\1\207\2\36"+
    "\1\210\1\36\1\211\1\36\1\212\1\36\1\213\21\36"+
    "\23\0\2\36\2\0\1\36\10\0\7\36\1\214\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\215\2\36\1\216"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\3\36\1\217"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\1\220\10\36"+
    "\1\221\21\36\23\0\2\36\2\0\1\36\10\0\3\36"+
    "\1\222\1\223\2\36\1\224\4\36\1\225\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\226\1\36\1\227"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\1\230\2\36"+
    "\1\231\1\232\1\233\1\36\1\234\1\36\1\235\2\36"+
    "\1\236\16\36\23\0\2\36\2\0\1\36\10\0\1\237"+
    "\2\36\1\240\5\36\1\241\2\36\1\242\1\36\1\243"+
    "\14\36\23\0\2\36\2\0\1\36\10\0\33\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\244\2\36\1\245\3\36"+
    "\1\246\1\36\1\247\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\250\2\36\1\251\1\252\1\253\1\36\1\254"+
    "\1\36\1\255\2\36\1\256\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\257\27\36\23\0\2\36\2\0"+
    "\1\36\66\0\1\71\53\0\1\260\72\0\1\261\72\0"+
    "\1\262\72\0\1\263\75\0\1\264\77\0\1\265\74\0"+
    "\1\266\74\0\1\267\74\0\1\270\62\0\1\271\10\0"+
    "\1\64\5\0\3\272\1\0\63\272\1\273\3\272\3\274"+
    "\1\0\64\274\1\273\2\274\2\275\1\276\1\277\67\275"+
    "\3\70\1\300\1\70\1\300\65\70\54\0\1\271\10\0"+
    "\1\71\14\0\2\36\1\301\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\302\5\36\1\77\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\303\1\36\1\304"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\6\36\1\305"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\6\36\1\306"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\13\36\1\77"+
    "\1\36\1\77\15\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\77\12\36\1\77\17\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\77\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\21\36\1\77\11\36\23\0\2\36\2\0\1\36"+
    "\10\0\10\36\1\307\22\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\310\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\311\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\312\12\36\1\257\11\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\313\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\314\3\36\1\315\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\20\36\1\103\12\36"+
    "\23\0\2\36\2\0\1\36\10\0\26\36\1\103\4\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\36\1\316\24\36"+
    "\1\77\4\36\23\0\2\36\2\0\1\36\10\0\1\317"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\2\36\1\320"+
    "\1\36\1\321\1\36\1\322\1\36\1\323\15\36\1\324"+
    "\4\36\23\0\2\36\2\0\1\36\10\0\14\36\1\325"+
    "\1\36\1\326\14\36\23\0\2\36\2\0\1\36\10\0"+
    "\17\36\1\103\13\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\327\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\330\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\331\32\36\23\0\2\36\2\0\1\36\10\0\1\332"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\4\36\1\333"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\6\36\1\334"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\6\36\1\335"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\4\36\1\226"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\13\36\1\304"+
    "\17\36\23\0\2\36\2\0\1\36\10\0\7\36\1\336"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\6\36\1\306"+
    "\1\337\23\36\23\0\2\36\2\0\1\36\10\0\27\36"+
    "\1\340\3\36\23\0\2\36\2\0\1\36\10\0\2\36"+
    "\1\224\7\36\1\341\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\342\7\36\1\343\13\36\1\304\6\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\344\17\36\1\345\6\36"+
    "\1\224\3\36\23\0\2\36\2\0\1\36\10\0\12\36"+
    "\1\346\7\36\1\103\10\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\347\6\36\1\350\1\36\1\351\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\352\10\36\1\353"+
    "\1\354\7\36\23\0\2\36\2\0\1\36\10\0\13\36"+
    "\1\355\7\36\1\304\7\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\36\1\356\31\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\357\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\23\36\1\77\7\36\23\0\2\36\2\0\1\36"+
    "\10\0\26\36\1\360\1\36\1\361\2\36\23\0\2\36"+
    "\2\0\1\36\10\0\26\36\1\362\4\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\363\4\36\1\364\3\36\1\365"+
    "\3\36\1\366\15\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\367\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\370\22\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\103\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\13\36\1\371\17\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\372\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\373\1\374\1\375\1\376\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\377\3\36\1\u0100\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u0101\3\36\1\u0102"+
    "\1\u0103\4\36\1\u0104\1\36\1\u0105\11\36\1\u0106\4\36"+
    "\23\0\2\36\2\0\1\36\10\0\3\36\1\155\1\36"+
    "\1\u0107\25\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u0108\16\36\23\0\2\36\2\0\1\36\10\0\3\36"+
    "\1\u0109\3\36\1\u010a\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u010b\6\36\1\u010c\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u010d\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u010e\3\36\1\u010f\1\36\1\u0110"+
    "\1\u0111\1\304\1\u0112\7\36\1\u0113\7\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0114\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\26\36\1\u0115\4\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u0116\17\36\1\u0117\4\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\77\1\36"+
    "\1\u0118\1\36\1\u0119\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u011a\21\36\1\u011b\4\36\23\0\2\36"+
    "\2\0\1\36\10\0\30\36\1\224\2\36\23\0\2\36"+
    "\2\0\1\36\10\0\16\36\1\214\14\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u011c\6\36\1\77\15\36"+
    "\23\0\2\36\2\0\1\36\10\0\10\36\1\u011d\22\36"+
    "\23\0\2\36\2\0\1\36\10\0\5\36\1\u011e\20\36"+
    "\1\u011f\4\36\23\0\2\36\2\0\1\36\10\0\26\36"+
    "\1\u0120\4\36\23\0\2\36\2\0\1\36\10\0\1\u0121"+
    "\1\36\1\u0122\1\36\1\u0123\3\36\1\u0124\1\36\1\226"+
    "\14\36\1\u0125\3\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u0126\1\36\1\u0127\30\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0120\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u0128\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0129\17\36\1\u012a\6\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\103\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u012b\1\36\1\u012c\1\36\1\u012d"+
    "\1\36\1\u012e\1\36\1\u012f\7\36\1\u0130\2\36\1\u0131"+
    "\3\36\1\u0132\3\36\23\0\2\36\2\0\1\36\10\0"+
    "\21\36\1\u0133\11\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u0134\32\36\23\0\2\36\2\0\1\36\10\0\20\36"+
    "\1\u0135\12\36\23\0\2\36\2\0\1\36\10\0\4\36"+
    "\1\u0136\1\u0134\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\103\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u0137\7\36\1\u0138\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0139\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u013a\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u013b\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\77\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u0103\2\36\1\u013c\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\15\36\1\77\15\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u013d\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u013e\10\36\1\77\1\u013f"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\2\36\1\u0140"+
    "\30\36\23\0\2\36\2\0\1\36\10\0\1\367\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\36\1\u0141\31\36"+
    "\23\0\2\36\2\0\1\36\10\0\14\36\1\u0142\16\36"+
    "\23\0\2\36\2\0\1\36\10\0\20\36\1\u0143\12\36"+
    "\23\0\2\36\2\0\1\36\10\0\3\36\1\u0144\3\36"+
    "\1\u0145\1\36\1\u0146\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u0147\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\311\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0148\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u0149\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u014a\1\36\1\211\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u014b\21\36\1\77\2\36"+
    "\23\0\2\36\2\0\1\36\10\0\12\36\1\106\1\u014c"+
    "\17\36\23\0\2\36\2\0\1\36\10\0\14\36\1\347"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u014d"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\4\36\1\155"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\5\36\1\u014e"+
    "\6\36\1\u014f\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u0150\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u013d\5\36\1\u0151\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u014b\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u0152\7\36\1\u0153\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u0154\3\36\1\u0155"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\11\36\1\367"+
    "\21\36\23\0\2\36\2\0\1\36\17\0\1\u0156\46\0"+
    "\1\271\3\0\1\u0156\1\0\1\277\1\u0157\1\276\72\277"+
    "\1\276\70\277\7\0\3\36\1\u0158\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0159\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\u015a\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0134\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\16\36\1\u015b\14\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u015c\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\22\36\1\u013c\10\36\23\0\2\36"+
    "\2\0\1\36\10\0\16\36\1\77\14\36\23\0\2\36"+
    "\2\0\1\36\10\0\22\36\1\77\10\36\23\0\2\36"+
    "\2\0\1\36\10\0\24\36\1\u015d\6\36\23\0\2\36"+
    "\2\0\1\36\10\0\25\36\1\u015e\5\36\23\0\2\36"+
    "\2\0\1\36\10\0\24\36\1\155\6\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\311\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u015f\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u0160\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u0161\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0162\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\u0163\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u014e\1\36\1\u0164\1\306\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u0165\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\227\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u0166\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0167\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0168\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\103\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u0169\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u016a\4\36\1\u016b"+
    "\1\u016c\13\36\1\u016d\6\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u0134\13\36\1\u0113\7\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u016e\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u016f\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u0170\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u0171\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\21\36\1\u0172\11\36\23\0\2\36"+
    "\2\0\1\36\10\0\13\36\1\77\17\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u013d\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\13\36\1\u0135\17\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u013d\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0173\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\21\36\1\103\11\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\77\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\104\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\367\26\36\1\u0174\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u0175\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\235\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u0149\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u0176\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\32\36\1\u0177\23\0\2\36\2\0\1\36"+
    "\10\0\23\36\1\u0178\7\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0179\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u017a\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u017b\1\u017c\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\77\2\36\1\u015a\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\21\36\1\u017d\4\36\1\77"+
    "\4\36\23\0\2\36\2\0\1\36\10\0\25\36\1\u017e"+
    "\5\36\23\0\2\36\2\0\1\36\10\0\12\36\1\77"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\1\u017f\32\36"+
    "\23\0\2\36\2\0\1\36\5\0\1\u0180\2\0\33\36"+
    "\23\0\2\36\2\0\1\36\10\0\4\36\1\u0181\26\36"+
    "\23\0\2\36\2\0\1\36\10\0\7\36\1\u0182\4\36"+
    "\1\u0183\16\36\23\0\2\36\2\0\1\36\10\0\10\36"+
    "\1\u014d\22\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u0184\23\36\23\0\2\36\2\0\1\36\10\0\2\36"+
    "\1\u0185\3\36\1\77\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\2\77\1\u0186\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u0187\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0188\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0189\1\u018a\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\224\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u018b\3\36\1\u018c\3\36\1\u018d"+
    "\5\36\1\u018e\12\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u018f\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\23\36\1\u0190\2\36\1\u0191\4\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u0192\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u0193\11\36\1\u0194\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u0195\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u0196\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u0197\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\10\36\1\u0198\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u0199\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u019a\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\77\3\36\1\u019b\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\4\36\1\u019c\26\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u019d\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\7\36\1\u019e\1\36"+
    "\1\u019f\21\36\23\0\2\36\2\0\1\36\10\0\5\36"+
    "\1\224\25\36\23\0\2\36\2\0\1\36\10\0\12\36"+
    "\1\u01a0\20\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u01a1\23\36\23\0\2\36\2\0\1\36\10\0\5\36"+
    "\1\u01a2\3\36\1\u01a3\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u0195\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\16\36\1\u01a4\14\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\77\1\u01a5\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u01a6\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u01a7\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u01a8\6\36\1\77\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\10\36\1\77\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\36\1\211\31\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\257\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u01a9\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u01aa\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0196\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u01ab\4\36\1\u01ac\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u01ad\6\36\1\u01ae\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\21\36\1\u01af\11\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u01b0\1\36"+
    "\1\u01b1\11\36\1\77\10\36\23\0\2\36\2\0\1\36"+
    "\10\0\2\36\1\u01b2\30\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u01b3\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\2\36\1\77\5\36\1\u01b4\10\36\1\u01b5\11\36"+
    "\23\0\2\36\2\0\1\36\10\0\4\36\1\77\6\36"+
    "\1\u01b6\17\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u01b7\24\36\23\0\2\36\2\0\1\36\10\0\1\u01b8"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\5\36\1\u01b9"+
    "\25\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u01ba"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u01bb"+
    "\3\36\1\u01bc\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u01bd\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u01be\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\16\36\1\224\14\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\351\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\13\36\1\u01bf\17\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\u01c0\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\177\4\36\1\u0135\15\36\23\0\2\36\2\0"+
    "\1\36\10\0\24\36\1\77\6\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\77\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\36\1\343\31\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\u0120\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\77\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\343\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u01c1\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\100\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u01c2\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u01c3\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\224\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u01c4\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u01c5\5\36\1\u01c6\12\36\1\u01ab"+
    "\7\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u0134"+
    "\6\36\1\224\5\36\1\u01c7\5\36\1\u01c8\4\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u01c9\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\16\36\1\u01ca\14\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u01cb\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u01cc\1\36\1\103"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\10\36\1\310"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\5\36\1\211"+
    "\25\36\23\0\2\36\2\0\1\36\10\0\5\36\1\u0196"+
    "\25\36\23\0\2\36\2\0\1\36\10\0\12\36\1\342"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u01cd"+
    "\1\u01ce\23\36\23\0\2\36\2\0\1\36\10\0\1\224"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\10\36\1\100"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u01cf"+
    "\2\36\1\77\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\224\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\26\36\1\77\4\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u01d0\23\36\23\0\2\36\2\0\1\36\5\0"+
    "\1\u01d1\36\0\1\u01d1\21\0\1\u01d2\14\0\4\36\1\u0190"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\14\36\1\100"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\10\36\1\u010a"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u01d3"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\3\36\1\367"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\7\36\1\153"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u01d4"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u01d5"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\11\36\1\u01d6"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\11\36\1\u01d7"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\10\36\1\224"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\2\36\1\304"+
    "\30\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u01d8"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u01d9"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\26\36\1\u01da"+
    "\4\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u01db"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\13\36\1\u0175"+
    "\17\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u01dc"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u010a"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u01dd"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\1\77\2\36"+
    "\1\u01de\27\36\23\0\2\36\2\0\1\36\10\0\1\u01df"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u01e0"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u01e1"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\13\36\1\u01e2"+
    "\1\u01e3\13\36\1\u01e4\1\36\1\u01e5\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0185\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\u01e6\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u013a\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\103\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u01e7\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u01e8\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\343\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u01e9\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u01ea\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u01eb\14\36\1\u01ec\13\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u0135\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u01ed\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\21\36\1\304\11\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\u01ee\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\23\36\1\103\7\36\23\0"+
    "\2\36\2\0\1\36\17\0\1\u01ef\63\0\20\36\1\u013d"+
    "\12\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u01f0"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\1\u0162\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\23\36\1\u01f1\7\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u0195\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u01f2\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u01f3\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u01f4\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u01f5\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\26\36\1\367\4\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u01f6\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u01f7\10\36\1\u01f8\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u01f9\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u01bc\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u01fa\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\224\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u01fb\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u0134\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u01fc\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\77\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\103\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u01fd\24\36\1\u015e\5\36"+
    "\23\0\2\36\2\0\1\36\10\0\22\36\1\u01fe\10\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\100\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u01ff\1\36\1\224"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u0200"+
    "\4\36\1\304\11\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\u01de\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u0201\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\30\36\1\77\2\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\u0202\22\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0203\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\13\36\1\u0204\17\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\343\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u01f0\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0205\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u0206\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u0207\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u01c2\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\36\1\u0208\31\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u0209\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u020a\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u020b\32\36\23\0\2\36\2\0\1\36\10\0\26\36"+
    "\1\343\4\36\23\0\2\36\2\0\1\36\10\0\5\36"+
    "\1\u020c\25\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u020d\16\36\23\0\2\36\2\0\1\36\10\0\12\36"+
    "\1\u020e\20\36\23\0\2\36\2\0\1\36\10\0\11\36"+
    "\1\u020f\2\36\1\u0210\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0211\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u016b\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\36\1\u0212\31\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0213\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\5\36\1\u0214\25\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0215\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u020b\10\36\1\u0216\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u0217\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\367\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u0218\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\22\36\1\103\10\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\224\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u0219\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u021a\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u021b\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u021c\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\343\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u011d\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0103\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u021d\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u021e\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u021f\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u0220\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u0221\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\27\36\1\u0193\3\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u0222\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u01b6\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0223\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\232\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u0224\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\27\36\1\u0225\3\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u0226\24\36\23\0\2\36\2\0"+
    "\1\36\66\0\1\u01d2\14\0\14\36\1\u0227\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u0228\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\14\36\1\u0135\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u0229\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u022a\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u022b\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u022c\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\77\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\26\36\1\u022d\4\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u0103\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u0193\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\13\36\1\103\17\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u022e\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u022f\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u0230\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0231\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\26\36\1\u013d\4\36\23\0\2\36\2\0\1\36"+
    "\10\0\5\36\1\u0232\25\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\347\32\36\23\0\2\36\2\0\1\36\10\0"+
    "\24\36\1\367\6\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\u0233\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u01c8\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\121\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0234\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u0235\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u0151\3\36\1\u0189\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0236\27\36\23\0\2\36\2\0\1\36"+
    "\40\0\1\u0237\42\0\12\36\1\343\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u0238\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\13\36\1\u0239\17\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\104\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\331\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u023a\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u023b\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u023c\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u0174\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\10\36\1\u01f1\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u023d\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u023e\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u023f\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\10\36\1\u0240\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\23\36\1\u0241\7\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u0242\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\321\15\36\1\343\12\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u0243\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u0244\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u0245\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u010a\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\10\36\1\311\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\5\36\1\u0107\25\36\23\0\2\36"+
    "\2\0\1\36\10\0\27\36\1\77\3\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\155\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u0246\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\103\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\224\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\u0247\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u01d6\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u0162\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u0248\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u0249\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u0205\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\5\36\1\u0103\25\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u024a\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\176\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u0162\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\113\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\27\36\1\u024b\3\36\23\0\2\36\2\0\1\36"+
    "\10\0\10\36\1\u0199\22\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u024c\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0205\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\13\36\1\u024d\17\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\113\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\2\36\1\306\30\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u024e\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\226\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\12\36\1\u024f\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\20\36\1\304\12\36\23\0\2\36\2\0\1\36"+
    "\10\0\21\36\1\367\11\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u0250\32\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0251\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u0252\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u0253\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0254\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u0255\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0256\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u0257\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\25\36\1\u0258\5\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u0135\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\23\36\1\u0195\7\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0259\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\24\36\1\u025a\6\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0221\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u025b\32\36\23\0\2\36\2\0\1\36\10\0\1\203"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u025c"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u025d"+
    "\20\36\23\0\2\36\2\0\1\36\17\0\1\u025e\63\0"+
    "\7\36\1\u025f\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\77\1\36\1\u015c\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u0260\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\12\36\1\u0261\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\23\36\1\u0262\7\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\u0263\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0264\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0265\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u01dc\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u01b8\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0266\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0193\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0267\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\36\1\103\21\36\1\u0244\7\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u011e\6\36\1\342\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\36\1\u0268\31\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\321\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\13\36\1\u0269\17\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u026a\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u026b\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\5\36\1\u020b\25\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u026c\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\33\36\1\u026d\22\0\2\36"+
    "\2\0\1\36\10\0\10\36\1\u0244\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\30\36\1\u026e\2\36\23\0\2\36"+
    "\2\0\1\36\10\0\17\36\1\u0199\13\36\23\0\2\36"+
    "\2\0\1\36\10\0\21\36\1\106\11\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u026f\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\15\36\1\u0270\15\36\23\0\2\36"+
    "\2\0\1\36\10\0\10\36\1\u0271\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u0272\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u0273\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\26\36\1\u0274\4\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0275\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\20\36\1\u018e\12\36\23\0\2\36\2\0"+
    "\1\36\20\0\1\u0276\62\0\11\36\1\u0277\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u0278\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u0279\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\342\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\25\36\1\u027a\5\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u027b\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\15\36\1\u027c\15\36\23\0"+
    "\2\36\2\0\1\36\10\0\5\36\1\u027d\25\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\u027e\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\21\36\1\u024d\11\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\u0117\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\21\36\1\u0117\11\36\23\0"+
    "\2\36\2\0\1\36\31\0\1\u027f\51\0\6\36\1\u0278"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\10\36\1\u0195"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\1\u0280\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\2\36\1\u0281\17\36"+
    "\1\u0282\10\36\23\0\2\36\2\0\1\36\10\0\2\36"+
    "\1\u0283\30\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\224\23\36\23\0\2\36\2\0\1\36\10\0\23\36"+
    "\1\211\7\36\23\0\2\36\2\0\1\36\10\0\25\36"+
    "\1\u0284\5\36\23\0\2\36\2\0\1\36\10\0\12\36"+
    "\1\u0285\20\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u0286\24\36\23\0\2\36\2\0\1\36\10\0\12\36"+
    "\1\344\20\36\23\0\2\36\2\0\1\36\10\0\5\36"+
    "\1\u0163\1\u0287\4\36\1\u010a\17\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\313\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u027e\14\36\1\u0288\5\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0263\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u013d\27\36\23\0"+
    "\2\36\2\0\1\36\24\0\1\u0289\56\0\5\36\1\u028a"+
    "\25\36\23\0\2\36\2\0\1\36\10\0\11\36\1\u028b"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u028c"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u028d"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\16\36\1\u028e"+
    "\7\36\1\u028f\4\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u021c\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u011e\32\36\23\0\2\36\2\0\1\36\10\0\11\36"+
    "\1\u0290\21\36\23\0\2\36\2\0\1\36\10\0\11\36"+
    "\1\u0291\21\36\23\0\2\36\2\0\1\36\13\0\1\u0292"+
    "\67\0\13\36\1\u0191\17\36\23\0\2\36\2\0\1\36"+
    "\10\0\26\36\1\u0293\4\36\23\0\2\36\2\0\1\36"+
    "\10\0\15\36\1\u0294\15\36\23\0\2\36\2\0\1\36"+
    "\10\0\5\36\1\u0295\25\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0296\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u0297\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\26\36\1\u0298\4\36\23\0\2\36\2\0\1\36"+
    "\10\0\12\36\1\u0299\20\36\23\0\2\36\2\0\1\36"+
    "\15\0\1\u029a\65\0\11\36\1\u029b\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\23\36\1\u029c\7\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\331\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\5\36\1\u0134\25\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u0190\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u029d\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u018e\30\36\23\0\2\36"+
    "\2\0\1\36\33\0\1\u0276\47\0\4\36\1\u029e\26\36"+
    "\23\0\2\36\2\0\1\36\10\0\16\36\1\u029f\14\36"+
    "\23\0\2\36\2\0\1\36\10\0\2\36\1\u01eb\30\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u02a0\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\14\36\1\u02a1\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\14\36\1\u02a2\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u02a3\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u02a4\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u02a5\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u02a6\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u02a7\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\15\36\1\u02a8\15\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u0286\4\36\1\u02a9\17\36"+
    "\23\0\2\36\2\0\1\36\10\0\7\36\1\u02aa\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u02ab\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u02ac\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u02ad\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u02ae\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u02a7\30\36\23\0"+
    "\2\36\2\0\1\36\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38055];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\36\1\1\11\5\1\3\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\4\1\1\0"+
    "\1\1\1\0\1\11\165\1\11\11\1\1\1\0\1\11"+
    "\1\0\1\1\2\0\1\11\225\1\1\0\1\11\50\1"+
    "\1\0\120\1\1\0\35\1\1\0\107\1\1\0\46\1"+
    "\1\0\16\1\1\0\10\1\1\11\10\1\1\0\11\1"+
    "\1\0\10\1\1\0\7\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[686];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int line;
    public int column;
    public int length;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext(); line = (yyline + 1); column = (yycolumn + 1); length = yylength(); return "Lexical error:";
            } 
            // fall through
          case 42: break;
          case 2: 
            { return "OPERATOR: DIVISION " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 43: break;
          case 3: 
            { return "OPERATOR: MULTIPLICACION " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 44: break;
          case 4: 
            { /*lleva la cuenta de lineas*/
            } 
            // fall through
          case 45: break;
          case 5: 
            { return "OPERATOR: RESTA " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 46: break;
          case 6: 
            { /*se ignoran los espacios y tabuladores*/
            } 
            // fall through
          case 47: break;
          case 7: 
            { if(yylength() > 31)
                                                                    {
                                                                        String aux = yytext().substring(0,31);
                                                                        
                                                                        return "IDENTIFIER: " + aux + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1) + " exceeded the max limit length. Identifier truncated.";                                                                       
                                                                    }
                                                                    else 
                                                                    {
                                                                        return "IDENTIFIER: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                    }
            } 
            // fall through
          case 48: break;
          case 8: 
            { return "OPERATOR: SUMA " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 49: break;
          case 9: 
            { return "OPERATOR: PORCENTAJE " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 50: break;
          case 10: 
            { return "OPERATOR: MENOR " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 51: break;
          case 11: 
            { return "OPERATOR: ASIGNAR " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 52: break;
          case 12: 
            { return "OPERATOR: MAYOR " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 53: break;
          case 13: 
            { return "OPERATOR: NEGACION " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 54: break;
          case 14: 
            { return "OPERATOR: PUNTO_Y_COMA " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 55: break;
          case 15: 
            { return "OPERATOR: COMA " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 56: break;
          case 16: 
            { return "OPERATOR: PUNTO " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 57: break;
          case 17: 
            { return "OPERATOR: CORCHETE_IZQUIERDO " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 58: break;
          case 18: 
            { return "OPERATOR: CORCHETE_DERECHO " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 59: break;
          case 19: 
            { return "OPERATOR: PARENTESIS_IZQUIERDO " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 60: break;
          case 20: 
            { return "OPERATOR: PARENTESIS_DERECHO " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 61: break;
          case 21: 
            { return "OPERATOR: LLAVE IZQUIERDO " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 62: break;
          case 22: 
            { return "OPERATOR: LLAVE DERECHO " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 63: break;
          case 23: 
            { return "OPERATOR: ARROBA " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 64: break;
          case 24: 
            { return "OPERATOR: NUMERAL " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 65: break;
          case 25: 
            { return "INTEGER: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 66: break;
          case 26: 
            { /*se ignoran los comentarios de linea*/
            } 
            // fall through
          case 67: break;
          case 27: 
            { return "OPERATOR: OROR " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 68: break;
          case 28: 
            { return "RESERVED: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 69: break;
          case 29: 
            { return "OPERATOR: MENOR_O_IGUAL " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 70: break;
          case 30: 
            { return "OPERATOR: IGUAL " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 71: break;
          case 31: 
            { return "OPERATOR: MAYOR_O_IGUAL " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 72: break;
          case 32: 
            { return "OPERATOR: DIFERENTE " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 73: break;
          case 33: 
            { return "OPERATOR: ANDAND " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 74: break;
          case 34: 
            { return "OPERATOR: CORCHETES " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 75: break;
          case 35: 
            { return "OPERATOR: PARENTESIS " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 76: break;
          case 36: 
            { return "OPERATOR: LLAVES " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 77: break;
          case 37: 
            { return "OPERATOR: DOBLE NUMERAL " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 78: break;
          case 38: 
            { return "FLOAT: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 79: break;
          case 39: 
            { return "STRING: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 80: break;
          case 40: 
            { return "Unfinished comment " + yytext() + " found in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 81: break;
          case 41: 
            { /*se ignoran los comentarios de bloque*/
            } 
            // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
