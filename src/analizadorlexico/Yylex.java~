/* The following code was generated by JFlex 1.7.0 */

package analizadorlexico;
import java.io.*;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>../AnalizadorLexico/src/analizadorlexico/Yylex.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\72\1\3\1\72\1\72\1\5\22\0\1\42\1\50\1\0"+
    "\1\64\1\0\1\44\1\51\1\70\1\57\1\60\1\2\1\43\1\53"+
    "\1\4\1\54\1\1\12\65\1\0\1\52\1\45\1\46\1\47\1\0"+
    "\1\63\1\7\1\10\1\17\1\22\1\16\1\36\1\30\1\25\1\20"+
    "\1\40\1\31\1\13\1\35\1\21\1\12\1\32\1\41\1\23\1\11"+
    "\1\15\1\14\1\27\1\33\1\37\1\24\1\26\1\55\1\0\1\56"+
    "\1\0\1\34\1\0\4\66\1\71\25\66\1\61\1\6\1\62\7\0"+
    "\1\72\32\0\1\72\23\0\1\67\u15cb\0\1\72\u097f\0\13\72\35\0"+
    "\1\72\1\72\5\0\1\72\57\0\1\72\u0fa0\0\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\31\7\1\10\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\1\1\0\1\32\1\0"+
    "\1\33\1\7\1\34\2\7\1\35\13\7\1\36\16\7"+
    "\1\37\1\40\2\7\1\41\11\7\1\42\17\7\1\43"+
    "\1\44\2\7\1\45\1\7\1\46\25\7\1\47\35\7"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\0\1\62\1\0\1\63\2\0\1\32"+
    "\2\7\1\64\1\65\3\7\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\5\7\1\74\5\7\1\75\3\7\1\76"+
    "\11\7\1\77\7\7\1\100\13\7\1\101\10\7\1\102"+
    "\12\7\1\103\26\7\1\104\11\7\1\105\7\7\1\106"+
    "\7\7\1\107\34\7\1\110\2\7\1\111\2\7\1\112"+
    "\20\7\1\113\3\7\1\114\2\7\1\115\11\7\1\0"+
    "\1\116\7\7\1\117\1\120\5\7\1\121\1\122\13\7"+
    "\1\123\13\7\1\124\1\7\1\125\1\7\1\126\1\7"+
    "\1\127\1\7\1\130\4\7\1\131\1\7\1\132\1\7"+
    "\1\133\13\7\1\134\1\7\1\135\1\136\2\7\1\137"+
    "\1\7\1\140\1\7\1\141\1\0\3\7\1\142\2\7"+
    "\1\143\1\144\1\145\23\7\1\146\3\7\1\147\15\7"+
    "\1\150\1\7\1\151\1\7\1\152\2\7\1\153\1\154"+
    "\2\7\1\155\1\7\1\156\3\7\1\157\5\7\1\160"+
    "\1\161\2\7\1\162\2\7\1\163\1\164\1\165\11\7"+
    "\1\166\2\7\1\167\1\170\3\7\1\171\1\172\3\7"+
    "\1\173\3\7\1\174\3\7\1\175\10\7\1\176\1\177"+
    "\1\7\1\200\14\7\1\201\3\7\1\202\1\7\1\203"+
    "\1\7\1\204\1\0\1\61\3\7\1\205\4\7\1\206"+
    "\2\7\1\207\15\7\1\210\3\7\1\211\2\7\1\212"+
    "\2\7\1\213\10\7\1\214\1\215\1\7\1\216\1\7"+
    "\1\217\1\220\1\221\4\7\1\222\1\223\13\7\1\0"+
    "\13\7\1\224\10\7\1\225\3\7\1\226\3\7\1\227"+
    "\7\7\1\230\1\231\1\7\1\232\4\7\1\233\4\7"+
    "\1\234\34\7\1\235\2\7\1\236\3\7\1\237\1\240"+
    "\5\7\1\241\4\7\1\242\1\243\4\7\1\244\1\7"+
    "\1\245\1\246\1\247\1\250\1\7\1\251\1\7\1\252"+
    "\1\253\2\7\1\254\1\7\1\255\1\7\1\256\5\7"+
    "\1\257\1\260\2\7\1\261\3\7\1\262\1\7\1\263"+
    "\3\7\1\264\1\265\7\7\1\266\2\7\1\267\7\7"+
    "\1\270\1\271\2\7\1\272\14\7\1\273\1\0\1\274"+
    "\3\7\1\275\1\276\4\7\1\277\7\7\1\300\1\7"+
    "\1\301\1\7\1\302\5\7\1\303\14\7\1\304\2\7"+
    "\1\305\1\306\2\7\1\307\20\7\1\310\1\7\1\311"+
    "\1\312\2\7\1\313\1\7\1\314\2\7\1\315\1\316"+
    "\2\7\1\317\13\7\1\320\1\321\11\7\1\322\3\7"+
    "\1\323\1\324\1\7\1\325\6\7\1\326\5\7\1\327"+
    "\1\7\1\330\1\7\1\331\1\332\1\333\2\7\1\334"+
    "\10\7\1\335\1\7\1\0\1\7\1\336\1\337\1\7"+
    "\1\340\1\341\1\7\1\342\4\7\1\343\1\344\1\7"+
    "\1\345\1\7\1\346\7\7\1\347\1\350\4\7\1\351"+
    "\1\7\1\352\1\7\1\353\4\7\1\354\1\355\1\356"+
    "\13\7\1\357\6\7\1\360\1\361\1\362\1\7\1\363"+
    "\3\7\1\364\1\7\1\365\1\366\1\0\2\7\1\367"+
    "\1\370\3\7\1\371\1\7\1\372\10\7\1\373\1\374"+
    "\1\375\1\376\2\7\1\377\3\7\1\u0100\3\7\1\u0101"+
    "\2\7\1\u0102\2\7\1\u0103\1\7\1\u0104\1\u0105\1\7"+
    "\1\u0106\1\u0107\2\7\1\u0108\1\u0109\12\7\1\u010a\2\7"+
    "\1\u010b\1\7\1\u010c\1\7\1\u010d\1\7\1\u010e\2\7"+
    "\1\u010f\1\7\1\u0110\3\7\1\u0111\1\u0112\1\7\1\u0113"+
    "\1\u0114\1\u0115\3\7\1\u0116\1\u0117\1\7\1\u0118\2\7"+
    "\1\0\1\7\1\u0119\1\u011a\1\7\1\u011b\1\u011c\2\7"+
    "\1\u011d\12\7\1\u011e\2\7\1\u011f\1\u0120\2\7\1\u0121"+
    "\2\7\1\u0122\1\u0123\4\7\1\u0124\3\7\1\u0125\2\7"+
    "\1\u0126\1\7\1\u0127\1\u0128\1\u0129\2\7\1\u012a\7\7"+
    "\1\u012b\4\7\1\u012c\1\u012d\1\7\1\0\1\u012e\3\7"+
    "\1\u012f\1\u0130\5\7\1\u0131\2\7\1\u0132\1\u0133\6\7"+
    "\1\u0134\1\7\1\u0135\6\7\1\u0136\4\7\1\u0137\1\u0138"+
    "\1\u0139\2\7\1\u013a\1\u013b\2\7\1\u013c\1\u013d\1\0"+
    "\1\u013e\6\7\1\u013f\2\7\1\u0140\2\7\1\u0141\1\u0142"+
    "\1\u0143\1\u0144\6\7\1\u0145\1\u0146\1\u0147\2\7\1\u0148"+
    "\1\u0149\1\u014a\1\u014b\1\0\2\7\1\u014c\3\7\1\u014d"+
    "\5\7\1\u014e\1\u014f\1\u0150\2\7\1\u0151\1\u0152\1\7"+
    "\1\u0153\1\u0154\3\7\1\u0155\1\7\1\u0156\1\u0157\3\7"+
    "\1\u0158\2\7\1\u0159\6\7\1\u015a\2\7\1\u015b\3\7"+
    "\1\u015c\2\7\1\u015d\15\7\1\u015e\1\u015f\7\7\1\u0160";

  private static int [] zzUnpackAction() {
    int [] result = new int[1400];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\73\0\261\0\354\0\261\0\u0127"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\73\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\73\0\73\0\73\0\u0887\0\73\0\u08c2\0\73\0\u08fd"+
    "\0\73\0\73\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\73\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0639\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0639\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be"+
    "\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e"+
    "\0\u18a9\0\u18e4\0\u191f\0\u0639\0\u195a\0\u1995\0\u19d0\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb"+
    "\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93"+
    "\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b"+
    "\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343"+
    "\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b"+
    "\0\u2556\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\u2591\0\u09ae\0\73\0\u09e9\0\u0a24\0\u25cc"+
    "\0\u2607\0\73\0\u2642\0\u267d\0\u0639\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u0639\0\u0639\0\u0639\0\u0639\0\u0639\0\u0639\0\u27a4"+
    "\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c"+
    "\0\u29b7\0\u29f2\0\u0639\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19"+
    "\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1"+
    "\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1"+
    "\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279"+
    "\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u0639\0\u33db\0\u3416"+
    "\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee"+
    "\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6"+
    "\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e"+
    "\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76"+
    "\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e"+
    "\0\u3d89\0\u0639\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb"+
    "\0\u3f26\0\u0639\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088"+
    "\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438"+
    "\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610"+
    "\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u0639\0\u47ad"+
    "\0\u47e8\0\u0639\0\u4823\0\u485e\0\u0639\0\u4899\0\u48d4\0\u490f"+
    "\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7"+
    "\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u0639\0\u4c49\0\u4c84"+
    "\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c"+
    "\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\73"+
    "\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u0639"+
    "\0\u0639\0\u51d1\0\u520c\0\u5247\0\u5282\0\u52bd\0\u0639\0\u0639"+
    "\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495"+
    "\0\u54d0\0\u550b\0\u5546\0\u0639\0\u5581\0\u55bc\0\u55f7\0\u5632"+
    "\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759\0\u5794\0\u57cf\0\u0639"+
    "\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u0639\0\u5931\0\u0639"+
    "\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u0639\0\u5a58\0\u0639\0\u5a93"+
    "\0\u0639\0\u5ace\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30"+
    "\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u0639"+
    "\0\u5e08\0\u5e43\0\u0639\0\u5e7e\0\u0639\0\u5eb9\0\u0639\0\u5ef4"+
    "\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b\0\u6056\0\u0639\0\u0639"+
    "\0\u0639\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3"+
    "\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb"+
    "\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568\0\u65a3"+
    "\0\u0639\0\u65de\0\u6619\0\u6654\0\u668f\0\u66ca\0\u6705\0\u6740"+
    "\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u6867\0\u68a2\0\u0639\0\u68dd"+
    "\0\u6918\0\u6953\0\u0639\0\u698e\0\u69c9\0\u0639\0\u0639\0\u6a04"+
    "\0\u6a3f\0\u0639\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66\0\u0639"+
    "\0\u6ba1\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d\0\u0639\0\u0639\0\u6cc8"+
    "\0\u6d03\0\u0639\0\u6d3e\0\u6d79\0\u0639\0\u0639\0\u6db4\0\u6def"+
    "\0\u6e2a\0\u6e65\0\u6ea0\0\u6edb\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7"+
    "\0\u0639\0\u7002\0\u703d\0\u0639\0\u0639\0\u7078\0\u70b3\0\u70ee"+
    "\0\u0639\0\u0639\0\u7129\0\u7164\0\u719f\0\u0639\0\u71da\0\u7215"+
    "\0\u7250\0\u0639\0\u728b\0\u72c6\0\u7301\0\u733c\0\u7377\0\u73b2"+
    "\0\u73ed\0\u7428\0\u7463\0\u749e\0\u74d9\0\u7514\0\u0639\0\u754f"+
    "\0\u758a\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1\0\u76ec\0\u7727"+
    "\0\u7762\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889\0\u0639\0\u78c4"+
    "\0\u78ff\0\u793a\0\u0639\0\u7975\0\u0639\0\u79b0\0\u0639\0\u79eb"+
    "\0\u79eb\0\u7a26\0\u7a61\0\u7a9c\0\u0639\0\u7ad7\0\u7b12\0\u7b4d"+
    "\0\u7b88\0\u0639\0\u7bc3\0\u7bfe\0\u0639\0\u7c39\0\u7c74\0\u7caf"+
    "\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87"+
    "\0\u7ec2\0\u7efd\0\u0639\0\u7f38\0\u7f73\0\u7fae\0\u0639\0\u7fe9"+
    "\0\u8024\0\u0639\0\u805f\0\u809a\0\u0639\0\u80d5\0\u8110\0\u814b"+
    "\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u8272\0\u0639\0\u0639\0\u82ad"+
    "\0\u0639\0\u82e8\0\u0639\0\u0639\0\u0639\0\u8323\0\u835e\0\u8399"+
    "\0\u83d4\0\u0639\0\u840f\0\u844a\0\u8485\0\u84c0\0\u84fb\0\u8536"+
    "\0\u8571\0\u85ac\0\u85e7\0\u8622\0\u865d\0\u8698\0\u86d3\0\u870e"+
    "\0\u8749\0\u8784\0\u87bf\0\u87fa\0\u8835\0\u8870\0\u88ab\0\u88e6"+
    "\0\u8921\0\u895c\0\u0639\0\u8997\0\u89d2\0\u8a0d\0\u8a48\0\u8a83"+
    "\0\u8abe\0\u8af9\0\u8b34\0\u0639\0\u8b6f\0\u8baa\0\u8be5\0\u0639"+
    "\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd"+
    "\0\u8df8\0\u8e33\0\u8e6e\0\u0639\0\u0639\0\u8ea9\0\u0639\0\u8ee4"+
    "\0\u8f1f\0\u8f5a\0\u8f95\0\u0639\0\u8fd0\0\u900b\0\u9046\0\u9081"+
    "\0\u0639\0\u90bc\0\u90f7\0\u9132\0\u916d\0\u91a8\0\u91e3\0\u921e"+
    "\0\u9259\0\u9294\0\u92cf\0\u930a\0\u9345\0\u9380\0\u93bb\0\u93f6"+
    "\0\u9431\0\u946c\0\u94a7\0\u94e2\0\u951d\0\u9558\0\u9593\0\u95ce"+
    "\0\u9609\0\u9644\0\u967f\0\u96ba\0\u96f5\0\u0639\0\u9730\0\u976b"+
    "\0\u97a6\0\u97e1\0\u981c\0\u9857\0\u0639\0\u0639\0\u9892\0\u98cd"+
    "\0\u9908\0\u9943\0\u997e\0\u0639\0\u99b9\0\u99f4\0\u9a2f\0\u9a6a"+
    "\0\u0639\0\u0639\0\u9aa5\0\u9ae0\0\u9b1b\0\u9b56\0\u9b91\0\u9bcc"+
    "\0\u0639\0\u0639\0\u0639\0\u0639\0\u9c07\0\u0639\0\u9c42\0\u0639"+
    "\0\u0639\0\u9c7d\0\u9cb8\0\u0639\0\u9cf3\0\u0639\0\u9d2e\0\u0639"+
    "\0\u9d69\0\u9da4\0\u9ddf\0\u9e1a\0\u9e55\0\u0639\0\u0639\0\u9e90"+
    "\0\u9ecb\0\u0639\0\u9f06\0\u9f41\0\u9f7c\0\u0639\0\u9fb7\0\u0639"+
    "\0\u9ff2\0\ua02d\0\ua068\0\u0639\0\u0639\0\ua0a3\0\ua0de\0\ua119"+
    "\0\ua154\0\ua18f\0\ua1ca\0\ua205\0\u0639\0\ua240\0\ua27b\0\u0639"+
    "\0\ua2b6\0\ua2f1\0\ua32c\0\ua367\0\ua3a2\0\ua3dd\0\ua418\0\u0639"+
    "\0\u0639\0\ua453\0\ua48e\0\ua4c9\0\ua504\0\ua53f\0\ua57a\0\ua5b5"+
    "\0\ua5f0\0\ua62b\0\ua666\0\ua6a1\0\ua6dc\0\ua717\0\ua752\0\ua78d"+
    "\0\u0639\0\ua7c8\0\u0639\0\ua803\0\ua83e\0\ua879\0\ua8b4\0\u0639"+
    "\0\ua8ef\0\ua92a\0\ua965\0\ua9a0\0\u0639\0\ua9db\0\uaa16\0\uaa51"+
    "\0\uaa8c\0\uaac7\0\uab02\0\uab3d\0\u0639\0\uab78\0\u0639\0\uabb3"+
    "\0\u0639\0\uabee\0\uac29\0\uac64\0\uac9f\0\uacda\0\u0639\0\uad15"+
    "\0\uad50\0\uad8b\0\uadc6\0\uae01\0\uae3c\0\uae77\0\uaeb2\0\uaeed"+
    "\0\uaf28\0\uaf63\0\uaf9e\0\u0639\0\uafd9\0\ub014\0\u0639\0\u0639"+
    "\0\ub04f\0\ub08a\0\u0639\0\ub0c5\0\ub100\0\ub13b\0\ub176\0\ub1b1"+
    "\0\ub1ec\0\ub227\0\ub262\0\ub29d\0\ub2d8\0\ub313\0\ub34e\0\ub389"+
    "\0\ub3c4\0\ub3ff\0\ub43a\0\u0639\0\ub475\0\u0639\0\u0639\0\ub4b0"+
    "\0\ub4eb\0\u0639\0\ub526\0\u0639\0\ub561\0\ub59c\0\u0639\0\u0639"+
    "\0\ub5d7\0\ub612\0\u0639\0\ub64d\0\ub688\0\ub6c3\0\ub6fe\0\ub739"+
    "\0\ub774\0\ub7af\0\ub7ea\0\ub825\0\ub860\0\ub89b\0\u0639\0\u0639"+
    "\0\ub8d6\0\ub911\0\ub94c\0\ub987\0\ub9c2\0\ub9fd\0\uba38\0\uba73"+
    "\0\ubaae\0\u0639\0\ubae9\0\ubb24\0\ubb5f\0\ubb9a\0\u0639\0\ubbd5"+
    "\0\u0639\0\ubc10\0\ubc4b\0\ubc86\0\ubcc1\0\ubcfc\0\ubd37\0\u0639"+
    "\0\ubd72\0\ubdad\0\ubde8\0\ube23\0\ube5e\0\u0639\0\ube99\0\u0639"+
    "\0\ubed4\0\u0639\0\u0639\0\u0639\0\ubf0f\0\ubf4a\0\u0639\0\ubf85"+
    "\0\ubfc0\0\ubffb\0\uc036\0\uc071\0\uc0ac\0\uc0e7\0\uc122\0\u0639"+
    "\0\uc15d\0\uc198\0\uc1d3\0\u0639\0\u0639\0\uc20e\0\uc249\0\u0639"+
    "\0\uc284\0\u0639\0\uc2bf\0\uc2fa\0\uc335\0\uc370\0\uc3ab\0\u0639"+
    "\0\uc3e6\0\u0639\0\uc421\0\uc45c\0\uc497\0\uc4d2\0\uc50d\0\uc548"+
    "\0\uc583\0\uc5be\0\uc5f9\0\u0639\0\u0639\0\uc634\0\uc66f\0\uc6aa"+
    "\0\uc6e5\0\u0639\0\uc720\0\u0639\0\uc75b\0\u0639\0\uc796\0\uc7d1"+
    "\0\uc80c\0\uc847\0\u0639\0\u0639\0\u0639\0\uc882\0\uc8bd\0\uc8f8"+
    "\0\uc933\0\uc96e\0\uc9a9\0\uc9e4\0\uca1f\0\uca5a\0\uca95\0\ucad0"+
    "\0\u0639\0\ucb0b\0\ucb46\0\ucb81\0\ucbbc\0\ucbf7\0\ucc32\0\u0639"+
    "\0\u0639\0\u0639\0\ucc6d\0\u0639\0\ucca8\0\ucce3\0\ucd1e\0\u0639"+
    "\0\ucd59\0\u0639\0\u0639\0\ucd94\0\ucdcf\0\uce0a\0\u0639\0\u0639"+
    "\0\uce45\0\uce80\0\ucebb\0\u0639\0\ucef6\0\u0639\0\ucf31\0\ucf6c"+
    "\0\ucfa7\0\ucfe2\0\ud01d\0\ud058\0\ud093\0\ud0ce\0\u0639\0\u0639"+
    "\0\u0639\0\u0639\0\ud109\0\ud144\0\u0639\0\ud17f\0\ud1ba\0\ud1f5"+
    "\0\u0639\0\ud230\0\ud26b\0\ud2a6\0\u0639\0\ud2e1\0\ud31c\0\u0639"+
    "\0\ud357\0\ud392\0\u0639\0\ud3cd\0\73\0\u0639\0\ud408\0\u0639"+
    "\0\u0639\0\ud443\0\ud47e\0\ud4b9\0\u0639\0\ud4f4\0\ud52f\0\ud56a"+
    "\0\ud5a5\0\ud5e0\0\ud61b\0\ud656\0\ud691\0\ud6cc\0\ud707\0\u0639"+
    "\0\ud742\0\ud77d\0\ud7b8\0\ud7f3\0\u0639\0\ud82e\0\u0639\0\ud869"+
    "\0\u0639\0\ud8a4\0\ud8df\0\u0639\0\ud91a\0\u0639\0\ud955\0\ud990"+
    "\0\ud9cb\0\u0639\0\u0639\0\uda06\0\u0639\0\u0639\0\u0639\0\uda41"+
    "\0\uda7c\0\udab7\0\u0639\0\u0639\0\udaf2\0\u0639\0\udb2d\0\udb68"+
    "\0\udba3\0\udbde\0\u0639\0\u0639\0\udc19\0\udc54\0\u0639\0\udc8f"+
    "\0\udcca\0\u0639\0\udd05\0\udd40\0\udd7b\0\uddb6\0\uddf1\0\ude2c"+
    "\0\ude67\0\udea2\0\udedd\0\udf18\0\u0639\0\udf53\0\udf8e\0\u0639"+
    "\0\u0639\0\udfc9\0\ue004\0\u0639\0\ue03f\0\ue07a\0\u0639\0\u0639"+
    "\0\ue0b5\0\ue0f0\0\ue12b\0\ue166\0\u0639\0\ue1a1\0\ue1dc\0\ue217"+
    "\0\ue252\0\ue28d\0\ue2c8\0\u0639\0\ue303\0\u0639\0\u0639\0\u0639"+
    "\0\ue33e\0\ue379\0\u0639\0\ue3b4\0\ue3ef\0\ue42a\0\ue465\0\ue4a0"+
    "\0\ue4db\0\ue516\0\u0639\0\ue551\0\ue58c\0\ue5c7\0\ue602\0\u0639"+
    "\0\u0639\0\ue63d\0\ue678\0\u0639\0\ue6b3\0\ue6ee\0\ue729\0\u0639"+
    "\0\u0639\0\ue764\0\ue79f\0\ue7da\0\ue815\0\ue850\0\u0639\0\ue88b"+
    "\0\ue8c6\0\u0639\0\u0639\0\ue901\0\ue93c\0\ue977\0\ue9b2\0\ue9ed"+
    "\0\uea28\0\uea63\0\uea9e\0\u0639\0\uead9\0\ueb14\0\ueb4f\0\ueb8a"+
    "\0\uebc5\0\uec00\0\u0639\0\uec3b\0\uec76\0\uecb1\0\uecec\0\u0639"+
    "\0\u0639\0\u0639\0\ued27\0\ued62\0\u0639\0\u0639\0\ued9d\0\uedd8"+
    "\0\u0639\0\u0639\0\uee13\0\u0639\0\uee4e\0\uee89\0\ueec4\0\ueeff"+
    "\0\uef3a\0\uef75\0\u0639\0\uefb0\0\uefeb\0\u0639\0\uf026\0\uf061"+
    "\0\u0639\0\u0639\0\u0639\0\u0639\0\uf09c\0\uf0d7\0\uf112\0\uf14d"+
    "\0\uf188\0\uf1c3\0\u0639\0\u0639\0\u0639\0\uf1fe\0\uf239\0\u0639"+
    "\0\u0639\0\u0639\0\u0639\0\uf274\0\uf2af\0\uf2ea\0\u0639\0\uf325"+
    "\0\uf360\0\uf39b\0\u0639\0\uf3d6\0\uf411\0\uf44c\0\uf487\0\uf4c2"+
    "\0\u0639\0\uf4fd\0\u0639\0\uf538\0\uf573\0\u0639\0\73\0\uf5ae"+
    "\0\u0639\0\u0639\0\uf5e9\0\uf624\0\uf65f\0\u0639\0\uf69a\0\u0639"+
    "\0\u0639\0\uf6d5\0\uf710\0\uf74b\0\u0639\0\uf786\0\uf7c1\0\u0639"+
    "\0\uf7fc\0\uf837\0\uf872\0\uf8ad\0\uf8e8\0\uf923\0\u0639\0\uf95e"+
    "\0\uf999\0\u0639\0\uf9d4\0\ufa0f\0\ufa4a\0\u0639\0\ufa85\0\ufac0"+
    "\0\u0639\0\ufafb\0\ufb36\0\ufb71\0\ufbac\0\ufbe7\0\ufc22\0\ufc5d"+
    "\0\ufc98\0\ufcd3\0\ufd0e\0\ufd49\0\ufd84\0\ufdbf\0\u0639\0\u0639"+
    "\0\ufdfa\0\ufe35\0\ufe70\0\ufeab\0\ufee6\0\uff21\0\uff5c\0\u0639";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1400];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\36"+
    "\1\41\1\36\1\5\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\36\1\65"+
    "\1\66\1\36\1\7\75\0\1\67\73\0\1\7\1\0"+
    "\1\7\34\0\1\7\27\0\1\7\4\0\1\70\60\0"+
    "\1\71\13\0\1\72\73\0\1\36\1\73\1\74\1\36"+
    "\1\75\1\76\1\77\1\36\1\100\1\36\1\101\1\102"+
    "\1\103\3\36\1\104\12\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\105\2\36\1\106\1\36\1\107\1\36\1\110"+
    "\1\36\1\111\2\36\1\112\1\113\15\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\114\2\36\1\115\1\36\1\116"+
    "\1\117\1\120\1\121\1\122\3\36\1\123\1\124\4\36"+
    "\1\125\2\36\1\126\3\36\1\127\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\130\2\36\1\131\1\36\1\132"+
    "\1\36\1\133\3\36\1\134\2\36\1\135\3\36\1\136"+
    "\3\36\23\0\2\36\2\0\1\36\10\0\1\137\2\36"+
    "\1\140\3\36\1\141\1\36\1\142\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\143\7\36\1\144\10\36"+
    "\1\145\7\36\23\0\2\36\2\0\1\36\10\0\1\146"+
    "\1\36\1\147\1\150\3\36\1\151\1\36\1\152\2\36"+
    "\1\153\1\36\1\154\14\36\23\0\2\36\2\0\1\36"+
    "\10\0\2\36\1\155\1\36\1\156\5\36\1\157\1\36"+
    "\1\160\13\36\1\161\2\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\162\2\36\1\163\1\164\1\165\6\36\1\166"+
    "\1\36\1\167\14\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\170\7\36\1\171\1\172\12\36\1\173\1\174"+
    "\3\36\23\0\2\36\2\0\1\36\10\0\1\175\2\36"+
    "\1\176\1\36\1\177\1\36\1\200\1\201\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\202\1\203\1\36\1\204"+
    "\1\36\1\205\1\36\1\206\1\36\1\207\2\36\1\210"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\1\211\2\36"+
    "\1\212\1\36\1\213\1\36\1\214\1\36\1\215\21\36"+
    "\23\0\2\36\2\0\1\36\10\0\7\36\1\216\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\217\2\36\1\220"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\3\36\1\221"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\1\222\10\36"+
    "\1\223\21\36\23\0\2\36\2\0\1\36\10\0\3\36"+
    "\1\224\1\225\2\36\1\226\4\36\1\227\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\230\1\36\1\231"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\1\232\2\36"+
    "\1\233\1\234\1\235\1\36\1\236\1\36\1\237\2\36"+
    "\1\240\16\36\23\0\2\36\2\0\1\36\10\0\1\241"+
    "\2\36\1\242\5\36\1\243\2\36\1\244\1\36\1\245"+
    "\14\36\23\0\2\36\2\0\1\36\10\0\33\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\246\2\36\1\247\3\36"+
    "\1\250\1\36\1\251\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\252\2\36\1\253\1\254\1\255\1\36\1\256"+
    "\1\36\1\257\2\36\1\260\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\261\27\36\23\0\2\36\2\0"+
    "\1\36\66\0\1\71\53\0\1\262\72\0\1\263\72\0"+
    "\1\264\72\0\1\265\75\0\1\266\77\0\1\267\74\0"+
    "\1\270\74\0\1\271\74\0\1\272\62\0\1\273\10\0"+
    "\1\64\5\0\3\274\1\0\63\274\1\275\3\274\3\276"+
    "\1\0\64\276\1\275\2\276\2\277\1\300\1\301\67\277"+
    "\3\70\1\302\1\70\1\302\65\70\54\0\1\273\10\0"+
    "\1\71\14\0\2\36\1\303\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\304\5\36\1\305\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\306\1\36\1\307"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\6\36\1\310"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\6\36\1\311"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\13\36\1\312"+
    "\1\36\1\313\15\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\314\12\36\1\315\17\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\316\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\21\36\1\317\11\36\23\0\2\36\2\0\1\36"+
    "\10\0\10\36\1\320\22\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\321\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\322\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\323\12\36\1\324\11\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\325\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\326\3\36\1\327\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\20\36\1\330\12\36"+
    "\23\0\2\36\2\0\1\36\10\0\26\36\1\331\4\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\36\1\332\24\36"+
    "\1\333\4\36\23\0\2\36\2\0\1\36\10\0\1\334"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\2\36\1\335"+
    "\1\36\1\336\1\36\1\337\1\36\1\340\15\36\1\341"+
    "\4\36\23\0\2\36\2\0\1\36\10\0\14\36\1\342"+
    "\1\36\1\343\14\36\23\0\2\36\2\0\1\36\10\0"+
    "\17\36\1\344\13\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\345\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\346\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\347\32\36\23\0\2\36\2\0\1\36\10\0\1\350"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\4\36\1\351"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\6\36\1\352"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\6\36\1\353"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\4\36\1\354"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\13\36\1\355"+
    "\17\36\23\0\2\36\2\0\1\36\10\0\7\36\1\356"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\6\36\1\357"+
    "\1\360\23\36\23\0\2\36\2\0\1\36\10\0\27\36"+
    "\1\361\3\36\23\0\2\36\2\0\1\36\10\0\2\36"+
    "\1\362\7\36\1\363\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\364\7\36\1\365\13\36\1\366\6\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\367\17\36\1\370\6\36"+
    "\1\371\3\36\23\0\2\36\2\0\1\36\10\0\12\36"+
    "\1\372\7\36\1\373\10\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\374\6\36\1\375\1\36\1\376\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\377\10\36\1\u0100"+
    "\1\u0101\7\36\23\0\2\36\2\0\1\36\10\0\13\36"+
    "\1\u0102\7\36\1\u0103\7\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\36\1\u0104\31\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u0105\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\23\36\1\u0106\7\36\23\0\2\36\2\0\1\36"+
    "\10\0\26\36\1\u0107\1\36\1\u0108\2\36\23\0\2\36"+
    "\2\0\1\36\10\0\26\36\1\u0109\4\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u010a\4\36\1\u010b\3\36\1\u010c"+
    "\3\36\1\u010d\15\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u010e\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\u010f\22\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\u0110\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\13\36\1\u0111\17\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u0112\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0113\1\u0114\1\u0115\1\u0116\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u0117\3\36\1\u0118\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u0119\3\36\1\u011a"+
    "\1\u011b\4\36\1\u011c\1\36\1\u011d\11\36\1\u011e\4\36"+
    "\23\0\2\36\2\0\1\36\10\0\3\36\1\u011f\1\36"+
    "\1\u0120\25\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u0121\16\36\23\0\2\36\2\0\1\36\10\0\3\36"+
    "\1\u0122\3\36\1\u0123\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u0124\6\36\1\u0125\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u0126\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u0127\3\36\1\u0128\1\36\1\u0129"+
    "\1\u012a\1\u012b\1\u012c\7\36\1\u012d\7\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u012e\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\26\36\1\u012f\4\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u0130\17\36\1\u0131\4\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u0132\1\36"+
    "\1\u0133\1\36\1\u0134\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0135\21\36\1\u0136\4\36\23\0\2\36"+
    "\2\0\1\36\10\0\30\36\1\u0137\2\36\23\0\2\36"+
    "\2\0\1\36\10\0\16\36\1\u0138\14\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u0139\6\36\1\u013a\15\36"+
    "\23\0\2\36\2\0\1\36\10\0\10\36\1\u013b\22\36"+
    "\23\0\2\36\2\0\1\36\10\0\5\36\1\u013c\20\36"+
    "\1\u013d\4\36\23\0\2\36\2\0\1\36\10\0\26\36"+
    "\1\u013e\4\36\23\0\2\36\2\0\1\36\10\0\1\u013f"+
    "\1\36\1\u0140\1\36\1\u0141\3\36\1\u0142\1\36\1\u0143"+
    "\14\36\1\u0144\3\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u0145\1\36\1\u0146\30\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0147\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u0148\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0149\17\36\1\u014a\6\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u014b\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u014c\1\36\1\u014d\1\36\1\u014e"+
    "\1\36\1\u014f\1\36\1\u0150\7\36\1\u0151\2\36\1\u0152"+
    "\3\36\1\u0153\3\36\23\0\2\36\2\0\1\36\10\0"+
    "\21\36\1\u0154\11\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u0155\32\36\23\0\2\36\2\0\1\36\10\0\20\36"+
    "\1\u0156\12\36\23\0\2\36\2\0\1\36\10\0\4\36"+
    "\1\u0157\1\u0158\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u0159\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u015a\7\36\1\u015b\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u015c\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u015d\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u015e\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u015f\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u0160\2\36\1\u0161\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\15\36\1\u0162\15\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u0163\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u0164\10\36\1\u0165\1\u0166"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\2\36\1\u0167"+
    "\30\36\23\0\2\36\2\0\1\36\10\0\1\u0168\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\36\1\u0169\31\36"+
    "\23\0\2\36\2\0\1\36\10\0\14\36\1\u016a\16\36"+
    "\23\0\2\36\2\0\1\36\10\0\20\36\1\u016b\12\36"+
    "\23\0\2\36\2\0\1\36\10\0\3\36\1\u016c\3\36"+
    "\1\u016d\1\36\1\u016e\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u016f\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\u0170\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0171\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u0172\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u0173\1\36\1\u0174\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u0175\21\36\1\u0176\2\36"+
    "\23\0\2\36\2\0\1\36\10\0\12\36\1\u0177\1\u0178"+
    "\17\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u0179"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u017a"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u017b"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\5\36\1\u017c"+
    "\6\36\1\u017d\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u017e\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u017f\5\36\1\u0180\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u0181\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u0182\7\36\1\u0183\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u0184\3\36\1\u0185"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\11\36\1\u0186"+
    "\21\36\23\0\2\36\2\0\1\36\17\0\1\u0187\46\0"+
    "\1\273\3\0\1\u0187\1\0\1\301\1\u0188\1\300\72\301"+
    "\1\300\70\301\7\0\3\36\1\u0189\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u018a\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\u018b\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u018c\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\16\36\1\u018d\14\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u018e\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\22\36\1\u018f\10\36\23\0\2\36"+
    "\2\0\1\36\10\0\16\36\1\u0190\14\36\23\0\2\36"+
    "\2\0\1\36\10\0\22\36\1\u0191\10\36\23\0\2\36"+
    "\2\0\1\36\10\0\24\36\1\u0192\6\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u0193\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\25\36\1\u0194\5\36\23\0\2\36"+
    "\2\0\1\36\10\0\24\36\1\u0195\6\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u0196\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0197\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0198\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u0199\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u019a\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u019b\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u019c\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\u019d\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u019e\1\36\1\u019f\1\u01a0\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u01a1\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u01a2\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u01a3\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u01a4\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u01a5\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u01a6\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\u01a7\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u01a8\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u01a9\4\36\1\u01aa"+
    "\1\u01ab\13\36\1\u01ac\6\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u01ad\13\36\1\u01ae\7\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u01af\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\15\36\1\u01b0\15\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u01b1\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u01b2\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u01b3\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u01b4\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u01b5\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u01b6\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\21\36\1\u01b7\11\36\23\0\2\36"+
    "\2\0\1\36\10\0\13\36\1\u01b8\17\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u01b9\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u01ba\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\13\36\1\u01bb\17\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u01bc\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u01bd\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u01be\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u01bf\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\21\36\1\u01c0\11\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\u01c1\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u01c2\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u01c3\26\36\1\u01c4\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u01c5\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u01c6\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u01c7\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u01c8\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u01c9\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\32\36\1\u01ca\23\0\2\36\2\0\1\36"+
    "\10\0\23\36\1\u01cb\7\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u01cc\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u01cd\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u01ce\1\u01cf\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u01d0\2\36\1\u01d1\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\21\36\1\u01d2\4\36\1\u01d3"+
    "\4\36\23\0\2\36\2\0\1\36\10\0\25\36\1\u01d4"+
    "\5\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u01d5"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\1\u01d6\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\7\36\1\u01d7\23\36"+
    "\23\0\2\36\2\0\1\36\5\0\1\u01d8\2\0\33\36"+
    "\23\0\2\36\2\0\1\36\10\0\4\36\1\u01d9\26\36"+
    "\23\0\2\36\2\0\1\36\10\0\7\36\1\u01da\4\36"+
    "\1\u01db\16\36\23\0\2\36\2\0\1\36\10\0\10\36"+
    "\1\u01dc\22\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u01dd\23\36\23\0\2\36\2\0\1\36\10\0\2\36"+
    "\1\u01de\3\36\1\u01df\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u01e0\1\u01e1\1\u01e2\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u01e3\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u01e4\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u01e5\1\u01e6\25\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u01e7\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u01e8\3\36\1\u01e9\3\36"+
    "\1\u01ea\5\36\1\u01eb\12\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\u01ec\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\23\36\1\u01ed\2\36\1\u01ee\4\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u01ef\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u01f0\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u01f1\11\36\1\u01f2\16\36"+
    "\23\0\2\36\2\0\1\36\10\0\2\36\1\u01f3\30\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u01f4\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\14\36\1\u01f5\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\u01f6\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u01f7\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u01f8\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u01f9\3\36\1\u01fa"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u01fb"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u01fc"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u01fd"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u01fe"+
    "\1\36\1\u01ff\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\u0200\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u0201\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0202\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\u0203\3\36\1\u0204\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0205\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\16\36\1\u0206\14\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0207\1\u0208\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u0209\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u020a\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u020b\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u020c\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u020d\6\36\1\u020e\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\10\36\1\u020f\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\36\1\u0210\31\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u0211\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\23\36\1\u0212\7\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u0213\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u0214\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0215\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u0216\4\36\1\u0217\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\15\36\1\u0218\15\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u0219\6\36\1\u021a\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\21\36\1\u021b\11\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u021c\1\36"+
    "\1\u021d\11\36\1\u021e\10\36\23\0\2\36\2\0\1\36"+
    "\10\0\23\36\1\u021f\7\36\23\0\2\36\2\0\1\36"+
    "\10\0\2\36\1\u0220\30\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0221\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\2\36\1\u0222\5\36\1\u0223\10\36\1\u0224\11\36"+
    "\23\0\2\36\2\0\1\36\10\0\7\36\1\u0225\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\4\36\1\u0226\6\36"+
    "\1\u0227\17\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u0228\24\36\23\0\2\36\2\0\1\36\10\0\1\u0229"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\5\36\1\u022a"+
    "\25\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u022b"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u022c"+
    "\3\36\1\u022d\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u022e\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u022f\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\16\36\1\u0230\14\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u0231\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u0232\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\13\36\1\u0233\17\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u0234\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0235\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\u0236\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\u0237\4\36\1\u0238\15\36\23\0\2\36\2\0"+
    "\1\36\10\0\24\36\1\u0239\6\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u023a\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\36\1\u023b\31\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u023c\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\u023d\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u023e\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u023f\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u0240\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u0241\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u0242\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u0243\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u0244\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u0245\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u0246\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u0247\5\36\1\u0248\12\36\1\u0249"+
    "\7\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u024a"+
    "\6\36\1\u024b\5\36\1\u024c\5\36\1\u024d\4\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u024e\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\22\36\1\u024f\10\36\23\0"+
    "\2\36\2\0\1\36\10\0\16\36\1\u0250\14\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0251\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u0252\1\36\1\u0253"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u0254"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\10\36\1\u0255"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u0256"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\5\36\1\u0257"+
    "\25\36\23\0\2\36\2\0\1\36\10\0\21\36\1\u0258"+
    "\11\36\23\0\2\36\2\0\1\36\10\0\5\36\1\u0259"+
    "\25\36\23\0\2\36\2\0\1\36\10\0\2\36\1\u025a"+
    "\30\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u025b"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u025c"+
    "\1\u025d\23\36\23\0\2\36\2\0\1\36\10\0\1\u025e"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u025f"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\10\36\1\u0260"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\10\36\1\u0261"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u0262"+
    "\2\36\1\u0263\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\u0264\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\26\36\1\u0265\4\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0266\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u0267\20\36\23\0\2\36\2\0\1\36\5\0"+
    "\1\u0268\36\0\1\u0268\21\0\1\u0269\14\0\4\36\1\u026a"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u026b"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\10\36\1\u026c"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u026d"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u026e"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u026f"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\5\36\1\u0270"+
    "\25\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u0271"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u0272"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u0273"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\2\36\1\u0274"+
    "\30\36\23\0\2\36\2\0\1\36\10\0\22\36\1\u0275"+
    "\10\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u0276"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\11\36\1\u0277"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\11\36\1\u0278"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\10\36\1\u0279"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\2\36\1\u027a"+
    "\30\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u027b"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u027c"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\11\36\1\u027d"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u027e"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u027f"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\26\36\1\u0280"+
    "\4\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u0281"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\13\36\1\u0282"+
    "\17\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u0283"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u0284"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u0285"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u0286"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\1\u0287\2\36"+
    "\1\u0288\27\36\23\0\2\36\2\0\1\36\10\0\1\u0289"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u028a"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\5\36\1\u028b"+
    "\25\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u028c"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u028d"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u028e"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u028f"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\13\36\1\u0290"+
    "\1\u0291\13\36\1\u0292\1\36\1\u0293\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0294\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\u0295\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u0296\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\u0297\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u0298\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\4\36\1\u0299\26\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u029a\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u029b\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\21\36\1\u029c\11\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u029d\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\u029e\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u029f\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\20\36\1\u02a0\12\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u02a1\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\u02a2\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u02a3\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\u02a4\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u02a5\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u02a6\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u02a7\14\36\1\u02a8\13\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u02a9\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u02aa\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\u02ab\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\21\36\1\u02ac\11\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\u02ad\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\23\36\1\u02ae\7\36\23\0"+
    "\2\36\2\0\1\36\17\0\1\u02af\63\0\20\36\1\u02b0"+
    "\12\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u02b1"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\1\u02b2\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\5\36\1\u02b3\25\36"+
    "\23\0\2\36\2\0\1\36\10\0\23\36\1\u02b4\7\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u02b5\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u02b6\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u02b7\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u02b8\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u02b9\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\26\36\1\u02ba\4\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u02bb\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u02bc\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u02bd\10\36\1\u02be\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u02bf\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u02c0\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u02c1\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\5\36\1\u02c2\25\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u02c3\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u02c4\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u02c5\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u02c6\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u02c7\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u02c8\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u02c9\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u02ca\24\36\1\u02cb\5\36"+
    "\23\0\2\36\2\0\1\36\10\0\22\36\1\u02cc\10\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u02cd\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u02ce\1\36\1\u02cf"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u02d0"+
    "\4\36\1\u02d1\11\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\u02d2\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u02d3\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u02d4\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\30\36\1\u02d5\2\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\u02d6\22\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u02d7\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u02d8\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\13\36\1\u02d9\17\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u02da\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u02db\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\u02dc\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u02dd\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u02de\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u02df\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u02e0\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u02e1\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\36\1\u02e2\31\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u02e3\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u02e4\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u02e5\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u02e6\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u02e7\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u02e8\32\36\23\0\2\36\2\0\1\36\10\0\26\36"+
    "\1\u02e9\4\36\23\0\2\36\2\0\1\36\10\0\5\36"+
    "\1\u02ea\25\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u02eb\16\36\23\0\2\36\2\0\1\36\10\0\12\36"+
    "\1\u02ec\20\36\23\0\2\36\2\0\1\36\10\0\11\36"+
    "\1\u02ed\2\36\1\u02ee\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u02ef\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u02f0\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\36\1\u02f1\31\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u02f2\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\5\36\1\u02f3\25\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u02f4\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u02f5\10\36\1\u02f6\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u02f7\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u02f8\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u02f9\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\22\36\1\u02fa\10\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u02fb\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u02fc\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u02fd\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u02fe\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u02ff\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u0300\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0301\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\16\36\1\u0302\14\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u0303\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u0304\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u0305\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\23\36\1\u0306\7\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u0307\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u0308\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0309\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u030a\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u030b\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u030c\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u030d\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u030e\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u030f\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u0310\32\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u0311\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0312\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u0313\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u0314\32\36\23\0\2\36\2\0\1\36\10\0\27\36"+
    "\1\u0315\3\36\23\0\2\36\2\0\1\36\10\0\11\36"+
    "\1\u0316\21\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u0317\23\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u0318\23\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u0319\23\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u031a\23\36\23\0\2\36\2\0\1\36\10\0\16\36"+
    "\1\u031b\14\36\23\0\2\36\2\0\1\36\10\0\16\36"+
    "\1\u031c\14\36\23\0\2\36\2\0\1\36\10\0\4\36"+
    "\1\u031d\26\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u031e\23\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u031f\24\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u0320\23\36\23\0\2\36\2\0\1\36\10\0\13\36"+
    "\1\u0321\17\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u0322\16\36\23\0\2\36\2\0\1\36\10\0\11\36"+
    "\1\u0323\21\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u0324\24\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u0325\24\36\23\0\2\36\2\0\1\36\10\0\16\36"+
    "\1\u0326\14\36\23\0\2\36\2\0\1\36\10\0\27\36"+
    "\1\u0327\3\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u0328\24\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u0329\24\36\23\0\2\36\2\0\1\36\66\0\1\u0269"+
    "\14\0\5\36\1\u032a\25\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u032b\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u032c\32\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u032d\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u032e\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\23\36\1\u032f\7\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0330\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0331\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0332\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u0333\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\u0334\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u0335\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0336\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0337\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\13\36\1\u0338\17\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u0339\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u033a\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u033b\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u033c\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u033d\32\36\23\0\2\36\2\0\1\36\10\0\26\36"+
    "\1\u033e\4\36\23\0\2\36\2\0\1\36\10\0\3\36"+
    "\1\u033f\27\36\23\0\2\36\2\0\1\36\10\0\11\36"+
    "\1\u0340\21\36\23\0\2\36\2\0\1\36\10\0\1\u0341"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u0342"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\13\36\1\u0343"+
    "\17\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u0344"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u0345"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\25\36\1\u0346"+
    "\5\36\23\0\2\36\2\0\1\36\10\0\1\u0347\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\12\36\1\u0348\20\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u0349\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u034a\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\26\36\1\u034b\4\36\23\0"+
    "\2\36\2\0\1\36\10\0\5\36\1\u034c\25\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u034d\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u034e\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u034f\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\u0350\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0351\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\24\36\1\u0352\6\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\u0353\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0354\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u0355\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u0356\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\u0357\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u0358\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u0359\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u035a\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u035b\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u035c\3\36\1\u035d\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u035e\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u035f\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u0360\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0361\23\36\23\0\2\36\2\0"+
    "\1\36\40\0\1\u0362\42\0\4\36\1\u0363\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u0364\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\u0365\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0366\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0367\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u0368\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\13\36\1\u0369\17\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u036a\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u036b\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u036c\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u036d\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\14\36\1\u036e\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u036f\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u0370\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\u0371\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\14\36\1\u0372\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u0373\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0374\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0375\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u0376\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\14\36\1\u0377\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u0378\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u0379\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\10\36\1\u037a\22\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u037b\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\23\36\1\u037c\7\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u037d\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u037e\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u037f\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u0380\15\36\1\u0381"+
    "\12\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u0382"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\13\36\1\u0383"+
    "\17\36\23\0\2\36\2\0\1\36\10\0\1\u0384\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u0385\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u0386\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u0387\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u0388\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\12\36\1\u0389\20\36\23\0\2\36"+
    "\2\0\1\36\10\0\10\36\1\u038a\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\5\36\1\u038b\25\36\23\0\2\36"+
    "\2\0\1\36\10\0\27\36\1\u038c\3\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u038d\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u038e\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u038f\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u0390\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u0391\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u0392\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0393\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\u0394\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u0395\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0396\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\u0397\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0398\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\12\36\1\u0399\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u039a\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\12\36\1\u039b\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\u039c\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u039d\32\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\u039e\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u039f\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u03a0\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u03a1\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u03a2\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u03a3\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u03a4\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\27\36\1\u03a5\3\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u03a6\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u03a7\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\u03a8\22\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u03a9\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\21\36\1\u03aa\11\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u03ab\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\u03ac\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u03ad\32\36\23\0\2\36\2\0\1\36\10\0\12\36"+
    "\1\u03ae\20\36\23\0\2\36\2\0\1\36\10\0\4\36"+
    "\1\u03af\26\36\23\0\2\36\2\0\1\36\10\0\4\36"+
    "\1\u03b0\26\36\23\0\2\36\2\0\1\36\10\0\1\u03b1"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\11\36\1\u03b2"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\10\36\1\u03b3"+
    "\22\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u03b4"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\13\36\1\u03b5"+
    "\17\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u03b6"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\2\36\1\u03b7"+
    "\30\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u03b8"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u03b9"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u03ba"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u03bb"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u03bc"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\6\36\1\u03bd"+
    "\24\36\23\0\2\36\2\0\1\36\10\0\20\36\1\u03be"+
    "\12\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u03bf"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u03c0"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\1\u03c1\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\21\36\1\u03c2\11\36"+
    "\23\0\2\36\2\0\1\36\10\0\11\36\1\u03c3\21\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u03c4\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u03c5\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u03c6\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u03c7\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u03c8\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u03c9\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u03ca\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u03cb\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u03cc\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u03cd\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u03ce\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\14\36\1\u03cf\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u03d0\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u03d1\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u03d2\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\25\36\1\u03d3\5\36\23\0"+
    "\2\36\2\0\1\36\10\0\24\36\1\u03d4\6\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u03d5\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u03d6\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u03d7\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u03d8\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u03d9\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u03da\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\23\36\1\u03db\7\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u03dc\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\24\36\1\u03dd\6\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u03de\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u03df\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u03e0\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\21\36\1\u03e1\11\36\23\0"+
    "\2\36\2\0\1\36\10\0\21\36\1\u03e2\11\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u03e3\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u03e4\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u03e5\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u03e6\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u03e7\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u03e8\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\17\36\1\u03e9\13\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u03ea\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\12\36\1\u03eb\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\12\36\1\u03ec\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\10\36\1\u03ed\22\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u03ee\32\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u03ef\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u03f0\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u03f1\20\36\23\0\2\36\2\0\1\36\17\0"+
    "\1\u03f2\63\0\1\u03f3\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u03f4\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u03f5\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u03f6\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u03f7\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\21\36\1\u03f8\11\36\23\0\2\36\2\0\1\36"+
    "\10\0\10\36\1\u03f9\22\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u03fa\1\36\1\u03fb\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\u03fc\32\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u03fd\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\5\36\1\u03fe\25\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u03ff\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u0400\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\23\36\1\u0401\7\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0402\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\u0403\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u0404\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u0405\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0406\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\3\36\1\u0407\27\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u0408\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u0409\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u040a\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u040b\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\u040c\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u040d\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u040e\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u040f\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0410\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u0411\32\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u0412\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u0413\32\36\23\0\2\36\2\0\1\36\10\0\22\36"+
    "\1\u0414\10\36\23\0\2\36\2\0\1\36\10\0\2\36"+
    "\1\u0415\30\36\23\0\2\36\2\0\1\36\10\0\10\36"+
    "\1\u0416\22\36\23\0\2\36\2\0\1\36\10\0\2\36"+
    "\1\u0417\30\36\23\0\2\36\2\0\1\36\10\0\10\36"+
    "\1\u0418\22\36\23\0\2\36\2\0\1\36\10\0\1\36"+
    "\1\u0419\21\36\1\u041a\7\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u041b\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u041c\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u041d\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u041e\6\36\1\u041f\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u0420\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u0421\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\36\1\u0422\31\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u0423\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\u0424\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u0425\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u0426\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\13\36\1\u0427\17\36\23\0\2\36\2\0"+
    "\1\36\10\0\30\36\1\u0428\2\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u0429\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\10\36\1\u042a\22\36\23\0\2\36\2\0"+
    "\1\36\10\0\20\36\1\u042b\12\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u042c\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u042d\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\12\36\1\u042e\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\10\36\1\u042f\22\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\u0430\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\21\36\1\u0431\11\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0432\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0433\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0434\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\5\36\1\u0435\25\36\23\0\2\36\2\0\1\36"+
    "\10\0\20\36\1\u0436\12\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u0437\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u0438\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u0439\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\15\36\1\u043a\15\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\u043b\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\33\36\1\u043c\22\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u043d\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u043e\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u043f\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u0440\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u0441\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\u0442\22\36\23\0\2\36\2\0\1\36\10\0"+
    "\30\36\1\u0443\2\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0444\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u0445\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0446\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\17\36\1\u0447\13\36\23\0\2\36\2\0\1\36\10\0"+
    "\21\36\1\u0448\11\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u0449\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u044a\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\25\36\1\u044b\5\36\23\0\2\36\2\0\1\36\10\0"+
    "\15\36\1\u044c\15\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\u044d\22\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\u044e\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u044f\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0450\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0451\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u0452\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\11\36\1\u0453\21\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0454\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\u0455\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u0456\32\36\23\0\2\36\2\0\1\36\10\0\2\36"+
    "\1\u0457\30\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u0458\16\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u0459\23\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u045a\23\36\23\0\2\36\2\0\1\36\10\0\26\36"+
    "\1\u045b\4\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u045c\16\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u045d\23\36\23\0\2\36\2\0\1\36\10\0\26\36"+
    "\1\u045e\4\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u045f\23\36\23\0\2\36\2\0\1\36\10\0\21\36"+
    "\1\u0460\11\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u0461\24\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u0462\24\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u0463\23\36\23\0\2\36\2\0\1\36\10\0\20\36"+
    "\1\u0464\12\36\23\0\2\36\2\0\1\36\20\0\1\u0465"+
    "\62\0\4\36\1\u0466\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0467\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\13\36\1\u0468\17\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u0469\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u046a\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u046b\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\2\36\1\u046c\30\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u046d\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u046e\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u046f\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u0470\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\25\36\1\u0471\5\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u0472\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\12\36\1\u0473\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u0474\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u0475\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u0476\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\10\36\1\u0477\22\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0478\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u0479\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u047a\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\15\36\1\u047b\15\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u047c\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u047d\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u047e\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u047f\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u0480\32\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0481\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0482\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\36\1\u0483\31\36\23\0\2\36\2\0\1\36\10\0"+
    "\13\36\1\u0484\17\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0485\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0486\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\u0487\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0488\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u0489\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\22\36\1\u048a\10\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u048b\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\u048c\22\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u048d\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u048e\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u048f\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\21\36\1\u0490\11\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0491\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\u0492\22\36\23\0\2\36\2\0\1\36\10\0"+
    "\22\36\1\u0493\10\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u0494\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u0495\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0496\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\3\36\1\u0497\27\36\23\0\2\36\2\0\1\36\10\0"+
    "\21\36\1\u0498\11\36\23\0\2\36\2\0\1\36\31\0"+
    "\1\u0499\51\0\30\36\1\u049a\2\36\23\0\2\36\2\0"+
    "\1\36\10\0\14\36\1\u049b\16\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u049c\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u049d\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\6\36\1\u049e\24\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u049f\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\1\u04a0\32\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u04a1\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\21\36\1\u04a2\11\36\23\0\2\36\2\0\1\36"+
    "\10\0\10\36\1\u04a3\22\36\23\0\2\36\2\0\1\36"+
    "\10\0\5\36\1\u04a4\25\36\23\0\2\36\2\0\1\36"+
    "\10\0\1\u04a5\32\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\u04a6\17\36\1\u04a7\10\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u04a8\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u04a9\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\12\36\1\u04aa\20\36\23\0\2\36\2\0"+
    "\1\36\10\0\2\36\1\u04ab\30\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u04ac\23\36\23\0\2\36\2\0"+
    "\1\36\10\0\15\36\1\u04ad\15\36\23\0\2\36\2\0"+
    "\1\36\10\0\30\36\1\u04ae\2\36\23\0\2\36\2\0"+
    "\1\36\10\0\23\36\1\u04af\7\36\23\0\2\36\2\0"+
    "\1\36\10\0\15\36\1\u04b0\15\36\23\0\2\36\2\0"+
    "\1\36\10\0\23\36\1\u04b1\7\36\23\0\2\36\2\0"+
    "\1\36\10\0\25\36\1\u04b2\5\36\23\0\2\36\2\0"+
    "\1\36\10\0\11\36\1\u04b3\21\36\23\0\2\36\2\0"+
    "\1\36\10\0\7\36\1\u04b4\1\36\1\u04b5\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u04b6\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u04b7\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u04b8\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u04b9\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u04ba\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u04bb\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u04bc\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\13\36\1\u04bd\17\36\23\0"+
    "\2\36\2\0\1\36\10\0\5\36\1\u04be\1\u04bf\4\36"+
    "\1\u04c0\17\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u04c1\16\36\23\0\2\36\2\0\1\36\10\0\21\36"+
    "\1\u04c2\11\36\23\0\2\36\2\0\1\36\10\0\12\36"+
    "\1\u04c3\20\36\23\0\2\36\2\0\1\36\10\0\12\36"+
    "\1\u04c4\20\36\23\0\2\36\2\0\1\36\10\0\11\36"+
    "\1\u04c5\21\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u04c6\24\36\23\0\2\36\2\0\1\36\10\0\15\36"+
    "\1\u04c7\15\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u04c8\16\36\23\0\2\36\2\0\1\36\10\0\10\36"+
    "\1\u04c9\14\36\1\u04ca\5\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u04cb\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u04cc\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u04cd\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u04ce\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\4\36\1\u04cf\26\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u04d0\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\6\36\1\u04d1\24\36\23\0\2\36\2\0\1\36"+
    "\10\0\10\36\1\u04d2\22\36\23\0\2\36\2\0\1\36"+
    "\10\0\14\36\1\u04d3\16\36\23\0\2\36\2\0\1\36"+
    "\10\0\3\36\1\u04d4\27\36\23\0\2\36\2\0\1\36"+
    "\10\0\5\36\1\u04d5\25\36\23\0\2\36\2\0\1\36"+
    "\10\0\11\36\1\u04d6\21\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u04d7\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u04d8\23\36\23\0\2\36\2\0\1\36"+
    "\10\0\12\36\1\u04d9\20\36\23\0\2\36\2\0\1\36"+
    "\10\0\7\36\1\u04da\23\36\23\0\2\36\2\0\1\36"+
    "\24\0\1\u04db\56\0\6\36\1\u04dc\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\u04dd\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u04de\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u04df\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\16\36\1\u04e0\14\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u04e1\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u04e2\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\5\36\1\u04e3\25\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u04e4\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u04e5\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u04e6\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\21\36\1\u04e7\11\36\23\0\2\36"+
    "\2\0\1\36\10\0\21\36\1\u04e8\11\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\u04e9\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u04ea\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u04eb\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u04ec\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\16\36\1\u04ed\7\36\1\u04ee\4\36"+
    "\23\0\2\36\2\0\1\36\10\0\3\36\1\u04ef\27\36"+
    "\23\0\2\36\2\0\1\36\10\0\3\36\1\u04f0\27\36"+
    "\23\0\2\36\2\0\1\36\10\0\14\36\1\u04f1\16\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u04f2\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u04f3\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u04f4\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\13\36\1\u04f5\17\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u04f6\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u04f7\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u04f8\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\25\36\1\u04f9\5\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u04fa\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u04fb\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\20\36\1\u04fc\12\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\u04fd\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\11\36\1\u04fe\21\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u04ff\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0500\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u0501\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0502\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\10\36\1\u0503\22\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0504\23\36\23\0\2\36"+
    "\2\0\1\36\10\0\6\36\1\u0505\24\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u0506\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\14\36\1\u0507\16\36\23\0\2\36"+
    "\2\0\1\36\10\0\3\36\1\u0508\27\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u0509\30\36\23\0\2\36"+
    "\2\0\1\36\10\0\2\36\1\u050a\30\36\23\0\2\36"+
    "\2\0\1\36\13\0\1\u050b\67\0\14\36\1\u050c\16\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u050d\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u050e\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u050f\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\13\36\1\u0510\17\36\23\0"+
    "\2\36\2\0\1\36\10\0\26\36\1\u0511\4\36\23\0"+
    "\2\36\2\0\1\36\10\0\15\36\1\u0512\15\36\23\0"+
    "\2\36\2\0\1\36\10\0\14\36\1\u0513\16\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0514\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\5\36\1\u0515\25\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u0516\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\3\36\1\u0517\27\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u0518\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u0519\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u051a\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u051b\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u051c\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\36\1\u051d\31\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u051e\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u051f\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\26\36\1\u0520\4\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0521\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u0522\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\16\36\1\u0523\14\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u0524\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u0525\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u0526\20\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u0527\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u0528\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\13\36\1\u0529\17\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u052a\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\12\36\1\u052b\20\36\23\0"+
    "\2\36\2\0\1\36\15\0\1\u052c\65\0\1\36\1\u052d"+
    "\31\36\23\0\2\36\2\0\1\36\10\0\3\36\1\u052e"+
    "\27\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u052f"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\11\36\1\u0530"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\11\36\1\u0531"+
    "\21\36\23\0\2\36\2\0\1\36\10\0\23\36\1\u0532"+
    "\7\36\23\0\2\36\2\0\1\36\10\0\16\36\1\u0533"+
    "\14\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u0534"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\5\36\1\u0535"+
    "\25\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u0536"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\4\36\1\u0537"+
    "\26\36\23\0\2\36\2\0\1\36\10\0\12\36\1\u0538"+
    "\20\36\23\0\2\36\2\0\1\36\10\0\14\36\1\u0539"+
    "\16\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u053a"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u053b"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u053c"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\2\36\1\u053d"+
    "\30\36\23\0\2\36\2\0\1\36\10\0\13\36\1\u053e"+
    "\17\36\23\0\2\36\2\0\1\36\33\0\1\u053f\47\0"+
    "\4\36\1\u0540\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u0541\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\6\36\1\u0542\24\36\23\0\2\36\2\0\1\36\10\0"+
    "\4\36\1\u0543\26\36\23\0\2\36\2\0\1\36\10\0"+
    "\16\36\1\u0544\14\36\23\0\2\36\2\0\1\36\10\0"+
    "\10\36\1\u0545\22\36\23\0\2\36\2\0\1\36\10\0"+
    "\14\36\1\u0546\16\36\23\0\2\36\2\0\1\36\10\0"+
    "\5\36\1\u0547\25\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u0548\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\21\36\1\u0549\11\36\23\0\2\36\2\0\1\36\10\0"+
    "\2\36\1\u054a\30\36\23\0\2\36\2\0\1\36\10\0"+
    "\12\36\1\u054b\20\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u054c\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\7\36\1\u054d\23\36\23\0\2\36\2\0\1\36\10\0"+
    "\1\u054e\32\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u054f\16\36\23\0\2\36\2\0\1\36\10\0\7\36"+
    "\1\u0550\23\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u0551\24\36\23\0\2\36\2\0\1\36\10\0\6\36"+
    "\1\u0552\24\36\23\0\2\36\2\0\1\36\10\0\21\36"+
    "\1\u0553\11\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u0554\16\36\23\0\2\36\2\0\1\36\10\0\14\36"+
    "\1\u0555\16\36\23\0\2\36\2\0\1\36\10\0\1\u0556"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\7\36\1\u0557"+
    "\23\36\23\0\2\36\2\0\1\36\10\0\1\u0558\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u0559\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u055a\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\11\36\1\u055b\21\36"+
    "\23\0\2\36\2\0\1\36\10\0\2\36\1\u055c\30\36"+
    "\23\0\2\36\2\0\1\36\10\0\26\36\1\u055d\4\36"+
    "\23\0\2\36\2\0\1\36\10\0\16\36\1\u055e\14\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u055f\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\7\36\1\u0560\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\23\36\1\u0561\7\36"+
    "\23\0\2\36\2\0\1\36\10\0\15\36\1\u0562\15\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u0563\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u0564\4\36"+
    "\1\u0565\17\36\23\0\2\36\2\0\1\36\10\0\1\u0566"+
    "\32\36\23\0\2\36\2\0\1\36\10\0\1\u0567\32\36"+
    "\23\0\2\36\2\0\1\36\10\0\7\36\1\u0568\23\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\36\1\u0569\31\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\36\1\u056a\31\36"+
    "\23\0\2\36\2\0\1\36\10\0\6\36\1\u056b\24\36"+
    "\23\0\2\36\2\0\1\36\10\0\4\36\1\u056c\26\36"+
    "\23\0\2\36\2\0\1\36\10\0\4\36\1\u056d\26\36"+
    "\23\0\2\36\2\0\1\36\10\0\1\u056e\32\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u056f\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\7\36\1\u0570\23\36\23\0"+
    "\2\36\2\0\1\36\10\0\11\36\1\u0571\21\36\23\0"+
    "\2\36\2\0\1\36\10\0\4\36\1\u0572\26\36\23\0"+
    "\2\36\2\0\1\36\10\0\2\36\1\u0573\30\36\23\0"+
    "\2\36\2\0\1\36\10\0\6\36\1\u0574\24\36\23\0"+
    "\2\36\2\0\1\36\10\0\1\u0575\32\36\23\0\2\36"+
    "\2\0\1\36\10\0\1\36\1\u0576\31\36\23\0\2\36"+
    "\2\0\1\36\10\0\4\36\1\u0577\26\36\23\0\2\36"+
    "\2\0\1\36\10\0\7\36\1\u0578\23\36\23\0\2\36"+
    "\2\0\1\36\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[65431];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\36\1\1\11\5\1\3\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\4\1\1\0"+
    "\1\1\1\0\1\11\167\1\11\11\1\1\1\0\1\11"+
    "\1\0\1\1\2\0\1\11\304\1\1\0\1\11\117\1"+
    "\1\0\217\1\1\0\106\1\1\0\262\1\1\0\217\1"+
    "\1\0\111\1\1\0\50\1\1\11\63\1\1\0\101\1"+
    "\1\0\57\1\1\0\40\1\1\0\22\1\1\11\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1400];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int line;
    public int column;
    public int length;

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext(); line = (yyline + 1); column = (yycolumn + 1); length = yylength(); 
                                                                    System.out.print("Lexical error: invalid token ") ;
            } 
            // fall through
          case 353: break;
          case 2: 
            { return symbol(sym.OP_DIVISION, new String(yytext()));
            } 
            // fall through
          case 354: break;
          case 3: 
            { return symbol(sym.OP_MULTIPLICACION, new String(yytext()));
            } 
            // fall through
          case 355: break;
          case 4: 
            { /*lleva la cuenta de lineas*/
            } 
            // fall through
          case 356: break;
          case 5: 
            { return symbol(sym.OP_RESTA, new String(yytext()));
            } 
            // fall through
          case 357: break;
          case 6: 
            { /*se ignoran los espacios y tabuladores*/
            } 
            // fall through
          case 358: break;
          case 7: 
            { if(yylength() > 31)
                                                                    {
                                                                        String aux = yytext().substring(0,31);
                                                                        
                                                                        //return "IDENTIFIER: " + aux + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1) + " exceeded the max limit length. Identifier truncated.";                                                                       
                                                                        return symbol(sym.IDENTIFICADOR, new String(aux));
                                                                    }
                                                                    else 
                                                                    {
                                                                        //return "IDENTIFIER: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                        return symbol(sym.IDENTIFICADOR, new String("IDENTIFIER: " + yytext()));
                                                                    }
            } 
            // fall through
          case 359: break;
          case 8: 
            { return symbol(sym.OP_SUMA, new String(yytext()));
            } 
            // fall through
          case 360: break;
          case 9: 
            { return symbol(sym.OP_PORCENTAJE, new String(yytext()));
            } 
            // fall through
          case 361: break;
          case 10: 
            { return symbol(sym.OP_MENOR, new String(yytext()));
            } 
            // fall through
          case 362: break;
          case 11: 
            { return symbol(sym.OP_ASIGNAR, new String(yytext()));
            } 
            // fall through
          case 363: break;
          case 12: 
            { return symbol(sym.OP_MAYOR, new String(yytext()));
            } 
            // fall through
          case 364: break;
          case 13: 
            { return symbol(sym.OP_NEGACION, new String(yytext()));
            } 
            // fall through
          case 365: break;
          case 14: 
            { return symbol(sym.OP_PUNTOYCOMA, new String(yytext()));
            } 
            // fall through
          case 366: break;
          case 15: 
            { return symbol(sym.OP_COMA, new String(yytext()));
            } 
            // fall through
          case 367: break;
          case 16: 
            { return symbol(sym.OP_PUNTO, new String(yytext()));
            } 
            // fall through
          case 368: break;
          case 17: 
            { return symbol(sym.OP_CORCHETE_IZQ, new String(yytext()));
            } 
            // fall through
          case 369: break;
          case 18: 
            { return symbol(sym.OP_CORCHETE_DER, new String(yytext()));
            } 
            // fall through
          case 370: break;
          case 19: 
            { return symbol(sym.OP_PARENTESIS_IZQ, new String(yytext()));
            } 
            // fall through
          case 371: break;
          case 20: 
            { return symbol(sym.OP_PARENTESIS_DER, new String(yytext()));
            } 
            // fall through
          case 372: break;
          case 21: 
            { return symbol(sym.OP_LLAVE_IZQ, new String(yytext()));
            } 
            // fall through
          case 373: break;
          case 22: 
            { return symbol(sym.OP_LLAVE_DER, new String(yytext()));
            } 
            // fall through
          case 374: break;
          case 23: 
            { return symbol(sym.OP_ARROBA, new String(yytext()));
            } 
            // fall through
          case 375: break;
          case 24: 
            { return symbol(sym.OP_NUMERAL, new String(yytext()));
            } 
            // fall through
          case 376: break;
          case 25: 
            { return symbol(sym.INTCONSTANT, new Integer(yytext()));
            } 
            // fall through
          case 377: break;
          case 26: 
            { /*se ignoran los comentarios de linea*/
            } 
            // fall through
          case 378: break;
          case 27: 
            { return symbol(sym.OP_OR, new String(yytext()));
            } 
            // fall through
          case 379: break;
          case 28: 
            { return symbol(sym.AS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 380: break;
          case 29: 
            { return symbol(sym.AT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 381: break;
          case 30: 
            { return symbol(sym.BY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 382: break;
          case 31: 
            { return symbol(sym.ON, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 383: break;
          case 32: 
            { return symbol(sym.OR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 384: break;
          case 33: 
            { return symbol(sym.OF, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 385: break;
          case 34: 
            { return symbol(sym.TO, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 386: break;
          case 35: 
            { return symbol(sym.IS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 387: break;
          case 36: 
            { return symbol(sym.IN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 388: break;
          case 37: 
            { return symbol(sym.IF, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 389: break;
          case 38: 
            { return symbol(sym.NO, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 390: break;
          case 39: 
            { return symbol(sym.GO, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 391: break;
          case 40: 
            { return symbol(sym.OP_MENORIGUAL, new String(yytext()));
            } 
            // fall through
          case 392: break;
          case 41: 
            { return symbol(sym.OP_IGUAL, new String(yytext()));
            } 
            // fall through
          case 393: break;
          case 42: 
            { return symbol(sym.OP_MAYORIGUAL, new String(yytext()));
            } 
            // fall through
          case 394: break;
          case 43: 
            { return symbol(sym.OP_DIFERENTE, new String(yytext()));
            } 
            // fall through
          case 395: break;
          case 44: 
            { return symbol(sym.OP_AND, new String(yytext()));
            } 
            // fall through
          case 396: break;
          case 45: 
            { return symbol(sym.OP_CORCHETES, new String(yytext()));
            } 
            // fall through
          case 397: break;
          case 46: 
            { return symbol(sym.OP_PARENTESIS, new String(yytext()));
            } 
            // fall through
          case 398: break;
          case 47: 
            { return symbol(sym.OP_LLAVES, new String(yytext()));
            } 
            // fall through
          case 399: break;
          case 48: 
            { return symbol(sym.OP_DOBLE_NUMERAL, new String(yytext()));
            } 
            // fall through
          case 400: break;
          case 49: 
            { return symbol(sym.FLOAT, new String(yytext()));
            } 
            // fall through
          case 401: break;
          case 50: 
            { return symbol(sym.STRING, new String(yytext()));
            } 
            // fall through
          case 402: break;
          case 51: 
            { System.out.print("Unfinished comment " + yytext() + " found in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1));
            } 
            // fall through
          case 403: break;
          case 52: 
            { return symbol(sym.ASC, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 404: break;
          case 53: 
            { return symbol(sym.ALL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 405: break;
          case 54: 
            { return symbol(sym.AND, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 406: break;
          case 55: 
            { return symbol(sym.ANY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 407: break;
          case 56: 
            { return symbol(sym.ADA, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 408: break;
          case 57: 
            { return symbol(sym.ADD, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 409: break;
          case 58: 
            { return symbol(sym.ARE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 410: break;
          case 59: 
            { return symbol(sym.AVG, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 411: break;
          case 60: 
            { return symbol(sym.BIT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 412: break;
          case 61: 
            { return symbol(sym.SUM, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 413: break;
          case 62: 
            { return symbol(sym.SET, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 414: break;
          case 63: 
            { return symbol(sym.SQL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 415: break;
          case 64: 
            { return symbol(sym.OFF, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 416: break;
          case 65: 
            { return symbol(sym.USE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 417: break;
          case 66: 
            { return symbol(sym.TOP, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 418: break;
          case 67: 
            { return symbol(sym.END, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 419: break;
          case 68: 
            { return symbol(sym.INT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 420: break;
          case 69: 
            { return symbol(sym.NOT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 421: break;
          case 70: 
            { return symbol(sym.DAY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 422: break;
          case 71: 
            { return symbol(sym.DEC, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 423: break;
          case 72: 
            { return symbol(sym.GET, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 424: break;
          case 73: 
            { return symbol(sym.KEY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 425: break;
          case 74: 
            { return symbol(sym.PAD, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 426: break;
          case 75: 
            { return symbol(sym.MAX, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 427: break;
          case 76: 
            { return symbol(sym.MIN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 428: break;
          case 77: 
            { return symbol(sym.FOR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 429: break;
          case 78: 
            { /*se ignoran los comentarios de bloque*/
            } 
            // fall through
          case 430: break;
          case 79: 
            { return symbol(sym.BOTH, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 431: break;
          case 80: 
            { return symbol(sym.BULK, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 432: break;
          case 81: 
            { return symbol(sym.SAVE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 433: break;
          case 82: 
            { return symbol(sym.SOME, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 434: break;
          case 83: 
            { return symbol(sym.SIZE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 435: break;
          case 84: 
            { return symbol(sym.ONLY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 436: break;
          case 85: 
            { return symbol(sym.OVER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 437: break;
          case 86: 
            { return symbol(sym.OPEN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 438: break;
          case 87: 
            { return symbol(sym.LAST, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 439: break;
          case 88: 
            { return symbol(sym.LOAD, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 440: break;
          case 89: 
            { return symbol(sym.LEFT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 441: break;
          case 90: 
            { return symbol(sym.LIKE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 442: break;
          case 91: 
            { return symbol(sym.USER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 443: break;
          case 92: 
            { return symbol(sym.TIME, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 444: break;
          case 93: 
            { return symbol(sym.TRAN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 445: break;
          case 94: 
            { return symbol(sym.TRUE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 446: break;
          case 95: 
            { return symbol(sym.TRIM, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 447: break;
          case 96: 
            { return symbol(sym.THEN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 448: break;
          case 97: 
            { return symbol(sym.ELSE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 449: break;
          case 98: 
            { return symbol(sym.EXEC, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 450: break;
          case 99: 
            { return symbol(sym.EXIT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 451: break;
          case 100: 
            { return symbol(sym.CAST, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 452: break;
          case 101: 
            { return symbol(sym.CASE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 453: break;
          case 102: 
            { return symbol(sym.CHAR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 454: break;
          case 103: 
            { return symbol(sym.INTO, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 455: break;
          case 104: 
            { return symbol(sym.NONE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 456: break;
          case 105: 
            { return symbol(sym.NULL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 457: break;
          case 106: 
            { return symbol(sym.NEXT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 458: break;
          case 107: 
            { return symbol(sym.DATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 459: break;
          case 108: 
            { return symbol(sym.DBCC, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 460: break;
          case 109: 
            { return symbol(sym.DUMP, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 461: break;
          case 110: 
            { return symbol(sym.DESC, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 462: break;
          case 111: 
            { return symbol(sym.DENY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 463: break;
          case 112: 
            { return symbol(sym.DISK, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 464: break;
          case 113: 
            { return symbol(sym.DROP, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 465: break;
          case 114: 
            { return symbol(sym.ROWS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 466: break;
          case 115: 
            { return symbol(sym.RULE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 467: break;
          case 116: 
            { return symbol(sym.REAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 468: break;
          case 117: 
            { return symbol(sym.READ, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 469: break;
          case 118: 
            { return symbol(sym.YEAR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 470: break;
          case 119: 
            { return symbol(sym.HOUR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 471: break;
          case 120: 
            { return symbol(sym.ZONE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 472: break;
          case 121: 
            { return symbol(sym.VIEW, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 473: break;
          case 122: 
            { return symbol(sym.GOTO, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 474: break;
          case 123: 
            { return symbol(sym.KILL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 475: break;
          case 124: 
            { return symbol(sym.PLAN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 476: break;
          case 125: 
            { return symbol(sym.PROC, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 477: break;
          case 126: 
            { return symbol(sym.WORK, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 478: break;
          case 127: 
            { return symbol(sym.WITH, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 479: break;
          case 128: 
            { return symbol(sym.WHEN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 480: break;
          case 129: 
            { return symbol(sym.FULL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 481: break;
          case 130: 
            { return symbol(sym.FILE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 482: break;
          case 131: 
            { return symbol(sym.FROM, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 483: break;
          case 132: 
            { return symbol(sym.JOIN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 484: break;
          case 133: 
            { return symbol(sym.ALTER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 485: break;
          case 134: 
            { return symbol(sym.BEGIN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 486: break;
          case 135: 
            { return symbol(sym.BREAK, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 487: break;
          case 136: 
            { return symbol(sym.SPACE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 488: break;
          case 137: 
            { return symbol(sym.SQLCA, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 489: break;
          case 138: 
            { return symbol(sym.OUTER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 490: break;
          case 139: 
            { return symbol(sym.ORDER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 491: break;
          case 140: 
            { return symbol(sym.LOCAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 492: break;
          case 141: 
            { return symbol(sym.LOWER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 493: break;
          case 142: 
            { return symbol(sym.LEVEL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 494: break;
          case 143: 
            { return symbol(sym.USAGE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 495: break;
          case 144: 
            { return symbol(sym.USING, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 496: break;
          case 145: 
            { return symbol(sym.UNION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 497: break;
          case 146: 
            { return symbol(sym.UPPER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 498: break;
          case 147: 
            { return symbol(sym.TABLE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 499: break;
          case 148: 
            { return symbol(sym.COUNT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 500: break;
          case 149: 
            { return symbol(sym.CLOSE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 501: break;
          case 150: 
            { return symbol(sym.CROSS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 502: break;
          case 151: 
            { return symbol(sym.CHECK, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 503: break;
          case 152: 
            { return symbol(sym.INNER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 504: break;
          case 153: 
            { return symbol(sym.INDEX, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 505: break;
          case 154: 
            { return symbol(sym.INPUT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 506: break;
          case 155: 
            { return symbol(sym.NAMES, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 507: break;
          case 156: 
            { return symbol(sym.NCHAR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 508: break;
          case 157: 
            { return symbol(sym.RIGHT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 509: break;
          case 158: 
            { return symbol(sym.VALUE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 510: break;
          case 159: 
            { return symbol(sym.GRANT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 511: break;
          case 160: 
            { return symbol(sym.GROUP, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 512: break;
          case 161: 
            { return symbol(sym.PIVOT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 513: break;
          case 162: 
            { return symbol(sym.PRIOR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 514: break;
          case 163: 
            { return symbol(sym.PRINT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 515: break;
          case 164: 
            { return symbol(sym.WRITE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 516: break;
          case 165: 
            { return symbol(sym.WHERE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 517: break;
          case 166: 
            { return symbol(sym.WHILE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 518: break;
          case 167: 
            { return symbol(sym.MATCH, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 519: break;
          case 168: 
            { return symbol(sym.MONTH, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 520: break;
          case 169: 
            { return symbol(sym.MERGE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 521: break;
          case 170: 
            { return symbol(sym.FALSE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 522: break;
          case 171: 
            { return symbol(sym.FOUND, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 523: break;
          case 172: 
            { return symbol(sym.FLOAT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 524: break;
          case 173: 
            { return symbol(sym.FETCH, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 525: break;
          case 174: 
            { return symbol(sym.FIRST, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 526: break;
          case 175: 
            { return symbol(sym.ACTION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 527: break;
          case 176: 
            { return symbol(sym.BACKUP, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 528: break;
          case 177: 
            { return symbol(sym.BROWSE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 529: break;
          case 178: 
            { return symbol(sym.SELECT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 530: break;
          case 179: 
            { return symbol(sym.SECOND, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 531: break;
          case 180: 
            { return symbol(sym.SCROLL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 532: break;
          case 181: 
            { return symbol(sym.SCHEMA, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 533: break;
          case 182: 
            { return symbol(sym.OUTPUT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 534: break;
          case 183: 
            { return symbol(sym.OPTION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 535: break;
          case 184: 
            { return symbol(sym.LINENO, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 536: break;
          case 185: 
            { return symbol(sym.UNIQUE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 537: break;
          case 186: 
            { return symbol(sym.UPDATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 538: break;
          case 187: 
            { return symbol(sym.ESCAPE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 539: break;
          case 188: 
            { return symbol(sym.ERRLVL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 540: break;
          case 189: 
            { return symbol(sym.EXCEPT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 541: break;
          case 190: 
            { return symbol(sym.EXISTS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 542: break;
          case 191: 
            { return symbol(sym.COLUMN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 543: break;
          case 192: 
            { return symbol(sym.COMMIT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 544: break;
          case 193: 
            { return symbol(sym.CURSOR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 545: break;
          case 194: 
            { return symbol(sym.CREATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 546: break;
          case 195: 
            { return symbol(sym.INSERT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 547: break;
          case 196: 
            { return symbol(sym.NULLIF, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 548: break;
          case 197: 
            { return symbol(sym.DOUBLE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 549: break;
          case 198: 
            { return symbol(sym.DOMAIN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 550: break;
          case 199: 
            { return symbol(sym.DELETE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 551: break;
          case 200: 
            { return symbol(sym.RETURN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 552: break;
          case 201: 
            { return symbol(sym.REVOKE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 553: break;
          case 202: 
            { return symbol(sym.REVERT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 554: break;
          case 203: 
            { return symbol(sym.HAVING, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 555: break;
          case 204: 
            { return symbol(sym.VALUES, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 556: break;
          case 205: 
            { return symbol(sym.GLOBAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 557: break;
          case 206: 
            { return symbol(sym.PASCAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 558: break;
          case 207: 
            { return symbol(sym.PUBLIC, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 559: break;
          case 208: 
            { return symbol(sym.MODULE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 560: break;
          case 209: 
            { return symbol(sym.MINUTE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 561: break;
          case 210: 
            { return symbol(sym.BETWEEN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 562: break;
          case 211: 
            { return symbol(sym.SESSION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 563: break;
          case 212: 
            { return symbol(sym.SETUSER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 564: break;
          case 213: 
            { return symbol(sym.SECTION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 565: break;
          case 214: 
            { return symbol(sym.SQLCODE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 566: break;
          case 215: 
            { return symbol(sym.OPENXML, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 567: break;
          case 216: 
            { return symbol(sym.OFFSETS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 568: break;
          case 217: 
            { return symbol(sym.LEADING, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 569: break;
          case 218: 
            { return symbol(sym.UNKNOWN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 570: break;
          case 219: 
            { return symbol(sym.UNPIVOT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 571: break;
          case 220: 
            { return symbol(sym.TSEQUAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 572: break;
          case 221: 
            { return symbol(sym.TRIGGER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 573: break;
          case 222: 
            { return symbol(sym.EXTRACT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 574: break;
          case 223: 
            { return symbol(sym.EXECUTE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 575: break;
          case 224: 
            { return symbol(sym.CASCADE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 576: break;
          case 225: 
            { return symbol(sym.CATALOG, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 577: break;
          case 226: 
            { return symbol(sym.COLLATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 578: break;
          case 227: 
            { return symbol(sym.CONNECT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 579: break;
          case 228: 
            { return symbol(sym.CONVERT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 580: break;
          case 229: 
            { return symbol(sym.COMPUTE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 581: break;
          case 230: 
            { return symbol(sym.CURRENT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 582: break;
          case 231: 
            { return symbol(sym.INTEGER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 583: break;
          case 232: 
            { return symbol(sym.INCLUDE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 584: break;
          case 233: 
            { return symbol(sym.NATURAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 585: break;
          case 234: 
            { return symbol(sym.NOCHECK, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 586: break;
          case 235: 
            { return symbol(sym.NUMERIC, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 587: break;
          case 236: 
            { return symbol(sym.DECLARE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 588: break;
          case 237: 
            { return symbol(sym.DECIMAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 589: break;
          case 238: 
            { return symbol(sym.DEFAULT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 590: break;
          case 239: 
            { return symbol(sym.RESTORE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 591: break;
          case 240: 
            { return symbol(sym.VARCHAR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 592: break;
          case 241: 
            { return symbol(sym.VARYING, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 593: break;
          case 242: 
            { return symbol(sym.PARTIAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 594: break;
          case 243: 
            { return symbol(sym.PERCENT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 595: break;
          case 244: 
            { return symbol(sym.PREPARE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 596: break;
          case 245: 
            { return symbol(sym.PRIMARY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 597: break;
          case 246: 
            { return symbol(sym.WAITFOR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 598: break;
          case 247: 
            { return symbol(sym.FORTRAN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 599: break;
          case 248: 
            { return symbol(sym.FOREIGN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 600: break;
          case 249: 
            { return symbol(sym.ABSOLUTE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 601: break;
          case 250: 
            { return symbol(sym.ALLOCATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 602: break;
          case 251: 
            { return symbol(sym.SHUTDOWN, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 603: break;
          case 252: 
            { return symbol(sym.SMALLINT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 604: break;
          case 253: 
            { return symbol(sym.SQLSTATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 605: break;
          case 254: 
            { return symbol(sym.SQLERROR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 606: break;
          case 255: 
            { return symbol(sym.OVERLAPS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 607: break;
          case 256: 
            { return symbol(sym.LANGUAGE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 608: break;
          case 257: 
            { return symbol(sym.TEXTSIZE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 609: break;
          case 258: 
            { return symbol(sym.TRAILING, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 610: break;
          case 259: 
            { return symbol(sym.TRUNCATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 611: break;
          case 260: 
            { return symbol(sym.END_EXEC, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 612: break;
          case 261: 
            { return symbol(sym.EXTERNAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 613: break;
          case 262: 
            { return symbol(sym.CASCADED, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 614: break;
          case 263: 
            { return symbol(sym.COALESCE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 615: break;
          case 264: 
            { return symbol(sym.CONTAINS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 616: break;
          case 265: 
            { return symbol(sym.CONTINUE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 617: break;
          case 266: 
            { return symbol(sym.INTERVAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 618: break;
          case 267: 
            { return symbol(sym.IDENTITY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 619: break;
          case 268: 
            { return symbol(sym.NATIONAL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 620: break;
          case 269: 
            { return symbol(sym.DATABASE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 621: break;
          case 270: 
            { return symbol(sym.DESCRIBE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 622: break;
          case 271: 
            { return symbol(sym.DEFERRED, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 623: break;
          case 272: 
            { return symbol(sym.DISTINCT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 624: break;
          case 273: 
            { return symbol(sym.ROLLBACK, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 625: break;
          case 274: 
            { return symbol(sym.ROWCOUNT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 626: break;
          case 275: 
            { return symbol(sym.READTEXT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 627: break;
          case 276: 
            { return symbol(sym.RESTRICT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 628: break;
          case 277: 
            { return symbol(sym.RELATIVE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 629: break;
          case 278: 
            { return symbol(sym.HOLDLOCK, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 630: break;
          case 279: 
            { return symbol(sym.POSITION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 631: break;
          case 280: 
            { return symbol(sym.PRESERVE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 632: break;
          case 281: 
            { return symbol(sym.WHENEVER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 633: break;
          case 282: 
            { return symbol(sym.FUNCTION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 634: break;
          case 283: 
            { return symbol(sym.FREETEXT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 635: break;
          case 284: 
            { return symbol(sym.ASSERTION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 636: break;
          case 285: 
            { return symbol(sym.SUBSTRING, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 637: break;
          case 286: 
            { return symbol(sym.OPENQUERY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 638: break;
          case 287: 
            { return symbol(sym.TEMPORARY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 639: break;
          case 288: 
            { return symbol(sym.TIMESTAMP, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 640: break;
          case 289: 
            { return symbol(sym.TRANSLATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 641: break;
          case 290: 
            { return symbol(sym.EXCEPTION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 642: break;
          case 291: 
            { return symbol(sym.COLLATION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 643: break;
          case 292: 
            { return symbol(sym.CLUSTERED, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 644: break;
          case 293: 
            { return symbol(sym.CHARACTER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 645: break;
          case 294: 
            { return symbol(sym.ISOLATION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 646: break;
          case 295: 
            { return symbol(sym.INTERSECT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 647: break;
          case 296: 
            { return symbol(sym.INITIALLY, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 648: break;
          case 297: 
            { return symbol(sym.INDICATOR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 649: break;
          case 298: 
            { return symbol(sym.IMMEDIATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 650: break;
          case 299: 
            { return symbol(sym.RAISERROR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 651: break;
          case 300: 
            { return symbol(sym.PROCEDURE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 652: break;
          case 301: 
            { return symbol(sym.PRECISION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 653: break;
          case 302: 
            { return symbol(sym.WRITETEXT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 654: break;
          case 303: 
            { return symbol(sym.BIT_LENGTH, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 655: break;
          case 304: 
            { return symbol(sym.STATISTICS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 656: break;
          case 305: 
            { return symbol(sym.SQLWARNING, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 657: break;
          case 306: 
            { return symbol(sym.OPENROWSET, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 658: break;
          case 307: 
            { return symbol(sym.UPDATETEXT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 659: break;
          case 308: 
            { return symbol(sym.CONSTRAINT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 660: break;
          case 309: 
            { return symbol(sym.CONNECTION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 661: break;
          case 310: 
            { return symbol(sym.CHECKPOINT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 662: break;
          case 311: 
            { return symbol(sym.DEALLOCATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 663: break;
          case 312: 
            { return symbol(sym.DESCRIPTOR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 664: break;
          case 313: 
            { return symbol(sym.DEFERRABLE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 665: break;
          case 314: 
            { return symbol(sym.DISCONNECT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 666: break;
          case 315: 
            { return symbol(sym.ROWGUIDCOL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 667: break;
          case 316: 
            { return symbol(sym.REFERENCES, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 668: break;
          case 317: 
            { return symbol(sym.PRIVILEGES, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 669: break;
          case 318: 
            { return symbol(sym.FILLFACTOR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 670: break;
          case 319: 
            { return symbol(sym.SYSTEM_USER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 671: break;
          case 320: 
            { return symbol(sym.TABLESAMPLE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 672: break;
          case 321: 
            { return symbol(sym.TRANSACTION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 673: break;
          case 322: 
            { return symbol(sym.TRANSLATION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 674: break;
          case 323: 
            { return symbol(sym.TRY_CONVERT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 675: break;
          case 324: 
            { return symbol(sym.CONSTRAINTS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 676: break;
          case 325: 
            { return symbol(sym.CHAR_LENGTH, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 677: break;
          case 326: 
            { return symbol(sym.INSENSITIVE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 678: break;
          case 327: 
            { return symbol(sym.IDENTITYCOL, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 679: break;
          case 328: 
            { return symbol(sym.DIAGNOSTICS, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 680: break;
          case 329: 
            { return symbol(sym.DISTRIBUTED, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 681: break;
          case 330: 
            { return symbol(sym.RECONFIGURE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 682: break;
          case 331: 
            { return symbol(sym.REPLICATION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 683: break;
          case 332: 
            { return symbol(sym.SESSION_USER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 684: break;
          case 333: 
            { return symbol(sym.OCTET_LENGTH, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 685: break;
          case 334: 
            { return symbol(sym.CURRENT_USER, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 686: break;
          case 335: 
            { return symbol(sym.CURRENT_TIME, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 687: break;
          case 336: 
            { return symbol(sym.CURRENT_DATE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 688: break;
          case 337: 
            { return symbol(sym.NONCLUSTERED, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 689: break;
          case 338: 
            { return symbol(sym.WITHIN_GROUP, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 690: break;
          case 339: 
            { return symbol(sym.AUTHORIZATION, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 691: break;
          case 340: 
            { return symbol(sym.SECURITYAUDIT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 692: break;
          case 341: 
            { return symbol(sym.TIMEZONE_HOUR, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 693: break;
          case 342: 
            { return symbol(sym.CONTAINSTABLE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 694: break;
          case 343: 
            { return symbol(sym.CORRESPONDING, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 695: break;
          case 344: 
            { return symbol(sym.FREETEXTTABLE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 696: break;
          case 345: 
            { return symbol(sym.OPENDATASOURCE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 697: break;
          case 346: 
            { return symbol(sym.TIMEZONE_MINUTE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 698: break;
          case 347: 
            { return symbol(sym.IDENTITY_INSERT, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 699: break;
          case 348: 
            { return symbol(sym.CHARACTER_LENGTH, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 700: break;
          case 349: 
            { return symbol(sym.CURRENT_TIMESTAMP, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 701: break;
          case 350: 
            { return symbol(sym.SEMANTICKEYPHRASETABLE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 702: break;
          case 351: 
            { return symbol(sym.SEMANTICSIMILARITYTABLE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 703: break;
          case 352: 
            { return symbol(sym.SEMANTICSIMILARITYDETAILSTABLE, new String("RESERVED WORD: " + yytext()));
            } 
            // fall through
          case 704: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
