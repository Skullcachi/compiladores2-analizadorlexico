/* The following code was generated by JFlex 1.7.0 */

package analizadorlexico;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/cachi/OneDrive/Documents/NetBeansProjects/AnalizadorLexico/src/analizadorlexico/Yylex.flex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\62\1\65\1\65\1\4\22\0\1\41\1\44\1\0"+
    "\1\56\1\0\1\43\1\46\1\63\1\52\1\53\1\2\1\42\1\43"+
    "\1\3\1\47\1\1\12\57\1\0\1\43\1\44\1\45\1\44\1\0"+
    "\1\43\1\6\1\7\1\16\1\21\1\15\1\35\1\27\1\24\1\17"+
    "\1\37\1\30\1\12\1\34\1\20\1\11\1\31\1\40\1\22\1\10"+
    "\1\14\1\13\1\26\1\32\1\36\1\23\1\25\1\50\1\0\1\51"+
    "\1\0\1\33\1\0\4\60\1\64\25\60\1\54\1\5\1\55\7\0"+
    "\1\65\32\0\1\65\23\0\1\61\u15cb\0\1\65\u097f\0\13\65\35\0"+
    "\1\65\1\65\5\0\1\65\57\0\1\65\u0fa0\0\1\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\1\31\4\1\5\2\2"+
    "\1\1\4\2\1\6\2\1\1\0\1\7\1\0\1\4"+
    "\1\10\2\4\1\10\31\4\2\10\2\4\1\10\11\4"+
    "\1\10\17\4\2\10\3\4\1\10\25\4\1\10\35\4"+
    "\1\11\1\0\1\12\1\0\1\13\1\0\1\7\2\4"+
    "\1\10\7\4\1\10\6\4\1\10\10\4\1\10\4\4"+
    "\1\10\7\4\1\10\20\4\1\10\25\4\1\10\24\4"+
    "\1\10\50\4\1\10\1\4\1\10\6\4\2\0\1\14"+
    "\27\4\2\10\11\4\1\10\1\4\1\10\3\4\1\0"+
    "\26\4\1\10\16\4\1\10\3\4\1\10\13\4\1\10"+
    "\15\4\1\10\5\4\1\10\1\4\1\10\4\4\1\0"+
    "\1\11\1\0\25\4\1\10\6\4\1\0\16\4\1\10"+
    "\35\4\1\10\32\4\1\0\1\10\34\4\1\10\10\4"+
    "\1\0\1\10\4\4\1\10\10\4\1\0\10\4\1\10"+
    "\1\4\1\10\3\4\1\10\2\4\1\0\11\4\1\0"+
    "\10\4\1\0\7\4\1\0\2\4\1\10\21\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\330\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce"+
    "\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\u09ea\0\u05b2\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368"+
    "\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518"+
    "\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28"+
    "\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u083a\0\66\0\u0870\0\u21f6"+
    "\0\u222c\0\66\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370"+
    "\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520"+
    "\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0"+
    "\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a\0\u2880"+
    "\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa\0\u2a30"+
    "\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u2be0"+
    "\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90"+
    "\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40"+
    "\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0"+
    "\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u32a0"+
    "\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450"+
    "\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600"+
    "\0\u3636\0\u125a\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a"+
    "\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a"+
    "\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u2a9c\0\u3a6e\0\u3aa4"+
    "\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54"+
    "\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04"+
    "\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4"+
    "\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u4164"+
    "\0\u419a\0\66\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de"+
    "\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458\0\u448e"+
    "\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608\0\u463e"+
    "\0\u4674\0\u46aa\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee"+
    "\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc\0\u4932\0\u4968\0\u499e"+
    "\0\u49d4\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2\0\u4b18\0\u4b4e"+
    "\0\u4b84\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92\0\u4cc8\0\u4cfe"+
    "\0\u4d34\0\u4d6a\0\u3f7e\0\u4da0\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78"+
    "\0\u4eae\0\u4ee4\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u5028"+
    "\0\u505e\0\u5094\0\u50ca\0\u5100\0\u5136\0\u516c\0\u51a2\0\u51d8"+
    "\0\u520e\0\u5244\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u5352\0\u5388"+
    "\0\u53be\0\u53f4\0\u542a\0\u5460\0\u5496\0\u54cc\0\u5502\0\u5538"+
    "\0\u556e\0\u55a4\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2\0\u56e8"+
    "\0\u571e\0\u5754\0\u578a\0\u57c0\0\u57f6\0\u582c\0\u5862\0\u5898"+
    "\0\u58ce\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5a12\0\u5a48"+
    "\0\u5a7e\0\u5ab4\0\u5aea\0\u5b20\0\u5b20\0\u5b56\0\u5b8c\0\u5bc2"+
    "\0\u5bf8\0\u5c2e\0\u5c64\0\u5c9a\0\u5cd0\0\u5d06\0\u5d3c\0\u5d72"+
    "\0\u5da8\0\u5dde\0\u5e14\0\u247e\0\u5e4a\0\u5e80\0\u5eb6\0\u5eec"+
    "\0\u5f22\0\u5f58\0\u5f8e\0\u5fc4\0\u5ffa\0\u6030\0\u6066\0\u609c"+
    "\0\u60d2\0\u6108\0\u613e\0\u6174\0\u61aa\0\u61e0\0\u6216\0\u624c"+
    "\0\u6282\0\u62b8\0\u62ee\0\u6324\0\u635a\0\u6390\0\u63c6\0\u63fc"+
    "\0\u6432\0\u6468\0\u649e\0\u64d4\0\u650a\0\u6540\0\u6576\0\u65ac"+
    "\0\u65e2\0\u6618\0\u664e\0\u6684\0\u22ce\0\u66ba\0\u66f0\0\u6726"+
    "\0\u675c\0\u6792\0\u67c8\0\u67fe\0\u6834\0\u686a\0\u68a0\0\u68d6"+
    "\0\u690c\0\u6942\0\u6978\0\u69ae\0\u69e4\0\u6a1a\0\u6a50\0\u4e78"+
    "\0\u6a86\0\u6abc\0\u6af2\0\u6b28\0\u6b5e\0\u6b94\0\u6bca\0\u6c00"+
    "\0\u6c36\0\u6c6c\0\u6ca2\0\u6cd8\0\u6d0e\0\u6d44\0\u6d7a\0\u6db0"+
    "\0\u6de6\0\u6e1c\0\u6e52\0\u6e88\0\u6ebe\0\u6ef4\0\u6f2a\0\u6f60"+
    "\0\u6f96\0\u6fcc\0\u7002\0\u2370\0\u7038\0\u706e\0\u70a4\0\u70da"+
    "\0\u7110\0\u7146\0\u717c\0\u71b2\0\u71e8\0\u721e\0\u7254\0\u728a"+
    "\0\u72c0\0\u72f6\0\u732c\0\u7362\0\u7398\0\u73ce\0\u7404\0\u743a"+
    "\0\u7470\0\u74a6\0\u74dc\0\u7512\0\u7548\0\u757e\0\u75b4\0\u75ea"+
    "\0\u6de6\0\u7620\0\u7656\0\u25f8\0\u768c\0\u76c2\0\u76f8\0\u772e"+
    "\0\u7764\0\u779a\0\u2958\0\u77d0\0\u7806\0\u783c\0\u7872\0\u78a8"+
    "\0\u78de\0\u0f66\0\u7914\0\u794a\0\u7980\0\u79b6\0\u79ec\0\u7a22"+
    "\0\u7a58\0\u7a8e\0\u7ac4\0\u7afa\0\u7b30\0\u7b66\0\u7b9c\0\u7bd2"+
    "\0\u7c08\0\66\0\u7c3e\0\u7c74\0\u7caa\0\u7ce0\0\u7d16\0\u7d4c"+
    "\0\u7d82\0\u7db8\0\u7dee\0\u7e24\0\u7e5a\0\u7e90\0\u7ec6\0\u7efc"+
    "\0\u7f32\0\u7f68\0\u7f9e\0\u7fd4\0\u800a\0\u8040\0\u8076\0\u80ac"+
    "\0\u80e2\0\u8118\0\u814e\0\u8184\0\u81ba\0\u81f0\0\u8226\0\u825c"+
    "\0\u8292\0\u82c8\0\u82fe\0\u8334\0\u836a\0\u83a0\0\u83d6\0\u840c"+
    "\0\u8442\0\u8478\0\u84ae\0\u84e4\0\u851a\0\u8550\0\u8586\0\u85bc"+
    "\0\u85f2\0\u8628\0\u7c74\0\u865e\0\u8694\0\u86ca\0\u8700\0\u8736"+
    "\0\u876c\0\u87a2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\35\1\40"+
    "\1\35\1\41\1\42\1\4\2\43\1\44\1\4\1\45"+
    "\1\4\1\46\1\4\1\47\1\4\1\50\1\51\1\35"+
    "\1\52\1\41\1\53\1\35\1\6\70\0\1\54\66\0"+
    "\1\55\53\0\1\56\12\0\1\6\34\0\1\6\20\0"+
    "\1\6\2\0\1\6\5\0\1\4\66\0\1\35\1\57"+
    "\1\60\1\35\1\61\1\62\1\63\1\35\1\64\1\35"+
    "\1\65\1\66\1\67\3\35\1\70\12\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\71\2\35\1\72\1\35\1\73"+
    "\1\35\1\74\1\35\1\75\2\35\1\76\1\63\15\35"+
    "\16\0\2\35\3\0\1\35\7\0\1\77\2\35\1\100"+
    "\1\35\1\101\1\102\1\103\1\104\1\105\3\35\1\106"+
    "\1\107\4\35\1\110\2\35\1\111\3\35\1\112\16\0"+
    "\2\35\3\0\1\35\7\0\5\35\1\113\2\35\1\114"+
    "\1\35\1\115\1\35\1\116\3\35\1\117\2\35\1\120"+
    "\3\35\1\121\3\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\122\2\35\1\123\3\35\1\124\1\35\1\125\21\35"+
    "\16\0\2\35\3\0\1\35\7\0\2\35\1\126\7\35"+
    "\1\127\10\35\1\130\7\35\16\0\2\35\3\0\1\35"+
    "\7\0\1\131\1\35\1\132\1\133\3\35\1\134\1\35"+
    "\1\135\2\35\1\136\1\35\1\137\14\35\16\0\2\35"+
    "\3\0\1\35\7\0\2\35\1\140\1\35\1\141\5\35"+
    "\1\142\1\35\1\143\13\35\1\144\2\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\145\2\35\1\146\1\147\1\150"+
    "\6\35\1\151\1\35\1\152\14\35\16\0\2\35\3\0"+
    "\1\35\7\0\2\35\1\153\7\35\1\154\1\155\12\35"+
    "\1\156\1\63\3\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\157\2\35\1\160\1\35\1\161\1\35\1\162\1\163"+
    "\22\35\16\0\2\35\3\0\1\35\7\0\1\164\1\165"+
    "\1\35\1\166\1\35\1\167\1\35\1\170\1\35\1\171"+
    "\2\35\1\172\16\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\173\2\35\1\174\1\35\1\175\1\35\1\176\1\35"+
    "\1\177\21\35\16\0\2\35\3\0\1\35\7\0\7\35"+
    "\1\200\23\35\16\0\2\35\3\0\1\35\7\0\1\201"+
    "\2\35\1\202\27\35\16\0\2\35\3\0\1\35\7\0"+
    "\3\35\1\203\27\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\204\10\35\1\205\21\35\16\0\2\35\3\0\1\35"+
    "\7\0\3\35\1\206\1\207\2\35\1\210\4\35\1\211"+
    "\16\35\16\0\2\35\3\0\1\35\7\0\7\35\1\212"+
    "\1\35\1\213\21\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\214\2\35\1\215\1\216\1\217\1\35\1\220\1\35"+
    "\1\221\2\35\1\222\16\35\16\0\2\35\3\0\1\35"+
    "\7\0\1\223\2\35\1\224\5\35\1\225\2\35\1\226"+
    "\1\35\1\227\14\35\16\0\2\35\3\0\1\35\7\0"+
    "\33\35\16\0\2\35\3\0\1\35\7\0\1\230\2\35"+
    "\1\231\3\35\1\232\1\35\1\233\21\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\234\2\35\1\235\1\236\1\237"+
    "\1\35\1\240\1\35\1\241\2\35\1\242\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\3\35\1\243\27\35\16\0"+
    "\2\35\3\0\1\35\60\0\1\56\53\0\1\4\66\0"+
    "\1\4\70\0\1\4\67\0\1\4\67\0\1\4\66\0"+
    "\1\4\56\0\1\244\7\0\1\51\6\0\61\245\1\246"+
    "\1\0\3\245\62\247\1\0\1\246\2\247\2\250\1\251"+
    "\63\250\4\55\1\252\55\55\1\252\3\55\47\0\1\244"+
    "\7\0\1\56\14\0\2\35\1\253\30\35\16\0\2\35"+
    "\3\0\1\35\7\0\2\35\1\254\5\35\1\63\22\35"+
    "\16\0\2\35\3\0\1\35\7\0\4\35\1\255\1\35"+
    "\1\256\24\35\16\0\2\35\3\0\1\35\7\0\6\35"+
    "\1\257\24\35\16\0\2\35\3\0\1\35\7\0\6\35"+
    "\1\260\24\35\16\0\2\35\3\0\1\35\7\0\13\35"+
    "\1\63\1\35\1\63\15\35\16\0\2\35\3\0\1\35"+
    "\7\0\1\63\12\35\1\63\17\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\63\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\21\35\1\63\11\35\16\0\2\35\3\0"+
    "\1\35\7\0\10\35\1\261\22\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\262\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\4\35\1\263\26\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\264\12\35\1\243\11\35\16\0"+
    "\2\35\3\0\1\35\7\0\6\35\1\265\24\35\16\0"+
    "\2\35\3\0\1\35\7\0\3\35\1\266\3\35\1\267"+
    "\23\35\16\0\2\35\3\0\1\35\7\0\20\35\1\67"+
    "\12\35\16\0\2\35\3\0\1\35\7\0\26\35\1\67"+
    "\4\35\16\0\2\35\3\0\1\35\7\0\1\35\1\270"+
    "\24\35\1\63\4\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\271\32\35\16\0\2\35\3\0\1\35\7\0\2\35"+
    "\1\272\1\35\1\273\1\35\1\274\1\35\1\275\15\35"+
    "\1\276\4\35\16\0\2\35\3\0\1\35\7\0\14\35"+
    "\1\277\1\35\1\300\14\35\16\0\2\35\3\0\1\35"+
    "\7\0\17\35\1\67\13\35\16\0\2\35\3\0\1\35"+
    "\7\0\2\35\1\301\30\35\16\0\2\35\3\0\1\35"+
    "\7\0\5\35\1\302\25\35\16\0\2\35\3\0\1\35"+
    "\7\0\1\303\32\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\304\32\35\16\0\2\35\3\0\1\35\7\0\4\35"+
    "\1\305\26\35\16\0\2\35\3\0\1\35\7\0\6\35"+
    "\1\306\24\35\16\0\2\35\3\0\1\35\7\0\6\35"+
    "\1\307\24\35\16\0\2\35\3\0\1\35\7\0\4\35"+
    "\1\212\26\35\16\0\2\35\3\0\1\35\7\0\13\35"+
    "\1\256\17\35\16\0\2\35\3\0\1\35\7\0\7\35"+
    "\1\310\23\35\16\0\2\35\3\0\1\35\7\0\6\35"+
    "\1\260\1\311\23\35\16\0\2\35\3\0\1\35\7\0"+
    "\27\35\1\312\3\35\16\0\2\35\3\0\1\35\7\0"+
    "\2\35\1\210\7\35\1\313\20\35\16\0\2\35\3\0"+
    "\1\35\7\0\1\314\7\35\1\315\13\35\1\256\6\35"+
    "\16\0\2\35\3\0\1\35\7\0\1\316\17\35\1\317"+
    "\6\35\1\210\3\35\16\0\2\35\3\0\1\35\7\0"+
    "\12\35\1\320\7\35\1\67\10\35\16\0\2\35\3\0"+
    "\1\35\7\0\1\321\6\35\1\322\1\35\1\323\21\35"+
    "\16\0\2\35\3\0\1\35\7\0\11\35\1\324\10\35"+
    "\1\325\1\326\7\35\16\0\2\35\3\0\1\35\7\0"+
    "\13\35\1\327\7\35\1\256\7\35\16\0\2\35\3\0"+
    "\1\35\7\0\1\35\1\330\31\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\331\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\23\35\1\63\7\35\16\0\2\35\3\0"+
    "\1\35\7\0\26\35\1\332\1\35\1\333\2\35\16\0"+
    "\2\35\3\0\1\35\7\0\26\35\1\334\4\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\335\4\35\1\336\3\35"+
    "\1\337\3\35\1\340\15\35\16\0\2\35\3\0\1\35"+
    "\7\0\7\35\1\341\23\35\16\0\2\35\3\0\1\35"+
    "\7\0\10\35\1\342\22\35\16\0\2\35\3\0\1\35"+
    "\7\0\2\35\1\67\30\35\16\0\2\35\3\0\1\35"+
    "\7\0\13\35\1\343\17\35\16\0\2\35\3\0\1\35"+
    "\7\0\14\35\1\344\16\35\16\0\2\35\3\0\1\35"+
    "\7\0\6\35\1\345\1\346\1\347\1\350\21\35\16\0"+
    "\2\35\3\0\1\35\7\0\2\35\1\351\3\35\1\352"+
    "\24\35\16\0\2\35\3\0\1\35\7\0\1\353\3\35"+
    "\1\354\1\355\4\35\1\356\1\35\1\357\11\35\1\360"+
    "\4\35\16\0\2\35\3\0\1\35\7\0\3\35\1\141"+
    "\1\35\1\361\25\35\16\0\2\35\3\0\1\35\7\0"+
    "\14\35\1\362\16\35\16\0\2\35\3\0\1\35\7\0"+
    "\3\35\1\363\3\35\1\364\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\1\365\6\35\1\366\23\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\367\27\35\16\0\2\35"+
    "\3\0\1\35\7\0\2\35\1\370\3\35\1\371\1\35"+
    "\1\372\1\373\1\256\1\374\7\35\1\375\7\35\16\0"+
    "\2\35\3\0\1\35\7\0\7\35\1\376\23\35\16\0"+
    "\2\35\3\0\1\35\7\0\26\35\1\377\4\35\16\0"+
    "\2\35\3\0\1\35\7\0\6\35\1\u0100\17\35\1\u0101"+
    "\4\35\16\0\2\35\3\0\1\35\7\0\6\35\1\63"+
    "\1\35\1\u0102\1\35\1\u0103\20\35\16\0\2\35\3\0"+
    "\1\35\7\0\4\35\1\u0104\21\35\1\u0105\4\35\16\0"+
    "\2\35\3\0\1\35\7\0\30\35\1\210\2\35\16\0"+
    "\2\35\3\0\1\35\7\0\16\35\1\200\14\35\16\0"+
    "\2\35\3\0\1\35\7\0\6\35\1\u0106\6\35\1\63"+
    "\15\35\16\0\2\35\3\0\1\35\7\0\10\35\1\u0107"+
    "\22\35\16\0\2\35\3\0\1\35\7\0\5\35\1\u0108"+
    "\20\35\1\u0109\4\35\16\0\2\35\3\0\1\35\7\0"+
    "\26\35\1\u010a\4\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\u010b\1\35\1\u010c\1\35\1\u010d\3\35\1\u010e\1\35"+
    "\1\212\14\35\1\u010f\3\35\16\0\2\35\3\0\1\35"+
    "\7\0\1\u0110\1\35\1\u0111\30\35\16\0\2\35\3\0"+
    "\1\35\7\0\3\35\1\u010a\27\35\16\0\2\35\3\0"+
    "\1\35\7\0\11\35\1\u0112\21\35\16\0\2\35\3\0"+
    "\1\35\7\0\4\35\1\u0113\17\35\1\u0114\6\35\16\0"+
    "\2\35\3\0\1\35\7\0\4\35\1\67\26\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\u0115\1\35\1\u0116\1\35"+
    "\1\u0117\1\35\1\u0118\1\35\1\u0119\7\35\1\u011a\2\35"+
    "\1\u011b\3\35\1\u011c\3\35\16\0\2\35\3\0\1\35"+
    "\7\0\21\35\1\u011d\11\35\16\0\2\35\3\0\1\35"+
    "\7\0\1\u011e\32\35\16\0\2\35\3\0\1\35\7\0"+
    "\20\35\1\u011f\12\35\16\0\2\35\3\0\1\35\7\0"+
    "\4\35\1\u0120\1\u011e\25\35\16\0\2\35\3\0\1\35"+
    "\7\0\12\35\1\67\20\35\16\0\2\35\3\0\1\35"+
    "\7\0\4\35\1\u0121\7\35\1\u0122\16\35\16\0\2\35"+
    "\3\0\1\35\7\0\7\35\1\u0123\23\35\16\0\2\35"+
    "\3\0\1\35\7\0\6\35\1\u0124\24\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\u0125\27\35\16\0\2\35"+
    "\3\0\1\35\7\0\6\35\1\63\24\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\355\2\35\1\u0126\27\35\16\0"+
    "\2\35\3\0\1\35\7\0\15\35\1\63\15\35\16\0"+
    "\2\35\3\0\1\35\7\0\4\35\1\u0127\26\35\16\0"+
    "\2\35\3\0\1\35\7\0\2\35\1\u0128\10\35\1\63"+
    "\1\u0129\16\35\16\0\2\35\3\0\1\35\7\0\2\35"+
    "\1\u012a\30\35\16\0\2\35\3\0\1\35\7\0\1\341"+
    "\32\35\16\0\2\35\3\0\1\35\7\0\1\35\1\u012b"+
    "\31\35\16\0\2\35\3\0\1\35\7\0\14\35\1\u012c"+
    "\16\35\16\0\2\35\3\0\1\35\7\0\20\35\1\u012d"+
    "\12\35\16\0\2\35\3\0\1\35\7\0\3\35\1\u012e"+
    "\3\35\1\u012f\1\35\1\u0130\21\35\16\0\2\35\3\0"+
    "\1\35\7\0\11\35\1\u0131\21\35\16\0\2\35\3\0"+
    "\1\35\7\0\14\35\1\263\16\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\u0132\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\11\35\1\u0133\21\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u0134\1\35\1\175\21\35\16\0"+
    "\2\35\3\0\1\35\7\0\6\35\1\u0135\21\35\1\63"+
    "\2\35\16\0\2\35\3\0\1\35\7\0\12\35\1\72"+
    "\1\u0136\17\35\16\0\2\35\3\0\1\35\7\0\14\35"+
    "\1\321\16\35\16\0\2\35\3\0\1\35\7\0\12\35"+
    "\1\u0137\20\35\16\0\2\35\3\0\1\35\7\0\4\35"+
    "\1\141\26\35\16\0\2\35\3\0\1\35\7\0\5\35"+
    "\1\u0138\6\35\1\u0139\16\35\16\0\2\35\3\0\1\35"+
    "\7\0\3\35\1\u013a\27\35\16\0\2\35\3\0\1\35"+
    "\7\0\4\35\1\u0127\5\35\1\u013b\20\35\16\0\2\35"+
    "\3\0\1\35\7\0\6\35\1\u0135\24\35\16\0\2\35"+
    "\3\0\1\35\7\0\4\35\1\u013c\7\35\1\u013d\16\35"+
    "\16\0\2\35\3\0\1\35\7\0\3\35\1\u013e\3\35"+
    "\1\u013f\23\35\16\0\2\35\3\0\1\35\7\0\11\35"+
    "\1\341\21\35\16\0\2\35\3\0\1\35\16\0\1\u0140"+
    "\41\0\1\244\4\0\1\u0140\1\0\2\250\1\u0141\63\250"+
    "\1\0\1\u0142\1\251\71\0\3\35\1\u0143\27\35\16\0"+
    "\2\35\3\0\1\35\7\0\7\35\1\u0144\23\35\16\0"+
    "\2\35\3\0\1\35\7\0\3\35\1\u0145\27\35\16\0"+
    "\2\35\3\0\1\35\7\0\7\35\1\u011e\23\35\16\0"+
    "\2\35\3\0\1\35\7\0\16\35\1\u0146\14\35\16\0"+
    "\2\35\3\0\1\35\7\0\11\35\1\u0147\21\35\16\0"+
    "\2\35\3\0\1\35\7\0\22\35\1\u0126\10\35\16\0"+
    "\2\35\3\0\1\35\7\0\16\35\1\63\14\35\16\0"+
    "\2\35\3\0\1\35\7\0\22\35\1\63\10\35\16\0"+
    "\2\35\3\0\1\35\7\0\24\35\1\u0148\6\35\16\0"+
    "\2\35\3\0\1\35\7\0\25\35\1\u0149\5\35\16\0"+
    "\2\35\3\0\1\35\7\0\24\35\1\141\6\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\263\32\35\16\0\2\35"+
    "\3\0\1\35\7\0\2\35\1\u014a\30\35\16\0\2\35"+
    "\3\0\1\35\7\0\6\35\1\u014b\24\35\16\0\2\35"+
    "\3\0\1\35\7\0\2\35\1\u014c\30\35\16\0\2\35"+
    "\3\0\1\35\7\0\7\35\1\u014d\23\35\16\0\2\35"+
    "\3\0\1\35\7\0\5\35\1\u014e\25\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\u0138\1\35\1\u014f\1\260"+
    "\24\35\16\0\2\35\3\0\1\35\7\0\1\u0150\32\35"+
    "\16\0\2\35\3\0\1\35\7\0\3\35\1\213\27\35"+
    "\16\0\2\35\3\0\1\35\7\0\7\35\1\u0151\23\35"+
    "\16\0\2\35\3\0\1\35\7\0\6\35\1\u0152\24\35"+
    "\16\0\2\35\3\0\1\35\7\0\6\35\1\u0153\24\35"+
    "\16\0\2\35\3\0\1\35\7\0\10\35\1\67\22\35"+
    "\16\0\2\35\3\0\1\35\7\0\4\35\1\u0154\26\35"+
    "\16\0\2\35\3\0\1\35\7\0\2\35\1\u0155\4\35"+
    "\1\u0156\1\u0157\13\35\1\u0158\6\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u011e\13\35\1\375\7\35\16\0"+
    "\2\35\3\0\1\35\7\0\7\35\1\u0159\23\35\16\0"+
    "\2\35\3\0\1\35\7\0\14\35\1\u015a\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\12\35\1\u015b\20\35\16\0"+
    "\2\35\3\0\1\35\7\0\2\35\1\u015c\30\35\16\0"+
    "\2\35\3\0\1\35\7\0\21\35\1\u015d\11\35\16\0"+
    "\2\35\3\0\1\35\7\0\13\35\1\63\17\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\u0127\32\35\16\0\2\35"+
    "\3\0\1\35\7\0\13\35\1\u011f\17\35\16\0\2\35"+
    "\3\0\1\35\7\0\7\35\1\u0127\23\35\16\0\2\35"+
    "\3\0\1\35\7\0\7\35\1\u015e\23\35\16\0\2\35"+
    "\3\0\1\35\7\0\21\35\1\67\11\35\16\0\2\35"+
    "\3\0\1\35\7\0\14\35\1\63\16\35\16\0\2\35"+
    "\3\0\1\35\7\0\12\35\1\70\20\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\341\26\35\1\u015f\16\0"+
    "\2\35\3\0\1\35\7\0\12\35\1\u0160\20\35\16\0"+
    "\2\35\3\0\1\35\7\0\11\35\1\221\21\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\u0133\32\35\16\0\2\35"+
    "\3\0\1\35\7\0\4\35\1\u0161\26\35\16\0\2\35"+
    "\3\0\1\35\7\0\32\35\1\u0162\16\0\2\35\3\0"+
    "\1\35\7\0\23\35\1\u0163\7\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\u0164\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u0165\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\11\35\1\u0166\1\u0167\20\35\16\0\2\35"+
    "\3\0\1\35\7\0\7\35\1\63\2\35\1\u0145\20\35"+
    "\16\0\2\35\3\0\1\35\7\0\21\35\1\u0168\4\35"+
    "\1\63\4\35\16\0\2\35\3\0\1\35\7\0\25\35"+
    "\1\u0169\5\35\16\0\2\35\3\0\1\35\7\0\12\35"+
    "\1\63\20\35\16\0\2\35\3\0\1\35\7\0\1\u016a"+
    "\32\35\16\0\2\35\3\0\1\35\4\0\1\u016b\2\0"+
    "\33\35\16\0\2\35\3\0\1\35\7\0\4\35\1\u016c"+
    "\26\35\16\0\2\35\3\0\1\35\7\0\7\35\1\u016d"+
    "\4\35\1\u016e\16\35\16\0\2\35\3\0\1\35\7\0"+
    "\10\35\1\u0137\22\35\16\0\2\35\3\0\1\35\7\0"+
    "\7\35\1\u016f\23\35\16\0\2\35\3\0\1\35\7\0"+
    "\2\35\1\u0170\3\35\1\63\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\2\63\1\u0171\22\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\u0172\32\35\16\0\2\35\3\0"+
    "\1\35\7\0\4\35\1\u0173\26\35\16\0\2\35\3\0"+
    "\1\35\7\0\4\35\1\u0174\1\u0175\25\35\16\0\2\35"+
    "\3\0\1\35\7\0\12\35\1\210\20\35\16\0\2\35"+
    "\3\0\1\35\7\0\2\35\1\u0176\3\35\1\u0177\3\35"+
    "\1\u0178\5\35\1\u0179\12\35\16\0\2\35\3\0\1\35"+
    "\7\0\14\35\1\u017a\16\35\16\0\2\35\3\0\1\35"+
    "\7\0\23\35\1\u017b\2\35\1\u017c\4\35\16\0\2\35"+
    "\3\0\1\35\7\0\2\35\1\u017d\30\35\16\0\2\35"+
    "\3\0\1\35\7\0\2\35\1\u017e\11\35\1\u017f\16\35"+
    "\16\0\2\35\3\0\1\35\7\0\2\35\1\u0180\30\35"+
    "\16\0\2\35\3\0\1\35\7\0\1\u0181\32\35\16\0"+
    "\2\35\3\0\1\35\7\0\14\35\1\u0182\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\10\35\1\u0183\22\35\16\0"+
    "\2\35\3\0\1\35\7\0\4\35\1\u0184\26\35\16\0"+
    "\2\35\3\0\1\35\7\0\7\35\1\u0185\23\35\16\0"+
    "\2\35\3\0\1\35\7\0\3\35\1\63\3\35\1\u0186"+
    "\23\35\16\0\2\35\3\0\1\35\7\0\4\35\1\u0187"+
    "\26\35\16\0\2\35\3\0\1\35\7\0\6\35\1\u0188"+
    "\24\35\16\0\2\35\3\0\1\35\7\0\7\35\1\u0189"+
    "\1\35\1\u018a\21\35\16\0\2\35\3\0\1\35\7\0"+
    "\5\35\1\210\25\35\16\0\2\35\3\0\1\35\7\0"+
    "\12\35\1\u018b\20\35\16\0\2\35\3\0\1\35\7\0"+
    "\7\35\1\u018c\23\35\16\0\2\35\3\0\1\35\7\0"+
    "\5\35\1\u018d\3\35\1\u018e\21\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u0180\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\16\35\1\u018f\14\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\63\1\u0190\22\35\16\0\2\35"+
    "\3\0\1\35\7\0\4\35\1\u0191\26\35\16\0\2\35"+
    "\3\0\1\35\7\0\7\35\1\u0192\23\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\u0193\6\35\1\63\23\35\16\0"+
    "\2\35\3\0\1\35\7\0\10\35\1\63\22\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\35\1\175\31\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\243\32\35\16\0\2\35"+
    "\3\0\1\35\7\0\4\35\1\u0194\26\35\16\0\2\35"+
    "\3\0\1\35\7\0\10\35\1\u0195\22\35\16\0\2\35"+
    "\3\0\1\35\7\0\7\35\1\u0181\23\35\16\0\2\35"+
    "\3\0\1\35\7\0\4\35\1\u0196\4\35\1\u0197\21\35"+
    "\16\0\2\35\3\0\1\35\7\0\1\u0198\6\35\1\u0199"+
    "\23\35\16\0\2\35\3\0\1\35\7\0\21\35\1\u019a"+
    "\11\35\16\0\2\35\3\0\1\35\7\0\6\35\1\u019b"+
    "\1\35\1\u019c\11\35\1\63\10\35\16\0\2\35\3\0"+
    "\1\35\7\0\2\35\1\u019d\30\35\16\0\2\35\3\0"+
    "\1\35\7\0\4\35\1\u019e\26\35\16\0\2\35\3\0"+
    "\1\35\7\0\2\35\1\63\5\35\1\u019f\10\35\1\u01a0"+
    "\11\35\16\0\2\35\3\0\1\35\7\0\4\35\1\63"+
    "\6\35\1\u01a1\17\35\16\0\2\35\3\0\1\35\7\0"+
    "\6\35\1\u01a2\24\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\u01a3\32\35\16\0\2\35\3\0\1\35\7\0\5\35"+
    "\1\u01a4\25\35\16\0\2\35\3\0\1\35\7\0\3\35"+
    "\1\u01a5\27\35\16\0\2\35\3\0\1\35\7\0\3\35"+
    "\1\u01a6\3\35\1\u01a7\23\35\16\0\2\35\3\0\1\35"+
    "\7\0\4\35\1\u01a8\26\35\16\0\2\35\3\0\1\35"+
    "\7\0\7\35\1\u01a9\23\35\16\0\2\35\3\0\1\35"+
    "\7\0\16\35\1\210\14\35\16\0\2\35\3\0\1\35"+
    "\7\0\11\35\1\323\21\35\16\0\2\35\3\0\1\35"+
    "\7\0\13\35\1\u01aa\17\35\16\0\2\35\3\0\1\35"+
    "\7\0\5\35\1\u01ab\25\35\16\0\2\35\3\0\1\35"+
    "\7\0\10\35\1\163\4\35\1\u011f\15\35\16\0\2\35"+
    "\3\0\1\35\7\0\24\35\1\63\6\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\63\27\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\35\1\315\31\35\16\0\2\35"+
    "\3\0\1\35\7\0\5\35\1\u010a\25\35\16\0\2\35"+
    "\3\0\1\35\7\0\4\35\1\63\26\35\16\0\2\35"+
    "\3\0\1\35\7\0\10\35\1\315\22\35\16\0\2\35"+
    "\3\0\1\35\7\0\6\35\1\u01ac\24\35\16\0\2\35"+
    "\3\0\1\35\7\0\11\35\1\64\21\35\16\0\2\35"+
    "\3\0\1\35\7\0\4\35\1\u01ad\26\35\16\0\2\35"+
    "\3\0\1\35\7\0\10\35\1\u01ae\22\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\210\27\35\16\0\2\35"+
    "\3\0\1\35\7\0\10\35\1\u01af\22\35\16\0\2\35"+
    "\3\0\1\35\7\0\2\35\1\u01b0\5\35\1\u01b1\12\35"+
    "\1\u0196\7\35\16\0\2\35\3\0\1\35\7\0\3\35"+
    "\1\u011e\6\35\1\210\5\35\1\u01b2\5\35\1\u01b3\4\35"+
    "\16\0\2\35\3\0\1\35\7\0\6\35\1\u01b4\24\35"+
    "\16\0\2\35\3\0\1\35\7\0\16\35\1\u01b5\14\35"+
    "\16\0\2\35\3\0\1\35\7\0\6\35\1\u01b6\24\35"+
    "\16\0\2\35\3\0\1\35\7\0\12\35\1\u01b7\1\35"+
    "\1\67\16\35\16\0\2\35\3\0\1\35\7\0\10\35"+
    "\1\262\22\35\16\0\2\35\3\0\1\35\7\0\5\35"+
    "\1\175\25\35\16\0\2\35\3\0\1\35\7\0\5\35"+
    "\1\u0181\25\35\16\0\2\35\3\0\1\35\7\0\12\35"+
    "\1\314\20\35\16\0\2\35\3\0\1\35\7\0\6\35"+
    "\1\u01b8\1\u01b9\23\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\210\32\35\16\0\2\35\3\0\1\35\7\0\10\35"+
    "\1\64\22\35\16\0\2\35\3\0\1\35\7\0\4\35"+
    "\1\u01ba\2\35\1\63\23\35\16\0\2\35\3\0\1\35"+
    "\7\0\2\35\1\210\30\35\16\0\2\35\3\0\1\35"+
    "\7\0\26\35\1\63\4\35\16\0\2\35\3\0\1\35"+
    "\7\0\7\35\1\u01bb\23\35\16\0\2\35\3\0\1\35"+
    "\4\0\1\u01bc\36\0\1\u01bc\14\0\1\u01bd\6\0\1\u01be"+
    "\1\u0142\1\u0141\63\u01be\6\0\4\35\1\u017b\26\35\16\0"+
    "\2\35\3\0\1\35\7\0\14\35\1\64\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\10\35\1\364\22\35\16\0"+
    "\2\35\3\0\1\35\7\0\3\35\1\u01bf\27\35\16\0"+
    "\2\35\3\0\1\35\7\0\3\35\1\341\27\35\16\0"+
    "\2\35\3\0\1\35\7\0\7\35\1\137\23\35\16\0"+
    "\2\35\3\0\1\35\7\0\4\35\1\u01c0\26\35\16\0"+
    "\2\35\3\0\1\35\7\0\6\35\1\u01c1\24\35\16\0"+
    "\2\35\3\0\1\35\7\0\11\35\1\u01c2\21\35\16\0"+
    "\2\35\3\0\1\35\7\0\11\35\1\u01c3\21\35\16\0"+
    "\2\35\3\0\1\35\7\0\10\35\1\210\22\35\16\0"+
    "\2\35\3\0\1\35\7\0\2\35\1\256\30\35\16\0"+
    "\2\35\3\0\1\35\7\0\14\35\1\u01c4\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\12\35\1\u01c5\20\35\16\0"+
    "\2\35\3\0\1\35\7\0\26\35\1\u01c6\4\35\16\0"+
    "\2\35\3\0\1\35\7\0\7\35\1\u01c7\23\35\16\0"+
    "\2\35\3\0\1\35\7\0\13\35\1\u0160\17\35\16\0"+
    "\2\35\3\0\1\35\7\0\4\35\1\u01c8\26\35\16\0"+
    "\2\35\3\0\1\35\7\0\6\35\1\364\24\35\16\0"+
    "\2\35\3\0\1\35\7\0\14\35\1\u01c9\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\63\2\35\1\u01ca\27\35"+
    "\16\0\2\35\3\0\1\35\7\0\1\u01cb\32\35\16\0"+
    "\2\35\3\0\1\35\7\0\6\35\1\u01cc\24\35\16\0"+
    "\2\35\3\0\1\35\7\0\4\35\1\u01cd\26\35\16\0"+
    "\2\35\3\0\1\35\7\0\13\35\1\u01ce\1\u01cf\13\35"+
    "\1\u01d0\1\35\1\u01d1\16\0\2\35\3\0\1\35\7\0"+
    "\7\35\1\u0170\23\35\16\0\2\35\3\0\1\35\7\0"+
    "\5\35\1\u01d2\25\35\16\0\2\35\3\0\1\35\7\0"+
    "\12\35\1\u0124\20\35\16\0\2\35\3\0\1\35\7\0"+
    "\5\35\1\67\25\35\16\0\2\35\3\0\1\35\7\0"+
    "\3\35\1\u01d3\27\35\16\0\2\35\3\0\1\35\7\0"+
    "\7\35\1\u01d4\23\35\16\0\2\35\3\0\1\35\7\0"+
    "\5\35\1\315\25\35\16\0\2\35\3\0\1\35\7\0"+
    "\3\35\1\u01d5\27\35\16\0\2\35\3\0\1\35\7\0"+
    "\2\35\1\u01d6\30\35\16\0\2\35\3\0\1\35\7\0"+
    "\2\35\1\u01d7\14\35\1\u01d8\13\35\16\0\2\35\3\0"+
    "\1\35\7\0\4\35\1\u011f\26\35\16\0\2\35\3\0"+
    "\1\35\7\0\2\35\1\u01d9\30\35\16\0\2\35\3\0"+
    "\1\35\7\0\21\35\1\256\11\35\16\0\2\35\3\0"+
    "\1\35\7\0\10\35\1\u01da\22\35\16\0\2\35\3\0"+
    "\1\35\7\0\23\35\1\67\7\35\16\0\2\35\3\0"+
    "\1\35\16\0\1\u01db\56\0\20\35\1\u0127\12\35\16\0"+
    "\2\35\3\0\1\35\7\0\14\35\1\u01dc\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\u014d\32\35\16\0\2\35"+
    "\3\0\1\35\7\0\23\35\1\u01dd\7\35\16\0\2\35"+
    "\3\0\1\35\7\0\6\35\1\u0180\24\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\u01de\32\35\16\0\2\35\3\0"+
    "\1\35\7\0\4\35\1\u01df\26\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u01e0\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\1\u01e1\32\35\16\0\2\35\3\0\1\35"+
    "\7\0\26\35\1\341\4\35\16\0\2\35\3\0\1\35"+
    "\7\0\6\35\1\u01e2\24\35\16\0\2\35\3\0\1\35"+
    "\7\0\1\u01e3\10\35\1\u01e4\21\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u01e5\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u01a7\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u01e6\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\11\35\1\210\21\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\u01e7\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\3\35\1\u011e\27\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u01e8\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\2\35\1\63\30\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\67\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\1\u01e9\24\35\1\u0149\5\35\16\0\2\35"+
    "\3\0\1\35\7\0\22\35\1\u01ea\10\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\64\32\35\16\0\2\35\3\0"+
    "\1\35\7\0\12\35\1\u01eb\1\35\1\210\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\14\35\1\u01ec\4\35\1\256"+
    "\11\35\16\0\2\35\3\0\1\35\7\0\5\35\1\u01ca"+
    "\25\35\16\0\2\35\3\0\1\35\7\0\11\35\1\u01ed"+
    "\21\35\16\0\2\35\3\0\1\35\7\0\30\35\1\63"+
    "\2\35\16\0\2\35\3\0\1\35\7\0\10\35\1\u01ee"+
    "\22\35\16\0\2\35\3\0\1\35\7\0\6\35\1\u01ef"+
    "\24\35\16\0\2\35\3\0\1\35\7\0\13\35\1\u01f0"+
    "\17\35\16\0\2\35\3\0\1\35\7\0\14\35\1\315"+
    "\16\35\16\0\2\35\3\0\1\35\7\0\3\35\1\u01dc"+
    "\27\35\16\0\2\35\3\0\1\35\7\0\7\35\1\u01f1"+
    "\23\35\16\0\2\35\3\0\1\35\7\0\4\35\1\u01f2"+
    "\26\35\16\0\2\35\3\0\1\35\7\0\11\35\1\u01f3"+
    "\21\35\16\0\2\35\3\0\1\35\7\0\14\35\1\u01ad"+
    "\16\35\16\0\2\35\3\0\1\35\7\0\1\35\1\u01f4"+
    "\31\35\16\0\2\35\3\0\1\35\7\0\4\35\1\u01f5"+
    "\26\35\16\0\2\35\3\0\1\35\7\0\14\35\1\u01f6"+
    "\16\35\16\0\2\35\3\0\1\35\7\0\1\u01f7\32\35"+
    "\16\0\2\35\3\0\1\35\7\0\26\35\1\315\4\35"+
    "\16\0\2\35\3\0\1\35\7\0\5\35\1\u01f8\25\35"+
    "\16\0\2\35\3\0\1\35\7\0\14\35\1\u01f9\16\35"+
    "\16\0\2\35\3\0\1\35\7\0\12\35\1\u01fa\20\35"+
    "\16\0\2\35\3\0\1\35\7\0\11\35\1\u01fb\2\35"+
    "\1\u01fc\16\35\16\0\2\35\3\0\1\35\7\0\3\35"+
    "\1\u01fd\27\35\16\0\2\35\3\0\1\35\7\0\7\35"+
    "\1\u0156\23\35\16\0\2\35\3\0\1\35\7\0\1\35"+
    "\1\u01fe\31\35\16\0\2\35\3\0\1\35\7\0\3\35"+
    "\1\u01ff\27\35\16\0\2\35\3\0\1\35\7\0\5\35"+
    "\1\u0200\25\35\16\0\2\35\3\0\1\35\7\0\6\35"+
    "\1\u0201\24\35\16\0\2\35\3\0\1\35\7\0\3\35"+
    "\1\u01f7\10\35\1\u0202\16\35\16\0\2\35\3\0\1\35"+
    "\7\0\6\35\1\u0203\24\35\16\0\2\35\3\0\1\35"+
    "\7\0\14\35\1\341\16\35\16\0\2\35\3\0\1\35"+
    "\7\0\12\35\1\u0204\20\35\16\0\2\35\3\0\1\35"+
    "\7\0\22\35\1\67\10\35\16\0\2\35\3\0\1\35"+
    "\7\0\14\35\1\210\16\35\16\0\2\35\3\0\1\35"+
    "\7\0\11\35\1\u0205\21\35\16\0\2\35\3\0\1\35"+
    "\7\0\14\35\1\u0206\16\35\16\0\2\35\3\0\1\35"+
    "\7\0\4\35\1\u0207\26\35\16\0\2\35\3\0\1\35"+
    "\7\0\7\35\1\u0208\23\35\16\0\2\35\3\0\1\35"+
    "\7\0\11\35\1\315\21\35\16\0\2\35\3\0\1\35"+
    "\7\0\11\35\1\u0107\21\35\16\0\2\35\3\0\1\35"+
    "\7\0\7\35\1\355\23\35\16\0\2\35\3\0\1\35"+
    "\7\0\7\35\1\u0209\23\35\16\0\2\35\3\0\1\35"+
    "\7\0\7\35\1\u020a\23\35\16\0\2\35\3\0\1\35"+
    "\7\0\11\35\1\u020b\21\35\16\0\2\35\3\0\1\35"+
    "\7\0\11\35\1\u020c\21\35\16\0\2\35\3\0\1\35"+
    "\7\0\1\u020d\32\35\16\0\2\35\3\0\1\35\7\0"+
    "\27\35\1\u017e\3\35\16\0\2\35\3\0\1\35\7\0"+
    "\11\35\1\u020e\21\35\16\0\2\35\3\0\1\35\7\0"+
    "\7\35\1\u01a1\23\35\16\0\2\35\3\0\1\35\7\0"+
    "\7\35\1\u020f\23\35\16\0\2\35\3\0\1\35\7\0"+
    "\14\35\1\216\16\35\16\0\2\35\3\0\1\35\7\0"+
    "\11\35\1\u0210\21\35\16\0\2\35\3\0\1\35\7\0"+
    "\27\35\1\u0211\3\35\16\0\2\35\3\0\1\35\7\0"+
    "\6\35\1\u0212\24\35\16\0\2\35\3\0\1\35\60\0"+
    "\1\u01bd\6\0\2\u01be\1\u0141\63\u01be\6\0\14\35\1\u0213"+
    "\16\35\16\0\2\35\3\0\1\35\7\0\7\35\1\u0214"+
    "\23\35\16\0\2\35\3\0\1\35\7\0\14\35\1\u011f"+
    "\16\35\16\0\2\35\3\0\1\35\7\0\2\35\1\u0215"+
    "\30\35\16\0\2\35\3\0\1\35\7\0\3\35\1\u0216"+
    "\27\35\16\0\2\35\3\0\1\35\7\0\11\35\1\u0217"+
    "\21\35\16\0\2\35\3\0\1\35\7\0\6\35\1\u0218"+
    "\24\35\16\0\2\35\3\0\1\35\7\0\1\63\32\35"+
    "\16\0\2\35\3\0\1\35\7\0\26\35\1\u0219\4\35"+
    "\16\0\2\35\3\0\1\35\7\0\11\35\1\355\21\35"+
    "\16\0\2\35\3\0\1\35\7\0\14\35\1\u017e\16\35"+
    "\16\0\2\35\3\0\1\35\7\0\13\35\1\67\17\35"+
    "\16\0\2\35\3\0\1\35\7\0\14\35\1\u021a\16\35"+
    "\16\0\2\35\3\0\1\35\7\0\1\u021b\32\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\u021c\32\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\u021d\27\35\16\0\2\35"+
    "\3\0\1\35\7\0\26\35\1\u0127\4\35\16\0\2\35"+
    "\3\0\1\35\7\0\5\35\1\u021e\25\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\321\32\35\16\0\2\35\3\0"+
    "\1\35\7\0\24\35\1\341\6\35\16\0\2\35\3\0"+
    "\1\35\7\0\2\35\1\u021f\30\35\16\0\2\35\3\0"+
    "\1\35\7\0\14\35\1\u01b3\16\35\16\0\2\35\3\0"+
    "\1\35\7\0\11\35\1\105\21\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\u0220\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\3\35\1\u0221\27\35\16\0\2\35\3\0"+
    "\1\35\7\0\1\u013b\3\35\1\u0174\26\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\u0222\27\35\16\0\2\35"+
    "\3\0\1\35\37\0\1\u0223\35\0\12\35\1\315\20\35"+
    "\16\0\2\35\3\0\1\35\7\0\6\35\1\u0224\24\35"+
    "\16\0\2\35\3\0\1\35\7\0\13\35\1\u0225\17\35"+
    "\16\0\2\35\3\0\1\35\7\0\3\35\1\70\27\35"+
    "\16\0\2\35\3\0\1\35\7\0\2\35\1\303\30\35"+
    "\16\0\2\35\3\0\1\35\7\0\6\35\1\u0226\24\35"+
    "\16\0\2\35\3\0\1\35\7\0\14\35\1\u0227\16\35"+
    "\16\0\2\35\3\0\1\35\7\0\11\35\1\u0228\21\35"+
    "\16\0\2\35\3\0\1\35\7\0\12\35\1\u015f\20\35"+
    "\16\0\2\35\3\0\1\35\7\0\10\35\1\u01dd\22\35"+
    "\16\0\2\35\3\0\1\35\7\0\2\35\1\u0229\30\35"+
    "\16\0\2\35\3\0\1\35\7\0\7\35\1\u022a\23\35"+
    "\16\0\2\35\3\0\1\35\7\0\12\35\1\u022b\20\35"+
    "\16\0\2\35\3\0\1\35\7\0\10\35\1\u022c\22\35"+
    "\16\0\2\35\3\0\1\35\7\0\23\35\1\u022d\7\35"+
    "\16\0\2\35\3\0\1\35\7\0\2\35\1\u022e\30\35"+
    "\16\0\2\35\3\0\1\35\7\0\2\35\1\273\15\35"+
    "\1\315\12\35\16\0\2\35\3\0\1\35\7\0\1\u022f"+
    "\32\35\16\0\2\35\3\0\1\35\7\0\1\u0230\32\35"+
    "\16\0\2\35\3\0\1\35\7\0\11\35\1\u0231\21\35"+
    "\16\0\2\35\3\0\1\35\7\0\11\35\1\364\21\35"+
    "\16\0\2\35\3\0\1\35\7\0\10\35\1\263\22\35"+
    "\16\0\2\35\3\0\1\35\7\0\5\35\1\361\25\35"+
    "\16\0\2\35\3\0\1\35\7\0\27\35\1\63\3\35"+
    "\16\0\2\35\3\0\1\35\7\0\1\141\32\35\16\0"+
    "\2\35\3\0\1\35\7\0\11\35\1\u0232\21\35\16\0"+
    "\2\35\3\0\1\35\7\0\14\35\1\67\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\4\35\1\210\26\35\16\0"+
    "\2\35\3\0\1\35\7\0\14\35\1\u0233\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\3\35\1\u01c2\27\35\16\0"+
    "\2\35\3\0\1\35\7\0\12\35\1\u014d\20\35\16\0"+
    "\2\35\3\0\1\35\7\0\11\35\1\u0234\21\35\16\0"+
    "\2\35\3\0\1\35\7\0\12\35\1\u0235\20\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\u01f1\32\35\16\0\2\35"+
    "\3\0\1\35\7\0\5\35\1\355\25\35\16\0\2\35"+
    "\3\0\1\35\7\0\11\35\1\u0236\21\35\16\0\2\35"+
    "\3\0\1\35\7\0\7\35\1\162\23\35\16\0\2\35"+
    "\3\0\1\35\7\0\11\35\1\u014d\21\35\16\0\2\35"+
    "\3\0\1\35\7\0\11\35\1\77\21\35\16\0\2\35"+
    "\3\0\1\35\7\0\27\35\1\u0237\3\35\16\0\2\35"+
    "\3\0\1\35\7\0\10\35\1\u0184\22\35\16\0\2\35"+
    "\3\0\1\35\7\0\7\35\1\u0238\23\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\u01f1\27\35\16\0\2\35"+
    "\3\0\1\35\7\0\13\35\1\u0239\17\35\16\0\2\35"+
    "\3\0\1\35\7\0\14\35\1\77\16\35\16\0\2\35"+
    "\3\0\1\35\7\0\2\35\1\260\30\35\16\0\2\35"+
    "\3\0\1\35\7\0\4\35\1\u023a\26\35\16\0\2\35"+
    "\3\0\1\35\7\0\14\35\1\212\16\35\16\0\2\35"+
    "\3\0\1\35\7\0\12\35\1\u023b\20\35\16\0\2\35"+
    "\3\0\1\35\7\0\20\35\1\256\12\35\16\0\2\35"+
    "\3\0\1\35\7\0\21\35\1\341\11\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\u023c\32\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u023d\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\11\35\1\u023e\21\35\16\0\2\35\3\0"+
    "\1\35\7\0\12\35\1\u023f\20\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\u0240\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\12\35\1\u0241\20\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\u0242\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\11\35\1\u0243\21\35\16\0\2\35\3\0"+
    "\1\35\7\0\25\35\1\u0244\5\35\16\0\2\35\3\0"+
    "\1\35\7\0\12\35\1\u011f\20\35\16\0\2\35\3\0"+
    "\1\35\7\0\23\35\1\u0180\7\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\u0245\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\24\35\1\u0246\6\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\u020d\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\1\u0247\32\35\16\0\2\35\3\0\1\35"+
    "\7\0\1\167\32\35\16\0\2\35\3\0\1\35\7\0"+
    "\12\35\1\u0248\20\35\16\0\2\35\3\0\1\35\7\0"+
    "\12\35\1\u0249\20\35\16\0\2\35\3\0\1\35\16\0"+
    "\1\u024a\56\0\7\35\1\u024b\23\35\16\0\2\35\3\0"+
    "\1\35\7\0\7\35\1\63\1\35\1\u0147\21\35\16\0"+
    "\2\35\3\0\1\35\7\0\1\u024c\32\35\16\0\2\35"+
    "\3\0\1\35\7\0\12\35\1\u024d\20\35\16\0\2\35"+
    "\3\0\1\35\7\0\23\35\1\u024e\7\35\16\0\2\35"+
    "\3\0\1\35\7\0\14\35\1\u024f\16\35\16\0\2\35"+
    "\3\0\1\35\7\0\6\35\1\u0250\24\35\16\0\2\35"+
    "\3\0\1\35\7\0\6\35\1\u0251\24\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\u01c8\27\35\16\0\2\35"+
    "\3\0\1\35\7\0\11\35\1\u01a3\21\35\16\0\2\35"+
    "\3\0\1\35\7\0\4\35\1\u0252\26\35\16\0\2\35"+
    "\3\0\1\35\7\0\6\35\1\u017e\24\35\16\0\2\35"+
    "\3\0\1\35\7\0\6\35\1\u0253\24\35\16\0\2\35"+
    "\3\0\1\35\7\0\1\35\1\67\21\35\1\u0230\7\35"+
    "\16\0\2\35\3\0\1\35\7\0\1\u0108\6\35\1\314"+
    "\23\35\16\0\2\35\3\0\1\35\7\0\1\35\1\u0254"+
    "\31\35\16\0\2\35\3\0\1\35\7\0\12\35\1\273"+
    "\20\35\16\0\2\35\3\0\1\35\7\0\13\35\1\u0255"+
    "\17\35\16\0\2\35\3\0\1\35\7\0\11\35\1\u0256"+
    "\21\35\16\0\2\35\3\0\1\35\7\0\12\35\1\u0257"+
    "\20\35\16\0\2\35\3\0\1\35\7\0\5\35\1\u01f7"+
    "\25\35\16\0\2\35\3\0\1\35\7\0\7\35\1\u0258"+
    "\23\35\16\0\2\35\3\0\1\35\7\0\33\35\1\u0259"+
    "\15\0\2\35\3\0\1\35\7\0\10\35\1\u0230\22\35"+
    "\16\0\2\35\3\0\1\35\7\0\30\35\1\u025a\2\35"+
    "\16\0\2\35\3\0\1\35\7\0\17\35\1\u0184\13\35"+
    "\16\0\2\35\3\0\1\35\7\0\21\35\1\72\11\35"+
    "\16\0\2\35\3\0\1\35\7\0\11\35\1\u025b\21\35"+
    "\16\0\2\35\3\0\1\35\7\0\15\35\1\u025c\15\35"+
    "\16\0\2\35\3\0\1\35\7\0\10\35\1\u025d\22\35"+
    "\16\0\2\35\3\0\1\35\7\0\1\u025e\32\35\16\0"+
    "\2\35\3\0\1\35\7\0\2\35\1\u025f\30\35\16\0"+
    "\2\35\3\0\1\35\7\0\26\35\1\u0260\4\35\16\0"+
    "\2\35\3\0\1\35\7\0\7\35\1\u0261\23\35\16\0"+
    "\2\35\3\0\1\35\7\0\20\35\1\u0179\12\35\16\0"+
    "\2\35\3\0\1\35\17\0\1\u0262\55\0\11\35\1\u0263"+
    "\21\35\16\0\2\35\3\0\1\35\7\0\2\35\1\u0264"+
    "\30\35\16\0\2\35\3\0\1\35\7\0\3\35\1\u0265"+
    "\27\35\16\0\2\35\3\0\1\35\7\0\7\35\1\314"+
    "\23\35\16\0\2\35\3\0\1\35\7\0\25\35\1\u0266"+
    "\5\35\16\0\2\35\3\0\1\35\7\0\7\35\1\u0267"+
    "\23\35\16\0\2\35\3\0\1\35\7\0\15\35\1\u0268"+
    "\15\35\16\0\2\35\3\0\1\35\7\0\5\35\1\u0269"+
    "\25\35\16\0\2\35\3\0\1\35\7\0\10\35\1\u026a"+
    "\22\35\16\0\2\35\3\0\1\35\7\0\21\35\1\u0239"+
    "\11\35\16\0\2\35\3\0\1\35\7\0\10\35\1\u0101"+
    "\22\35\16\0\2\35\3\0\1\35\7\0\21\35\1\u0101"+
    "\11\35\16\0\2\35\3\0\1\35\30\0\1\u026b\44\0"+
    "\6\35\1\u0264\24\35\16\0\2\35\3\0\1\35\7\0"+
    "\10\35\1\u0180\22\35\16\0\2\35\3\0\1\35\7\0"+
    "\1\u026c\32\35\16\0\2\35\3\0\1\35\7\0\2\35"+
    "\1\u026d\17\35\1\u026e\10\35\16\0\2\35\3\0\1\35"+
    "\7\0\2\35\1\u026f\30\35\16\0\2\35\3\0\1\35"+
    "\7\0\7\35\1\210\23\35\16\0\2\35\3\0\1\35"+
    "\7\0\23\35\1\175\7\35\16\0\2\35\3\0\1\35"+
    "\7\0\25\35\1\u0270\5\35\16\0\2\35\3\0\1\35"+
    "\7\0\12\35\1\u0271\20\35\16\0\2\35\3\0\1\35"+
    "\7\0\6\35\1\u0272\24\35\16\0\2\35\3\0\1\35"+
    "\7\0\12\35\1\316\20\35\16\0\2\35\3\0\1\35"+
    "\7\0\5\35\1\u014e\1\u0273\4\35\1\364\17\35\16\0"+
    "\2\35\3\0\1\35\7\0\14\35\1\265\16\35\16\0"+
    "\2\35\3\0\1\35\7\0\10\35\1\u026a\14\35\1\u0274"+
    "\5\35\16\0\2\35\3\0\1\35\7\0\6\35\1\u024f"+
    "\24\35\16\0\2\35\3\0\1\35\7\0\3\35\1\u0127"+
    "\27\35\16\0\2\35\3\0\1\35\23\0\1\u0275\51\0"+
    "\5\35\1\u0276\25\35\16\0\2\35\3\0\1\35\7\0"+
    "\11\35\1\u0277\21\35\16\0\2\35\3\0\1\35\7\0"+
    "\7\35\1\u0278\23\35\16\0\2\35\3\0\1\35\7\0"+
    "\3\35\1\u0279\27\35\16\0\2\35\3\0\1\35\7\0"+
    "\16\35\1\u027a\7\35\1\u027b\4\35\16\0\2\35\3\0"+
    "\1\35\7\0\6\35\1\u0208\24\35\16\0\2\35\3\0"+
    "\1\35\7\0\1\u0108\32\35\16\0\2\35\3\0\1\35"+
    "\7\0\11\35\1\u027c\21\35\16\0\2\35\3\0\1\35"+
    "\7\0\11\35\1\u027d\21\35\16\0\2\35\3\0\1\35"+
    "\12\0\1\u027e\62\0\13\35\1\u017c\17\35\16\0\2\35"+
    "\3\0\1\35\7\0\26\35\1\u027f\4\35\16\0\2\35"+
    "\3\0\1\35\7\0\15\35\1\u0280\15\35\16\0\2\35"+
    "\3\0\1\35\7\0\5\35\1\u0281\25\35\16\0\2\35"+
    "\3\0\1\35\7\0\3\35\1\u0282\27\35\16\0\2\35"+
    "\3\0\1\35\7\0\11\35\1\u0283\21\35\16\0\2\35"+
    "\3\0\1\35\7\0\26\35\1\u0284\4\35\16\0\2\35"+
    "\3\0\1\35\7\0\12\35\1\u0285\20\35\16\0\2\35"+
    "\3\0\1\35\14\0\1\u0286\60\0\11\35\1\u0287\21\35"+
    "\16\0\2\35\3\0\1\35\7\0\23\35\1\u0288\7\35"+
    "\16\0\2\35\3\0\1\35\7\0\14\35\1\303\16\35"+
    "\16\0\2\35\3\0\1\35\7\0\5\35\1\u011e\25\35"+
    "\16\0\2\35\3\0\1\35\7\0\12\35\1\u017b\20\35"+
    "\16\0\2\35\3\0\1\35\7\0\7\35\1\u0289\23\35"+
    "\16\0\2\35\3\0\1\35\7\0\2\35\1\u0179\30\35"+
    "\16\0\2\35\3\0\1\35\32\0\1\u0262\42\0\4\35"+
    "\1\u028a\26\35\16\0\2\35\3\0\1\35\7\0\16\35"+
    "\1\u028b\14\35\16\0\2\35\3\0\1\35\7\0\2\35"+
    "\1\u01d7\30\35\16\0\2\35\3\0\1\35\7\0\1\u028c"+
    "\32\35\16\0\2\35\3\0\1\35\7\0\14\35\1\u028d"+
    "\16\35\16\0\2\35\3\0\1\35\7\0\14\35\1\u028e"+
    "\16\35\16\0\2\35\3\0\1\35\7\0\1\u028f\32\35"+
    "\16\0\2\35\3\0\1\35\7\0\11\35\1\u0290\21\35"+
    "\16\0\2\35\3\0\1\35\7\0\2\35\1\u0291\30\35"+
    "\16\0\2\35\3\0\1\35\7\0\6\35\1\u0292\24\35"+
    "\16\0\2\35\3\0\1\35\7\0\7\35\1\u0293\23\35"+
    "\16\0\2\35\3\0\1\35\7\0\15\35\1\u0294\15\35"+
    "\16\0\2\35\3\0\1\35\7\0\6\35\1\u0272\4\35"+
    "\1\u0295\17\35\16\0\2\35\3\0\1\35\7\0\7\35"+
    "\1\u0296\23\35\16\0\2\35\3\0\1\35\7\0\6\35"+
    "\1\u0297\24\35\16\0\2\35\3\0\1\35\7\0\1\u0298"+
    "\32\35\16\0\2\35\3\0\1\35\7\0\11\35\1\u0299"+
    "\21\35\16\0\2\35\3\0\1\35\7\0\4\35\1\u029a"+
    "\26\35\16\0\2\35\3\0\1\35\7\0\2\35\1\u0293"+
    "\30\35\16\0\2\35\3\0\1\35\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34776];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\47\1\1\0\1\1\1\0"+
    "\166\1\1\0\1\11\1\0\1\1\1\0\1\11\225\1"+
    "\2\0\1\11\50\1\1\0\120\1\1\0\1\1\1\0"+
    "\34\1\1\0\107\1\1\0\46\1\1\0\16\1\1\0"+
    "\10\1\1\11\10\1\1\0\11\1\1\0\10\1\1\0"+
    "\7\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[666];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int line;
    public int column;
    public int length;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 210) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme = yytext(); line = (yyline + 1); column = (yycolumn + 1); length = yylength(); return "Lexical error:";
            } 
            // fall through
          case 13: break;
          case 2: 
            { return "OPERATOR OR PUNTATION MARK: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 14: break;
          case 3: 
            { /*se ignoran los espacios y tabuladores*/
            } 
            // fall through
          case 15: break;
          case 4: 
            { if(yylength() > 31)
                                                                    {
                                                                        String aux = yytext().substring(0,31);
                                                                        
                                                                        return "IDENTIFIER: " + aux + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1) + " exceeded the max limit length. Identifier truncated.";                                                                       
                                                                    }
                                                                    else 
                                                                    {
                                                                        return "IDENTIFIER: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                    }
            } 
            // fall through
          case 16: break;
          case 5: 
            { /*lleva la cuenta de lineas*/
            } 
            // fall through
          case 17: break;
          case 6: 
            { return "INTEGER: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 18: break;
          case 7: 
            { /*se ignoran los comentarios de linea*/
            } 
            // fall through
          case 19: break;
          case 8: 
            { return "RESERVED WORD: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 20: break;
          case 9: 
            { return "FLOAT: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 21: break;
          case 10: 
            { return "STRING: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 22: break;
          case 11: 
            { return "Unfinished comment " + yytext() + " found in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1);
            } 
            // fall through
          case 23: break;
          case 12: 
            { /*se ignoran los comentarios de bloque*/
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
