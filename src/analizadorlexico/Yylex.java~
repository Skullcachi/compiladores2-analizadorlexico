/* The following code was generated by JFlex 1.4.3 on 29/10/19 8:27 PM */

package analizadorlexico;
import java.io.*;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/10/19 8:27 PM from the specification file
 * <tt>../AnalizadorLexico/src/analizadorlexico/Yylex.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\3\2\0\1\5\22\0\1\42\1\50\1\0\1\64\1\0"+
    "\1\44\1\51\1\70\1\57\1\60\1\2\1\43\1\53\1\4\1\54"+
    "\1\1\12\65\1\0\1\52\1\45\1\46\1\47\1\0\1\63\1\7"+
    "\1\10\1\17\1\22\1\16\1\36\1\30\1\25\1\20\1\40\1\31"+
    "\1\13\1\35\1\21\1\12\1\32\1\41\1\23\1\11\1\15\1\14"+
    "\1\27\1\33\1\37\1\24\1\26\1\55\1\0\1\56\1\0\1\34"+
    "\1\0\4\66\1\71\15\66\1\66\7\66\1\61\1\6\1\62\66\0"+
    "\1\67\uff4b\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\31\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\1\1\0\1\31\1\0\1\32"+
    "\1\6\1\33\2\6\1\34\13\6\1\35\16\6\1\36"+
    "\1\37\2\6\1\40\11\6\1\41\17\6\1\42\1\43"+
    "\2\6\1\44\1\6\1\45\25\6\1\46\35\6\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\0\1\61\1\0\1\62\2\0\1\31\2\6"+
    "\1\63\1\64\3\6\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\5\6\1\73\5\6\1\74\3\6\1\75\11\6"+
    "\1\76\7\6\1\77\13\6\1\100\10\6\1\101\12\6"+
    "\1\102\26\6\1\103\11\6\1\104\7\6\1\105\7\6"+
    "\1\106\34\6\1\107\2\6\1\110\2\6\1\111\20\6"+
    "\1\112\3\6\1\113\2\6\1\114\11\6\1\0\1\115"+
    "\7\6\1\116\1\117\5\6\1\120\1\121\13\6\1\122"+
    "\13\6\1\123\1\6\1\124\1\6\1\125\1\6\1\126"+
    "\1\6\1\127\4\6\1\130\1\6\1\131\1\6\1\132"+
    "\13\6\1\133\1\6\1\134\1\135\2\6\1\136\1\6"+
    "\1\137\1\6\1\140\1\0\3\6\1\141\2\6\1\142"+
    "\1\143\1\144\23\6\1\145\3\6\1\146\15\6\1\147"+
    "\1\6\1\150\1\6\1\151\2\6\1\152\1\153\2\6"+
    "\1\154\1\6\1\155\3\6\1\156\5\6\1\157\1\160"+
    "\2\6\1\161\2\6\1\162\1\163\1\164\11\6\1\165"+
    "\2\6\1\166\1\167\3\6\1\170\1\171\3\6\1\172"+
    "\3\6\1\173\3\6\1\174\10\6\1\175\1\176\1\6"+
    "\1\177\14\6\1\200\3\6\1\201\1\6\1\202\1\6"+
    "\1\203\1\0\1\60\3\6\1\204\4\6\1\205\2\6"+
    "\1\206\15\6\1\207\3\6\1\210\2\6\1\211\2\6"+
    "\1\212\10\6\1\213\1\214\1\6\1\215\1\6\1\216"+
    "\1\217\1\220\4\6\1\221\1\222\13\6\1\0\13\6"+
    "\1\223\10\6\1\224\3\6\1\225\3\6\1\226\7\6"+
    "\1\227\1\230\1\6\1\231\4\6\1\232\4\6\1\233"+
    "\34\6\1\234\2\6\1\235\3\6\1\236\1\237\5\6"+
    "\1\240\4\6\1\241\1\242\4\6\1\243\1\6\1\244"+
    "\1\245\1\246\1\247\1\6\1\250\1\6\1\251\1\252"+
    "\2\6\1\253\1\6\1\254\1\6\1\255\5\6\1\256"+
    "\1\257\2\6\1\260\3\6\1\261\1\6\1\262\3\6"+
    "\1\263\1\264\7\6\1\265\2\6\1\266\7\6\1\267"+
    "\1\270\2\6\1\271\14\6\1\272\1\0\1\273\3\6"+
    "\1\274\1\275\4\6\1\276\7\6\1\277\1\6\1\300"+
    "\1\6\1\301\5\6\1\302\14\6\1\303\2\6\1\304"+
    "\1\305\2\6\1\306\20\6\1\307\1\6\1\310\1\311"+
    "\2\6\1\312\1\6\1\313\2\6\1\314\1\315\2\6"+
    "\1\316\13\6\1\317\1\320\11\6\1\321\3\6\1\322"+
    "\1\323\1\6\1\324\6\6\1\325\5\6\1\326\1\6"+
    "\1\327\1\6\1\330\1\331\1\332\2\6\1\333\10\6"+
    "\1\334\1\6\1\0\1\6\1\335\1\336\1\6\1\337"+
    "\1\340\1\6\1\341\4\6\1\342\1\343\1\6\1\344"+
    "\1\6\1\345\7\6\1\346\1\347\4\6\1\350\1\6"+
    "\1\351\1\6\1\352\4\6\1\353\1\354\1\355\13\6"+
    "\1\356\6\6\1\357\1\360\1\361\1\6\1\362\3\6"+
    "\1\363\1\6\1\364\1\365\1\0\2\6\1\366\1\367"+
    "\3\6\1\370\1\6\1\371\10\6\1\372\1\373\1\374"+
    "\1\375\2\6\1\376\3\6\1\377\3\6\1\u0100\2\6"+
    "\1\u0101\2\6\1\u0102\1\6\1\u0103\1\u0104\1\6\1\u0105"+
    "\1\u0106\2\6\1\u0107\1\u0108\12\6\1\u0109\2\6\1\u010a"+
    "\1\6\1\u010b\1\6\1\u010c\1\6\1\u010d\2\6\1\u010e"+
    "\1\6\1\u010f\3\6\1\u0110\1\u0111\1\6\1\u0112\1\u0113"+
    "\1\u0114\3\6\1\u0115\1\u0116\1\6\1\u0117\2\6\1\0"+
    "\1\6\1\u0118\1\u0119\1\6\1\u011a\1\u011b\2\6\1\u011c"+
    "\12\6\1\u011d\2\6\1\u011e\1\u011f\2\6\1\u0120\2\6"+
    "\1\u0121\1\u0122\4\6\1\u0123\3\6\1\u0124\2\6\1\u0125"+
    "\1\6\1\u0126\1\u0127\1\u0128\2\6\1\u0129\7\6\1\u012a"+
    "\4\6\1\u012b\1\u012c\1\6\1\0\1\u012d\3\6\1\u012e"+
    "\1\u012f\5\6\1\u0130\2\6\1\u0131\1\u0132\6\6\1\u0133"+
    "\1\6\1\u0134\6\6\1\u0135\4\6\1\u0136\1\u0137\1\u0138"+
    "\2\6\1\u0139\1\u013a\2\6\1\u013b\1\u013c\1\0\1\u013d"+
    "\6\6\1\u013e\2\6\1\u013f\2\6\1\u0140\1\u0141\1\u0142"+
    "\1\u0143\6\6\1\u0144\1\u0145\1\u0146\2\6\1\u0147\1\u0148"+
    "\1\u0149\1\u014a\1\0\2\6\1\u014b\3\6\1\u014c\5\6"+
    "\1\u014d\1\u014e\1\u014f\2\6\1\u0150\1\u0151\1\6\1\u0152"+
    "\1\u0153\3\6\1\u0154\1\6\1\u0155\1\u0156\3\6\1\u0157"+
    "\2\6\1\u0158\6\6\1\u0159\2\6\1\u015a\3\6\1\u015b"+
    "\2\6\1\u015c\15\6\1\u015d\1\u015e\7\6\1\u015f";

  private static int [] zzUnpackAction() {
    int [] result = new int[1399];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\72\0\72\0\256\0\350\0\u0122"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\72\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\72"+
    "\0\72\0\72\0\u0828\0\72\0\u0862\0\72\0\u089c\0\72"+
    "\0\72\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32"+
    "\0\72\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u05e4\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u05e4\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804"+
    "\0\u183e\0\u1878\0\u05e4\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a"+
    "\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa"+
    "\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\u24b4\0\u094a\0\72\0\u0984\0\u09be\0\u24ee\0\u2528"+
    "\0\72\0\u2562\0\u259c\0\u05e4\0\u25d6\0\u2610\0\u264a\0\u2684"+
    "\0\u05e4\0\u05e4\0\u05e4\0\u05e4\0\u05e4\0\u05e4\0\u26be\0\u26f8"+
    "\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8"+
    "\0\u2902\0\u05e4\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e"+
    "\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e"+
    "\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe"+
    "\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce"+
    "\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e"+
    "\0\u31d8\0\u3212\0\u324c\0\u3286\0\u05e4\0\u32c0\0\u32fa\0\u3334"+
    "\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504"+
    "\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4"+
    "\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4"+
    "\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74"+
    "\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44"+
    "\0\u05e4\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda"+
    "\0\u05e4\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70"+
    "\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140"+
    "\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310"+
    "\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0"+
    "\0\u451a\0\u4554\0\u458e\0\u45c8\0\u4602\0\u05e4\0\u463c\0\u4676"+
    "\0\u05e4\0\u46b0\0\u46ea\0\u05e4\0\u4724\0\u475e\0\u4798\0\u47d2"+
    "\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2"+
    "\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u05e4\0\u4ac4\0\u4afe\0\u4b38"+
    "\0\u4b72\0\u4bac\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08"+
    "\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\72\0\u4e9e"+
    "\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u05e4\0\u05e4"+
    "\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c\0\u05e4\0\u05e4\0\u5156"+
    "\0\u5190\0\u51ca\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec\0\u5326"+
    "\0\u5360\0\u539a\0\u05e4\0\u53d4\0\u540e\0\u5448\0\u5482\0\u54bc"+
    "\0\u54f6\0\u5530\0\u556a\0\u55a4\0\u55de\0\u5618\0\u05e4\0\u5652"+
    "\0\u568c\0\u56c6\0\u5700\0\u573a\0\u05e4\0\u5774\0\u05e4\0\u57ae"+
    "\0\u57e8\0\u5822\0\u585c\0\u05e4\0\u5896\0\u05e4\0\u58d0\0\u05e4"+
    "\0\u590a\0\u5944\0\u597e\0\u59b8\0\u59f2\0\u5a2c\0\u5a66\0\u5aa0"+
    "\0\u5ada\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc\0\u05e4\0\u5c36"+
    "\0\u5c70\0\u05e4\0\u5caa\0\u05e4\0\u5ce4\0\u05e4\0\u5d1e\0\u5d58"+
    "\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a\0\u05e4\0\u05e4\0\u05e4"+
    "\0\u5eb4\0\u5eee\0\u5f28\0\u5f62\0\u5f9c\0\u5fd6\0\u6010\0\u604a"+
    "\0\u6084\0\u60be\0\u60f8\0\u6132\0\u616c\0\u61a6\0\u61e0\0\u621a"+
    "\0\u6254\0\u628e\0\u62c8\0\u6302\0\u633c\0\u6376\0\u63b0\0\u05e4"+
    "\0\u63ea\0\u6424\0\u645e\0\u6498\0\u64d2\0\u650c\0\u6546\0\u6580"+
    "\0\u65ba\0\u65f4\0\u662e\0\u6668\0\u66a2\0\u05e4\0\u66dc\0\u6716"+
    "\0\u6750\0\u05e4\0\u678a\0\u67c4\0\u05e4\0\u05e4\0\u67fe\0\u6838"+
    "\0\u05e4\0\u6872\0\u68ac\0\u68e6\0\u6920\0\u695a\0\u05e4\0\u6994"+
    "\0\u69ce\0\u6a08\0\u6a42\0\u6a7c\0\u05e4\0\u05e4\0\u6ab6\0\u6af0"+
    "\0\u05e4\0\u6b2a\0\u6b64\0\u05e4\0\u05e4\0\u6b9e\0\u6bd8\0\u6c12"+
    "\0\u6c4c\0\u6c86\0\u6cc0\0\u6cfa\0\u6d34\0\u6d6e\0\u6da8\0\u05e4"+
    "\0\u6de2\0\u6e1c\0\u05e4\0\u05e4\0\u6e56\0\u6e90\0\u6eca\0\u05e4"+
    "\0\u05e4\0\u6f04\0\u6f3e\0\u6f78\0\u05e4\0\u6fb2\0\u6fec\0\u7026"+
    "\0\u05e4\0\u7060\0\u709a\0\u70d4\0\u710e\0\u7148\0\u7182\0\u71bc"+
    "\0\u71f6\0\u7230\0\u726a\0\u72a4\0\u72de\0\u05e4\0\u7318\0\u7352"+
    "\0\u738c\0\u73c6\0\u7400\0\u743a\0\u7474\0\u74ae\0\u74e8\0\u7522"+
    "\0\u755c\0\u7596\0\u75d0\0\u760a\0\u7644\0\u05e4\0\u767e\0\u76b8"+
    "\0\u76f2\0\u05e4\0\u772c\0\u05e4\0\u7766\0\u05e4\0\u77a0\0\u77a0"+
    "\0\u77da\0\u7814\0\u784e\0\u05e4\0\u7888\0\u78c2\0\u78fc\0\u7936"+
    "\0\u05e4\0\u7970\0\u79aa\0\u05e4\0\u79e4\0\u7a1e\0\u7a58\0\u7a92"+
    "\0\u7acc\0\u7b06\0\u7b40\0\u7b7a\0\u7bb4\0\u7bee\0\u7c28\0\u7c62"+
    "\0\u7c9c\0\u05e4\0\u7cd6\0\u7d10\0\u7d4a\0\u05e4\0\u7d84\0\u7dbe"+
    "\0\u05e4\0\u7df8\0\u7e32\0\u05e4\0\u7e6c\0\u7ea6\0\u7ee0\0\u7f1a"+
    "\0\u7f54\0\u7f8e\0\u7fc8\0\u8002\0\u05e4\0\u05e4\0\u803c\0\u05e4"+
    "\0\u8076\0\u05e4\0\u05e4\0\u05e4\0\u80b0\0\u80ea\0\u8124\0\u815e"+
    "\0\u05e4\0\u8198\0\u81d2\0\u820c\0\u8246\0\u8280\0\u82ba\0\u82f4"+
    "\0\u832e\0\u8368\0\u83a2\0\u83dc\0\u8416\0\u8450\0\u848a\0\u84c4"+
    "\0\u84fe\0\u8538\0\u8572\0\u85ac\0\u85e6\0\u8620\0\u865a\0\u8694"+
    "\0\u86ce\0\u05e4\0\u8708\0\u8742\0\u877c\0\u87b6\0\u87f0\0\u882a"+
    "\0\u8864\0\u889e\0\u05e4\0\u88d8\0\u8912\0\u894c\0\u05e4\0\u8986"+
    "\0\u89c0\0\u89fa\0\u8a34\0\u8a6e\0\u8aa8\0\u8ae2\0\u8b1c\0\u8b56"+
    "\0\u8b90\0\u8bca\0\u05e4\0\u05e4\0\u8c04\0\u05e4\0\u8c3e\0\u8c78"+
    "\0\u8cb2\0\u8cec\0\u05e4\0\u8d26\0\u8d60\0\u8d9a\0\u8dd4\0\u05e4"+
    "\0\u8e0e\0\u8e48\0\u8e82\0\u8ebc\0\u8ef6\0\u8f30\0\u8f6a\0\u8fa4"+
    "\0\u8fde\0\u9018\0\u9052\0\u908c\0\u90c6\0\u9100\0\u913a\0\u9174"+
    "\0\u91ae\0\u91e8\0\u9222\0\u925c\0\u9296\0\u92d0\0\u930a\0\u9344"+
    "\0\u937e\0\u93b8\0\u93f2\0\u942c\0\u05e4\0\u9466\0\u94a0\0\u94da"+
    "\0\u9514\0\u954e\0\u9588\0\u05e4\0\u05e4\0\u95c2\0\u95fc\0\u9636"+
    "\0\u9670\0\u96aa\0\u05e4\0\u96e4\0\u971e\0\u9758\0\u9792\0\u05e4"+
    "\0\u05e4\0\u97cc\0\u9806\0\u9840\0\u987a\0\u98b4\0\u98ee\0\u05e4"+
    "\0\u05e4\0\u05e4\0\u05e4\0\u9928\0\u05e4\0\u9962\0\u05e4\0\u05e4"+
    "\0\u999c\0\u99d6\0\u05e4\0\u9a10\0\u05e4\0\u9a4a\0\u05e4\0\u9a84"+
    "\0\u9abe\0\u9af8\0\u9b32\0\u9b6c\0\u05e4\0\u05e4\0\u9ba6\0\u9be0"+
    "\0\u05e4\0\u9c1a\0\u9c54\0\u9c8e\0\u05e4\0\u9cc8\0\u05e4\0\u9d02"+
    "\0\u9d3c\0\u9d76\0\u05e4\0\u05e4\0\u9db0\0\u9dea\0\u9e24\0\u9e5e"+
    "\0\u9e98\0\u9ed2\0\u9f0c\0\u05e4\0\u9f46\0\u9f80\0\u05e4\0\u9fba"+
    "\0\u9ff4\0\ua02e\0\ua068\0\ua0a2\0\ua0dc\0\ua116\0\u05e4\0\u05e4"+
    "\0\ua150\0\ua18a\0\ua1c4\0\ua1fe\0\ua238\0\ua272\0\ua2ac\0\ua2e6"+
    "\0\ua320\0\ua35a\0\ua394\0\ua3ce\0\ua408\0\ua442\0\ua47c\0\u05e4"+
    "\0\ua4b6\0\u05e4\0\ua4f0\0\ua52a\0\ua564\0\ua59e\0\u05e4\0\ua5d8"+
    "\0\ua612\0\ua64c\0\ua686\0\u05e4\0\ua6c0\0\ua6fa\0\ua734\0\ua76e"+
    "\0\ua7a8\0\ua7e2\0\ua81c\0\u05e4\0\ua856\0\u05e4\0\ua890\0\u05e4"+
    "\0\ua8ca\0\ua904\0\ua93e\0\ua978\0\ua9b2\0\u05e4\0\ua9ec\0\uaa26"+
    "\0\uaa60\0\uaa9a\0\uaad4\0\uab0e\0\uab48\0\uab82\0\uabbc\0\uabf6"+
    "\0\uac30\0\uac6a\0\u05e4\0\uaca4\0\uacde\0\u05e4\0\u05e4\0\uad18"+
    "\0\uad52\0\u05e4\0\uad8c\0\uadc6\0\uae00\0\uae3a\0\uae74\0\uaeae"+
    "\0\uaee8\0\uaf22\0\uaf5c\0\uaf96\0\uafd0\0\ub00a\0\ub044\0\ub07e"+
    "\0\ub0b8\0\ub0f2\0\u05e4\0\ub12c\0\u05e4\0\u05e4\0\ub166\0\ub1a0"+
    "\0\u05e4\0\ub1da\0\u05e4\0\ub214\0\ub24e\0\u05e4\0\u05e4\0\ub288"+
    "\0\ub2c2\0\u05e4\0\ub2fc\0\ub336\0\ub370\0\ub3aa\0\ub3e4\0\ub41e"+
    "\0\ub458\0\ub492\0\ub4cc\0\ub506\0\ub540\0\u05e4\0\u05e4\0\ub57a"+
    "\0\ub5b4\0\ub5ee\0\ub628\0\ub662\0\ub69c\0\ub6d6\0\ub710\0\ub74a"+
    "\0\u05e4\0\ub784\0\ub7be\0\ub7f8\0\ub832\0\u05e4\0\ub86c\0\u05e4"+
    "\0\ub8a6\0\ub8e0\0\ub91a\0\ub954\0\ub98e\0\ub9c8\0\u05e4\0\uba02"+
    "\0\uba3c\0\uba76\0\ubab0\0\ubaea\0\u05e4\0\ubb24\0\u05e4\0\ubb5e"+
    "\0\u05e4\0\u05e4\0\u05e4\0\ubb98\0\ubbd2\0\u05e4\0\ubc0c\0\ubc46"+
    "\0\ubc80\0\ubcba\0\ubcf4\0\ubd2e\0\ubd68\0\ubda2\0\u05e4\0\ubddc"+
    "\0\ube16\0\ube50\0\u05e4\0\u05e4\0\ube8a\0\ubec4\0\u05e4\0\ubefe"+
    "\0\u05e4\0\ubf38\0\ubf72\0\ubfac\0\ubfe6\0\uc020\0\u05e4\0\uc05a"+
    "\0\u05e4\0\uc094\0\uc0ce\0\uc108\0\uc142\0\uc17c\0\uc1b6\0\uc1f0"+
    "\0\uc22a\0\uc264\0\u05e4\0\u05e4\0\uc29e\0\uc2d8\0\uc312\0\uc34c"+
    "\0\u05e4\0\uc386\0\u05e4\0\uc3c0\0\u05e4\0\uc3fa\0\uc434\0\uc46e"+
    "\0\uc4a8\0\u05e4\0\u05e4\0\u05e4\0\uc4e2\0\uc51c\0\uc556\0\uc590"+
    "\0\uc5ca\0\uc604\0\uc63e\0\uc678\0\uc6b2\0\uc6ec\0\uc726\0\u05e4"+
    "\0\uc760\0\uc79a\0\uc7d4\0\uc80e\0\uc848\0\uc882\0\u05e4\0\u05e4"+
    "\0\u05e4\0\uc8bc\0\u05e4\0\uc8f6\0\uc930\0\uc96a\0\u05e4\0\uc9a4"+
    "\0\u05e4\0\u05e4\0\uc9de\0\uca18\0\uca52\0\u05e4\0\u05e4\0\uca8c"+
    "\0\ucac6\0\ucb00\0\u05e4\0\ucb3a\0\u05e4\0\ucb74\0\ucbae\0\ucbe8"+
    "\0\ucc22\0\ucc5c\0\ucc96\0\uccd0\0\ucd0a\0\u05e4\0\u05e4\0\u05e4"+
    "\0\u05e4\0\ucd44\0\ucd7e\0\u05e4\0\ucdb8\0\ucdf2\0\uce2c\0\u05e4"+
    "\0\uce66\0\ucea0\0\uceda\0\u05e4\0\ucf14\0\ucf4e\0\u05e4\0\ucf88"+
    "\0\ucfc2\0\u05e4\0\ucffc\0\72\0\u05e4\0\ud036\0\u05e4\0\u05e4"+
    "\0\ud070\0\ud0aa\0\ud0e4\0\u05e4\0\ud11e\0\ud158\0\ud192\0\ud1cc"+
    "\0\ud206\0\ud240\0\ud27a\0\ud2b4\0\ud2ee\0\ud328\0\u05e4\0\ud362"+
    "\0\ud39c\0\ud3d6\0\ud410\0\u05e4\0\ud44a\0\u05e4\0\ud484\0\u05e4"+
    "\0\ud4be\0\ud4f8\0\u05e4\0\ud532\0\u05e4\0\ud56c\0\ud5a6\0\ud5e0"+
    "\0\u05e4\0\u05e4\0\ud61a\0\u05e4\0\u05e4\0\u05e4\0\ud654\0\ud68e"+
    "\0\ud6c8\0\u05e4\0\u05e4\0\ud702\0\u05e4\0\ud73c\0\ud776\0\ud7b0"+
    "\0\ud7ea\0\u05e4\0\u05e4\0\ud824\0\ud85e\0\u05e4\0\ud898\0\ud8d2"+
    "\0\u05e4\0\ud90c\0\ud946\0\ud980\0\ud9ba\0\ud9f4\0\uda2e\0\uda68"+
    "\0\udaa2\0\udadc\0\udb16\0\u05e4\0\udb50\0\udb8a\0\u05e4\0\u05e4"+
    "\0\udbc4\0\udbfe\0\u05e4\0\udc38\0\udc72\0\u05e4\0\u05e4\0\udcac"+
    "\0\udce6\0\udd20\0\udd5a\0\u05e4\0\udd94\0\uddce\0\ude08\0\ude42"+
    "\0\ude7c\0\udeb6\0\u05e4\0\udef0\0\u05e4\0\u05e4\0\u05e4\0\udf2a"+
    "\0\udf64\0\u05e4\0\udf9e\0\udfd8\0\ue012\0\ue04c\0\ue086\0\ue0c0"+
    "\0\ue0fa\0\u05e4\0\ue134\0\ue16e\0\ue1a8\0\ue1e2\0\u05e4\0\u05e4"+
    "\0\ue21c\0\ue256\0\u05e4\0\ue290\0\ue2ca\0\ue304\0\u05e4\0\u05e4"+
    "\0\ue33e\0\ue378\0\ue3b2\0\ue3ec\0\ue426\0\u05e4\0\ue460\0\ue49a"+
    "\0\u05e4\0\u05e4\0\ue4d4\0\ue50e\0\ue548\0\ue582\0\ue5bc\0\ue5f6"+
    "\0\ue630\0\ue66a\0\u05e4\0\ue6a4\0\ue6de\0\ue718\0\ue752\0\ue78c"+
    "\0\ue7c6\0\u05e4\0\ue800\0\ue83a\0\ue874\0\ue8ae\0\u05e4\0\u05e4"+
    "\0\u05e4\0\ue8e8\0\ue922\0\u05e4\0\u05e4\0\ue95c\0\ue996\0\u05e4"+
    "\0\u05e4\0\ue9d0\0\u05e4\0\uea0a\0\uea44\0\uea7e\0\ueab8\0\ueaf2"+
    "\0\ueb2c\0\u05e4\0\ueb66\0\ueba0\0\u05e4\0\uebda\0\uec14\0\u05e4"+
    "\0\u05e4\0\u05e4\0\u05e4\0\uec4e\0\uec88\0\uecc2\0\uecfc\0\ued36"+
    "\0\ued70\0\u05e4\0\u05e4\0\u05e4\0\uedaa\0\uede4\0\u05e4\0\u05e4"+
    "\0\u05e4\0\u05e4\0\uee1e\0\uee58\0\uee92\0\u05e4\0\ueecc\0\uef06"+
    "\0\uef40\0\u05e4\0\uef7a\0\uefb4\0\uefee\0\uf028\0\uf062\0\u05e4"+
    "\0\uf09c\0\u05e4\0\uf0d6\0\uf110\0\u05e4\0\72\0\uf14a\0\u05e4"+
    "\0\u05e4\0\uf184\0\uf1be\0\uf1f8\0\u05e4\0\uf232\0\u05e4\0\u05e4"+
    "\0\uf26c\0\uf2a6\0\uf2e0\0\u05e4\0\uf31a\0\uf354\0\u05e4\0\uf38e"+
    "\0\uf3c8\0\uf402\0\uf43c\0\uf476\0\uf4b0\0\u05e4\0\uf4ea\0\uf524"+
    "\0\u05e4\0\uf55e\0\uf598\0\uf5d2\0\u05e4\0\uf60c\0\uf646\0\u05e4"+
    "\0\uf680\0\uf6ba\0\uf6f4\0\uf72e\0\uf768\0\uf7a2\0\uf7dc\0\uf816"+
    "\0\uf850\0\uf88a\0\uf8c4\0\uf8fe\0\uf938\0\u05e4\0\u05e4\0\uf972"+
    "\0\uf9ac\0\uf9e6\0\ufa20\0\ufa5a\0\ufa94\0\uface\0\u05e4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1399];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\35"+
    "\1\40\1\35\1\5\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\35\1\64"+
    "\1\65\1\35\74\0\1\66\73\0\1\67\60\0\1\70"+
    "\12\0\1\71\72\0\1\35\1\72\1\73\1\35\1\74"+
    "\1\75\1\76\1\35\1\77\1\35\1\100\1\101\1\102"+
    "\3\35\1\103\12\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\104\2\35\1\105\1\35\1\106\1\35\1\107\1\35"+
    "\1\110\2\35\1\111\1\112\15\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\113\2\35\1\114\1\35\1\115\1\116"+
    "\1\117\1\120\1\121\3\35\1\122\1\123\4\35\1\124"+
    "\2\35\1\125\3\35\1\126\23\0\2\35\2\0\1\35"+
    "\7\0\5\35\1\127\2\35\1\130\1\35\1\131\1\35"+
    "\1\132\3\35\1\133\2\35\1\134\3\35\1\135\3\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\136\2\35\1\137"+
    "\3\35\1\140\1\35\1\141\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\142\7\35\1\143\10\35\1\144"+
    "\7\35\23\0\2\35\2\0\1\35\7\0\1\145\1\35"+
    "\1\146\1\147\3\35\1\150\1\35\1\151\2\35\1\152"+
    "\1\35\1\153\14\35\23\0\2\35\2\0\1\35\7\0"+
    "\2\35\1\154\1\35\1\155\5\35\1\156\1\35\1\157"+
    "\13\35\1\160\2\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\161\2\35\1\162\1\163\1\164\6\35\1\165\1\35"+
    "\1\166\14\35\23\0\2\35\2\0\1\35\7\0\2\35"+
    "\1\167\7\35\1\170\1\171\12\35\1\172\1\173\3\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\174\2\35\1\175"+
    "\1\35\1\176\1\35\1\177\1\200\22\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\201\1\202\1\35\1\203\1\35"+
    "\1\204\1\35\1\205\1\35\1\206\2\35\1\207\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\210\2\35\1\211"+
    "\1\35\1\212\1\35\1\213\1\35\1\214\21\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\215\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\216\2\35\1\217\27\35"+
    "\23\0\2\35\2\0\1\35\7\0\3\35\1\220\27\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\221\10\35\1\222"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\3\35\1\223"+
    "\1\224\2\35\1\225\4\35\1\226\16\35\23\0\2\35"+
    "\2\0\1\35\7\0\7\35\1\227\1\35\1\230\21\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\231\2\35\1\232"+
    "\1\233\1\234\1\35\1\235\1\35\1\236\2\35\1\237"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\1\240\2\35"+
    "\1\241\5\35\1\242\2\35\1\243\1\35\1\244\14\35"+
    "\23\0\2\35\2\0\1\35\7\0\33\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\245\2\35\1\246\3\35\1\247"+
    "\1\35\1\250\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\251\2\35\1\252\1\253\1\254\1\35\1\255\1\35"+
    "\1\256\2\35\1\257\16\35\23\0\2\35\2\0\1\35"+
    "\7\0\3\35\1\260\27\35\23\0\2\35\2\0\1\35"+
    "\65\0\1\70\52\0\1\261\71\0\1\262\71\0\1\263"+
    "\71\0\1\264\74\0\1\265\76\0\1\266\73\0\1\267"+
    "\73\0\1\270\73\0\1\271\61\0\1\272\10\0\1\63"+
    "\4\0\3\273\1\0\63\273\1\274\2\273\3\275\1\0"+
    "\64\275\1\274\1\275\2\276\1\277\1\300\66\276\3\67"+
    "\1\301\1\67\1\301\64\67\54\0\1\272\10\0\1\70"+
    "\13\0\2\35\1\302\30\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\303\5\35\1\304\22\35\23\0\2\35"+
    "\2\0\1\35\7\0\4\35\1\305\1\35\1\306\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\307\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\310\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\13\35\1\311\1\35"+
    "\1\312\15\35\23\0\2\35\2\0\1\35\7\0\1\313"+
    "\12\35\1\314\17\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\315\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\21\35\1\316\11\35\23\0\2\35\2\0\1\35\7\0"+
    "\10\35\1\317\22\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\320\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\321\26\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\322\12\35\1\323\11\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\324\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\3\35\1\325\3\35\1\326\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\20\35\1\327\12\35\23\0"+
    "\2\35\2\0\1\35\7\0\26\35\1\330\4\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\35\1\331\24\35\1\332"+
    "\4\35\23\0\2\35\2\0\1\35\7\0\1\333\32\35"+
    "\23\0\2\35\2\0\1\35\7\0\2\35\1\334\1\35"+
    "\1\335\1\35\1\336\1\35\1\337\15\35\1\340\4\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\341\1\35"+
    "\1\342\14\35\23\0\2\35\2\0\1\35\7\0\17\35"+
    "\1\343\13\35\23\0\2\35\2\0\1\35\7\0\2\35"+
    "\1\344\30\35\23\0\2\35\2\0\1\35\7\0\5\35"+
    "\1\345\25\35\23\0\2\35\2\0\1\35\7\0\1\346"+
    "\32\35\23\0\2\35\2\0\1\35\7\0\1\347\32\35"+
    "\23\0\2\35\2\0\1\35\7\0\4\35\1\350\26\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\351\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\352\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\4\35\1\353\26\35"+
    "\23\0\2\35\2\0\1\35\7\0\13\35\1\354\17\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\355\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\356\1\357"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\27\35\1\360"+
    "\3\35\23\0\2\35\2\0\1\35\7\0\2\35\1\361"+
    "\7\35\1\362\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\363\7\35\1\364\13\35\1\365\6\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\366\17\35\1\367\6\35\1\370"+
    "\3\35\23\0\2\35\2\0\1\35\7\0\12\35\1\371"+
    "\7\35\1\372\10\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\373\6\35\1\374\1\35\1\375\21\35\23\0\2\35"+
    "\2\0\1\35\7\0\11\35\1\376\10\35\1\377\1\u0100"+
    "\7\35\23\0\2\35\2\0\1\35\7\0\13\35\1\u0101"+
    "\7\35\1\u0102\7\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\35\1\u0103\31\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0104\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\23\35\1\u0105\7\35\23\0\2\35\2\0\1\35\7\0"+
    "\26\35\1\u0106\1\35\1\u0107\2\35\23\0\2\35\2\0"+
    "\1\35\7\0\26\35\1\u0108\4\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\u0109\4\35\1\u010a\3\35\1\u010b\3\35"+
    "\1\u010c\15\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u010d\23\35\23\0\2\35\2\0\1\35\7\0\10\35"+
    "\1\u010e\22\35\23\0\2\35\2\0\1\35\7\0\2\35"+
    "\1\u010f\30\35\23\0\2\35\2\0\1\35\7\0\13\35"+
    "\1\u0110\17\35\23\0\2\35\2\0\1\35\7\0\14\35"+
    "\1\u0111\16\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u0112\1\u0113\1\u0114\1\u0115\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u0116\3\35\1\u0117\24\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\u0118\3\35\1\u0119\1\u011a"+
    "\4\35\1\u011b\1\35\1\u011c\11\35\1\u011d\4\35\23\0"+
    "\2\35\2\0\1\35\7\0\3\35\1\u011e\1\35\1\u011f"+
    "\25\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u0120"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\3\35\1\u0121"+
    "\3\35\1\u0122\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\u0123\6\35\1\u0124\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\3\35\1\u0125\27\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u0126\3\35\1\u0127\1\35\1\u0128\1\u0129"+
    "\1\u012a\1\u012b\7\35\1\u012c\7\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u012d\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\26\35\1\u012e\4\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u012f\17\35\1\u0130\4\35\23\0"+
    "\2\35\2\0\1\35\7\0\6\35\1\u0131\1\35\1\u0132"+
    "\1\35\1\u0133\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u0134\21\35\1\u0135\4\35\23\0\2\35\2\0"+
    "\1\35\7\0\30\35\1\u0136\2\35\23\0\2\35\2\0"+
    "\1\35\7\0\16\35\1\u0137\14\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u0138\6\35\1\u0139\15\35\23\0"+
    "\2\35\2\0\1\35\7\0\10\35\1\u013a\22\35\23\0"+
    "\2\35\2\0\1\35\7\0\5\35\1\u013b\20\35\1\u013c"+
    "\4\35\23\0\2\35\2\0\1\35\7\0\26\35\1\u013d"+
    "\4\35\23\0\2\35\2\0\1\35\7\0\1\u013e\1\35"+
    "\1\u013f\1\35\1\u0140\3\35\1\u0141\1\35\1\u0142\14\35"+
    "\1\u0143\3\35\23\0\2\35\2\0\1\35\7\0\1\u0144"+
    "\1\35\1\u0145\30\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u0146\27\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u0147\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u0148\17\35\1\u0149\6\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u014a\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\u014b\1\35\1\u014c\1\35\1\u014d\1\35"+
    "\1\u014e\1\35\1\u014f\7\35\1\u0150\2\35\1\u0151\3\35"+
    "\1\u0152\3\35\23\0\2\35\2\0\1\35\7\0\21\35"+
    "\1\u0153\11\35\23\0\2\35\2\0\1\35\7\0\1\u0154"+
    "\32\35\23\0\2\35\2\0\1\35\7\0\20\35\1\u0155"+
    "\12\35\23\0\2\35\2\0\1\35\7\0\4\35\1\u0156"+
    "\1\u0157\25\35\23\0\2\35\2\0\1\35\7\0\12\35"+
    "\1\u0158\20\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u0159\7\35\1\u015a\16\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u015b\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u015c\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\3\35\1\u015d\27\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u015e\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u015f\2\35\1\u0160\27\35\23\0\2\35\2\0"+
    "\1\35\7\0\15\35\1\u0161\15\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u0162\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u0163\10\35\1\u0164\1\u0165\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\2\35\1\u0166\30\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\u0167\32\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\35\1\u0168\31\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u0169\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\20\35\1\u016a\12\35\23\0"+
    "\2\35\2\0\1\35\7\0\3\35\1\u016b\3\35\1\u016c"+
    "\1\35\1\u016d\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u016e\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\14\35\1\u016f\16\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u0170\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u0171\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0172\1\35\1\u0173\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u0174\21\35\1\u0175\2\35\23\0"+
    "\2\35\2\0\1\35\7\0\12\35\1\u0176\1\u0177\17\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\u0178\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\12\35\1\u0179\20\35"+
    "\23\0\2\35\2\0\1\35\7\0\4\35\1\u017a\26\35"+
    "\23\0\2\35\2\0\1\35\7\0\5\35\1\u017b\6\35"+
    "\1\u017c\16\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u017d\27\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u017e\5\35\1\u017f\20\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u0180\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\4\35\1\u0181\7\35\1\u0182\16\35\23\0\2\35"+
    "\2\0\1\35\7\0\3\35\1\u0183\3\35\1\u0184\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\11\35\1\u0185\21\35"+
    "\23\0\2\35\2\0\1\35\16\0\1\u0186\46\0\1\272"+
    "\3\0\1\u0186\1\300\1\u0187\1\277\71\300\1\277\67\300"+
    "\7\0\3\35\1\u0188\27\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u0189\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\3\35\1\u018a\27\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u018b\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\16\35\1\u018c\14\35\23\0\2\35\2\0\1\35"+
    "\7\0\11\35\1\u018d\21\35\23\0\2\35\2\0\1\35"+
    "\7\0\22\35\1\u018e\10\35\23\0\2\35\2\0\1\35"+
    "\7\0\16\35\1\u018f\14\35\23\0\2\35\2\0\1\35"+
    "\7\0\22\35\1\u0190\10\35\23\0\2\35\2\0\1\35"+
    "\7\0\24\35\1\u0191\6\35\23\0\2\35\2\0\1\35"+
    "\7\0\11\35\1\u0192\21\35\23\0\2\35\2\0\1\35"+
    "\7\0\25\35\1\u0193\5\35\23\0\2\35\2\0\1\35"+
    "\7\0\24\35\1\u0194\6\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u0195\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0196\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0197\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\2\35\1\u0198\30\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u0199\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\2\35\1\u019a\30\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u019b\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\5\35\1\u019c\25\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u019d\1\35\1\u019e\1\u019f\24\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\u01a0\32\35\23\0\2\35\2\0"+
    "\1\35\7\0\3\35\1\u01a1\27\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u01a2\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u01a3\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u01a4\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u01a5\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\10\35\1\u01a6\22\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u01a7\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u01a8\4\35\1\u01a9\1\u01aa\13\35"+
    "\1\u01ab\6\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u01ac\13\35\1\u01ad\7\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u01ae\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\15\35\1\u01af\15\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u01b0\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\14\35\1\u01b1\16\35\23\0\2\35\2\0\1\35"+
    "\7\0\11\35\1\u01b2\21\35\23\0\2\35\2\0\1\35"+
    "\7\0\12\35\1\u01b3\20\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u01b4\30\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u01b5\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\21\35\1\u01b6\11\35\23\0\2\35\2\0\1\35"+
    "\7\0\13\35\1\u01b7\17\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u01b8\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u01b9\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\13\35\1\u01ba\17\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u01bb\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u01bc\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u01bd\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u01be\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\21\35\1\u01bf\11\35\23\0\2\35\2\0\1\35\7\0"+
    "\14\35\1\u01c0\16\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u01c1\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u01c2\26\35\1\u01c3\23\0\2\35\2\0\1\35"+
    "\7\0\12\35\1\u01c4\20\35\23\0\2\35\2\0\1\35"+
    "\7\0\11\35\1\u01c5\21\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u01c6\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u01c7\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u01c8\26\35\23\0\2\35\2\0\1\35\7\0"+
    "\32\35\1\u01c9\23\0\2\35\2\0\1\35\7\0\23\35"+
    "\1\u01ca\7\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u01cb\24\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u01cc\23\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u01cd\1\u01ce\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u01cf\2\35\1\u01d0\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\21\35\1\u01d1\4\35\1\u01d2\4\35\23\0"+
    "\2\35\2\0\1\35\7\0\25\35\1\u01d3\5\35\23\0"+
    "\2\35\2\0\1\35\7\0\12\35\1\u01d4\20\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\u01d5\32\35\23\0\2\35"+
    "\2\0\1\35\7\0\7\35\1\u01d6\23\35\23\0\2\35"+
    "\2\0\1\35\4\0\1\u01d7\2\0\33\35\23\0\2\35"+
    "\2\0\1\35\7\0\4\35\1\u01d8\26\35\23\0\2\35"+
    "\2\0\1\35\7\0\7\35\1\u01d9\4\35\1\u01da\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\10\35\1\u01db\22\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u01dc\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\2\35\1\u01dd\3\35"+
    "\1\u01de\24\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u01df\1\u01e0\1\u01e1\22\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u01e2\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u01e3\26\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u01e4\1\u01e5\25\35\23\0\2\35\2\0\1\35"+
    "\7\0\12\35\1\u01e6\20\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u01e7\3\35\1\u01e8\3\35\1\u01e9\5\35"+
    "\1\u01ea\12\35\23\0\2\35\2\0\1\35\7\0\14\35"+
    "\1\u01eb\16\35\23\0\2\35\2\0\1\35\7\0\23\35"+
    "\1\u01ec\2\35\1\u01ed\4\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u01ee\30\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u01ef\30\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u01f0\11\35\1\u01f1\16\35\23\0\2\35"+
    "\2\0\1\35\7\0\2\35\1\u01f2\30\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\u01f3\32\35\23\0\2\35\2\0"+
    "\1\35\7\0\14\35\1\u01f4\16\35\23\0\2\35\2\0"+
    "\1\35\7\0\10\35\1\u01f5\22\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u01f6\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u01f7\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\3\35\1\u01f8\3\35\1\u01f9\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\4\35\1\u01fa\26\35\23\0"+
    "\2\35\2\0\1\35\7\0\6\35\1\u01fb\24\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u01fc\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u01fd\1\35\1\u01fe"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\5\35\1\u01ff"+
    "\25\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u0200"+
    "\20\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0201"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\5\35\1\u0202"+
    "\3\35\1\u0203\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0204\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\16\35\1\u0205\14\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0206\1\u0207\22\35\23\0\2\35\2\0\1\35"+
    "\7\0\4\35\1\u0208\26\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u0209\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u020a\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u020b\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\u020c\6\35\1\u020d\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\10\35\1\u020e\22\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\35\1\u020f\31\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u0210\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\23\35\1\u0211\7\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u0212\26\35\23\0\2\35\2\0\1\35\7\0"+
    "\10\35\1\u0213\22\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0214\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u0215\4\35\1\u0216\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\15\35\1\u0217\15\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\u0218\6\35\1\u0219\23\35\23\0\2\35"+
    "\2\0\1\35\7\0\21\35\1\u021a\11\35\23\0\2\35"+
    "\2\0\1\35\7\0\6\35\1\u021b\1\35\1\u021c\11\35"+
    "\1\u021d\10\35\23\0\2\35\2\0\1\35\7\0\23\35"+
    "\1\u021e\7\35\23\0\2\35\2\0\1\35\7\0\2\35"+
    "\1\u021f\30\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u0220\26\35\23\0\2\35\2\0\1\35\7\0\2\35"+
    "\1\u0221\5\35\1\u0222\10\35\1\u0223\11\35\23\0\2\35"+
    "\2\0\1\35\7\0\7\35\1\u0224\23\35\23\0\2\35"+
    "\2\0\1\35\7\0\4\35\1\u0225\6\35\1\u0226\17\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u0227\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\u0228\32\35\23\0"+
    "\2\35\2\0\1\35\7\0\5\35\1\u0229\25\35\23\0"+
    "\2\35\2\0\1\35\7\0\3\35\1\u022a\27\35\23\0"+
    "\2\35\2\0\1\35\7\0\3\35\1\u022b\3\35\1\u022c"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\4\35\1\u022d"+
    "\26\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u022e"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\16\35\1\u022f"+
    "\14\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u0230"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u0231"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\13\35\1\u0232"+
    "\17\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u0233"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0234"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\5\35\1\u0235"+
    "\25\35\23\0\2\35\2\0\1\35\7\0\10\35\1\u0236"+
    "\4\35\1\u0237\15\35\23\0\2\35\2\0\1\35\7\0"+
    "\24\35\1\u0238\6\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u0239\27\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\35\1\u023a\31\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u023b\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\5\35\1\u023c\25\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u023d\26\35\23\0\2\35\2\0\1\35\7\0"+
    "\10\35\1\u023e\22\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u023f\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u0240\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u0241\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u0242\26\35\23\0\2\35\2\0\1\35\7\0"+
    "\10\35\1\u0243\22\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u0244\27\35\23\0\2\35\2\0\1\35\7\0"+
    "\10\35\1\u0245\22\35\23\0\2\35\2\0\1\35\7\0"+
    "\2\35\1\u0246\5\35\1\u0247\12\35\1\u0248\7\35\23\0"+
    "\2\35\2\0\1\35\7\0\3\35\1\u0249\6\35\1\u024a"+
    "\5\35\1\u024b\5\35\1\u024c\4\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u024d\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\22\35\1\u024e\10\35\23\0\2\35\2\0"+
    "\1\35\7\0\16\35\1\u024f\14\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u0250\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u0251\1\35\1\u0252\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\4\35\1\u0253\26\35\23\0"+
    "\2\35\2\0\1\35\7\0\10\35\1\u0254\22\35\23\0"+
    "\2\35\2\0\1\35\7\0\6\35\1\u0255\24\35\23\0"+
    "\2\35\2\0\1\35\7\0\5\35\1\u0256\25\35\23\0"+
    "\2\35\2\0\1\35\7\0\21\35\1\u0257\11\35\23\0"+
    "\2\35\2\0\1\35\7\0\5\35\1\u0258\25\35\23\0"+
    "\2\35\2\0\1\35\7\0\2\35\1\u0259\30\35\23\0"+
    "\2\35\2\0\1\35\7\0\12\35\1\u025a\20\35\23\0"+
    "\2\35\2\0\1\35\7\0\6\35\1\u025b\1\u025c\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\u025d\32\35\23\0"+
    "\2\35\2\0\1\35\7\0\4\35\1\u025e\26\35\23\0"+
    "\2\35\2\0\1\35\7\0\10\35\1\u025f\22\35\23\0"+
    "\2\35\2\0\1\35\7\0\10\35\1\u0260\22\35\23\0"+
    "\2\35\2\0\1\35\7\0\4\35\1\u0261\2\35\1\u0262"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\2\35\1\u0263"+
    "\30\35\23\0\2\35\2\0\1\35\7\0\26\35\1\u0264"+
    "\4\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0265"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u0266"+
    "\20\35\23\0\2\35\2\0\1\35\4\0\1\u0267\36\0"+
    "\1\u0267\21\0\1\u0268\13\0\4\35\1\u0269\26\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u026a\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\10\35\1\u026b\22\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u026c\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\3\35\1\u026d\27\35\23\0"+
    "\2\35\2\0\1\35\7\0\3\35\1\u026e\27\35\23\0"+
    "\2\35\2\0\1\35\7\0\5\35\1\u026f\25\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u0270\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\12\35\1\u0271\20\35\23\0"+
    "\2\35\2\0\1\35\7\0\4\35\1\u0272\26\35\23\0"+
    "\2\35\2\0\1\35\7\0\2\35\1\u0273\30\35\23\0"+
    "\2\35\2\0\1\35\7\0\22\35\1\u0274\10\35\23\0"+
    "\2\35\2\0\1\35\7\0\6\35\1\u0275\24\35\23\0"+
    "\2\35\2\0\1\35\7\0\11\35\1\u0276\21\35\23\0"+
    "\2\35\2\0\1\35\7\0\11\35\1\u0277\21\35\23\0"+
    "\2\35\2\0\1\35\7\0\10\35\1\u0278\22\35\23\0"+
    "\2\35\2\0\1\35\7\0\2\35\1\u0279\30\35\23\0"+
    "\2\35\2\0\1\35\7\0\12\35\1\u027a\20\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u027b\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\11\35\1\u027c\21\35\23\0"+
    "\2\35\2\0\1\35\7\0\12\35\1\u027d\20\35\23\0"+
    "\2\35\2\0\1\35\7\0\4\35\1\u027e\26\35\23\0"+
    "\2\35\2\0\1\35\7\0\26\35\1\u027f\4\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u0280\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\13\35\1\u0281\17\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u0282\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\4\35\1\u0283\26\35\23\0"+
    "\2\35\2\0\1\35\7\0\6\35\1\u0284\24\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u0285\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\u0286\2\35\1\u0287\27\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\u0288\32\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u0289\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\5\35\1\u028a\25\35\23\0"+
    "\2\35\2\0\1\35\7\0\6\35\1\u028b\24\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u028c\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\4\35\1\u028d\26\35\23\0"+
    "\2\35\2\0\1\35\7\0\3\35\1\u028e\27\35\23\0"+
    "\2\35\2\0\1\35\7\0\13\35\1\u028f\1\u0290\13\35"+
    "\1\u0291\1\35\1\u0292\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0293\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\5\35\1\u0294\25\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u0295\26\35\23\0\2\35\2\0\1\35\7\0"+
    "\14\35\1\u0296\16\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u0297\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\4\35\1\u0298\26\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u0299\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u029a\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\21\35\1\u029b\11\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u029c\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\5\35\1\u029d\25\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u029e\27\35\23\0\2\35\2\0\1\35\7\0"+
    "\20\35\1\u029f\12\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u02a0\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\14\35\1\u02a1\16\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u02a2\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\5\35\1\u02a3\25\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u02a4\27\35\23\0\2\35\2\0\1\35\7\0"+
    "\2\35\1\u02a5\30\35\23\0\2\35\2\0\1\35\7\0"+
    "\2\35\1\u02a6\14\35\1\u02a7\13\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u02a8\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u02a9\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\10\35\1\u02aa\22\35\23\0\2\35\2\0"+
    "\1\35\7\0\21\35\1\u02ab\11\35\23\0\2\35\2\0"+
    "\1\35\7\0\10\35\1\u02ac\22\35\23\0\2\35\2\0"+
    "\1\35\7\0\23\35\1\u02ad\7\35\23\0\2\35\2\0"+
    "\1\35\16\0\1\u02ae\62\0\20\35\1\u02af\12\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u02b0\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\u02b1\32\35\23\0\2\35"+
    "\2\0\1\35\7\0\5\35\1\u02b2\25\35\23\0\2\35"+
    "\2\0\1\35\7\0\23\35\1\u02b3\7\35\23\0\2\35"+
    "\2\0\1\35\7\0\6\35\1\u02b4\24\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\u02b5\32\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u02b6\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u02b7\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\u02b8\32\35\23\0\2\35\2\0\1\35"+
    "\7\0\26\35\1\u02b9\4\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u02ba\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u02bb\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u02bc\10\35\1\u02bd\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u02be\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u02bf\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u02c0\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\5\35\1\u02c1\25\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u02c2\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u02c3\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u02c4\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\3\35\1\u02c5\27\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u02c6\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u02c7\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u02c8\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\u02c9\24\35\1\u02ca\5\35\23\0\2\35"+
    "\2\0\1\35\7\0\22\35\1\u02cb\10\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\u02cc\32\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u02cd\1\35\1\u02ce\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u02cf\4\35\1\u02d0"+
    "\11\35\23\0\2\35\2\0\1\35\7\0\5\35\1\u02d1"+
    "\25\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u02d2"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u02d3"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\30\35\1\u02d4"+
    "\2\35\23\0\2\35\2\0\1\35\7\0\10\35\1\u02d5"+
    "\22\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u02d6"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u02d7"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\13\35\1\u02d8"+
    "\17\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u02d9"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\3\35\1\u02da"+
    "\27\35\23\0\2\35\2\0\1\35\7\0\2\35\1\u02db"+
    "\30\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u02dc"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\4\35\1\u02dd"+
    "\26\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u02de"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u02df"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u02e0"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\1\35\1\u02e1"+
    "\31\35\23\0\2\35\2\0\1\35\7\0\4\35\1\u02e2"+
    "\26\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u02e3"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\4\35\1\u02e4"+
    "\26\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u02e5"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u02e6"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\1\u02e7\32\35"+
    "\23\0\2\35\2\0\1\35\7\0\26\35\1\u02e8\4\35"+
    "\23\0\2\35\2\0\1\35\7\0\5\35\1\u02e9\25\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\u02ea\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\12\35\1\u02eb\20\35"+
    "\23\0\2\35\2\0\1\35\7\0\11\35\1\u02ec\2\35"+
    "\1\u02ed\16\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u02ee\27\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u02ef\23\35\23\0\2\35\2\0\1\35\7\0\1\35"+
    "\1\u02f0\31\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u02f1\27\35\23\0\2\35\2\0\1\35\7\0\5\35"+
    "\1\u02f2\25\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u02f3\24\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u02f4\10\35\1\u02f5\16\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u02f6\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\14\35\1\u02f7\16\35\23\0\2\35\2\0\1\35"+
    "\7\0\12\35\1\u02f8\20\35\23\0\2\35\2\0\1\35"+
    "\7\0\22\35\1\u02f9\10\35\23\0\2\35\2\0\1\35"+
    "\7\0\14\35\1\u02fa\16\35\23\0\2\35\2\0\1\35"+
    "\7\0\11\35\1\u02fb\21\35\23\0\2\35\2\0\1\35"+
    "\7\0\14\35\1\u02fc\16\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u02fd\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\12\35\1\u02fe\20\35\23\0\2\35\2\0\1\35"+
    "\7\0\4\35\1\u02ff\26\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u0300\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\16\35\1\u0301\14\35\23\0\2\35\2\0\1\35"+
    "\7\0\11\35\1\u0302\21\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u0303\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u0304\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\23\35\1\u0305\7\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\u0306\32\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u0307\21\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u0308\24\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u0309\21\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u030a\23\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u030b\24\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u030c\23\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u030d\23\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u030e\21\35\23\0\2\35\2\0\1\35\7\0\1\u030f"+
    "\32\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u0310"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u0311"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u0312"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\1\u0313\32\35"+
    "\23\0\2\35\2\0\1\35\7\0\27\35\1\u0314\3\35"+
    "\23\0\2\35\2\0\1\35\7\0\11\35\1\u0315\21\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u0316\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u0317\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u0318\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u0319\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\16\35\1\u031a\14\35"+
    "\23\0\2\35\2\0\1\35\7\0\16\35\1\u031b\14\35"+
    "\23\0\2\35\2\0\1\35\7\0\4\35\1\u031c\26\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u031d\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u031e\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u031f\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\13\35\1\u0320\17\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\u0321\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\11\35\1\u0322\21\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u0323\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u0324\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\16\35\1\u0325\14\35"+
    "\23\0\2\35\2\0\1\35\7\0\27\35\1\u0326\3\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u0327\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u0328\24\35"+
    "\23\0\2\35\2\0\1\35\65\0\1\u0268\13\0\5\35"+
    "\1\u0329\25\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u032a\24\35\23\0\2\35\2\0\1\35\7\0\1\u032b"+
    "\32\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u032c"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u032d"+
    "\20\35\23\0\2\35\2\0\1\35\7\0\23\35\1\u032e"+
    "\7\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u032f"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0330"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0331"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u0332"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\2\35\1\u0333"+
    "\30\35\23\0\2\35\2\0\1\35\7\0\3\35\1\u0334"+
    "\27\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u0335"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0336"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\13\35\1\u0337"+
    "\17\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u0338"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\3\35\1\u0339"+
    "\27\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u033a"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\4\35\1\u033b"+
    "\26\35\23\0\2\35\2\0\1\35\7\0\1\u033c\32\35"+
    "\23\0\2\35\2\0\1\35\7\0\26\35\1\u033d\4\35"+
    "\23\0\2\35\2\0\1\35\7\0\3\35\1\u033e\27\35"+
    "\23\0\2\35\2\0\1\35\7\0\11\35\1\u033f\21\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\u0340\32\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u0341\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\13\35\1\u0342\17\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u0343\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\6\35\1\u0344\24\35\23\0"+
    "\2\35\2\0\1\35\7\0\25\35\1\u0345\5\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\u0346\32\35\23\0\2\35"+
    "\2\0\1\35\7\0\12\35\1\u0347\20\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\u0348\32\35\23\0\2\35\2\0"+
    "\1\35\7\0\3\35\1\u0349\27\35\23\0\2\35\2\0"+
    "\1\35\7\0\26\35\1\u034a\4\35\23\0\2\35\2\0"+
    "\1\35\7\0\5\35\1\u034b\25\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u034c\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\u034d\32\35\23\0\2\35\2\0\1\35"+
    "\7\0\12\35\1\u034e\20\35\23\0\2\35\2\0\1\35"+
    "\7\0\3\35\1\u034f\27\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u0350\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\24\35\1\u0351\6\35\23\0\2\35\2\0\1\35"+
    "\7\0\3\35\1\u0352\27\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u0353\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u0354\30\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u0355\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\14\35\1\u0356\16\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u0357\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u0358\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u0359\27\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u035a\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\u035b\3\35\1\u035c\26\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u035d\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u035e\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u035f\27\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0360\23\35\23\0\2\35\2\0\1\35\37\0"+
    "\1\u0361\41\0\4\35\1\u0362\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u0363\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\10\35\1\u0364\22\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u0365\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u0366\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u0367\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\13\35\1\u0368\17\35\23\0\2\35\2\0"+
    "\1\35\7\0\3\35\1\u0369\27\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u036a\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u036b\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u036c\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\14\35\1\u036d\16\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u036e\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u036f\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\10\35\1\u0370\22\35\23\0\2\35\2\0"+
    "\1\35\7\0\14\35\1\u0371\16\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u0372\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u0373\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u0374\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u0375\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\14\35\1\u0376\16\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u0377\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u0378\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\10\35\1\u0379\22\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u037a\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\23\35\1\u037b\7\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u037c\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u037d\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u037e\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u037f\15\35\1\u0380\12\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u0381\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\13\35\1\u0382\17\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\u0383\32\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\u0384\32\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u0385\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u0386\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\u0387\32\35\23\0\2\35\2\0\1\35"+
    "\7\0\12\35\1\u0388\20\35\23\0\2\35\2\0\1\35"+
    "\7\0\10\35\1\u0389\22\35\23\0\2\35\2\0\1\35"+
    "\7\0\5\35\1\u038a\25\35\23\0\2\35\2\0\1\35"+
    "\7\0\27\35\1\u038b\3\35\23\0\2\35\2\0\1\35"+
    "\7\0\11\35\1\u038c\21\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u038d\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u038e\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u038f\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u0390\27\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u0391\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0392\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\14\35\1\u0393\16\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\u0394\32\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u0395\26\35\23\0\2\35\2\0\1\35\7\0\14\35"+
    "\1\u0396\16\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u0397\27\35\23\0\2\35\2\0\1\35\7\0\12\35"+
    "\1\u0398\20\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u0399\21\35\23\0\2\35\2\0\1\35\7\0\12\35"+
    "\1\u039a\20\35\23\0\2\35\2\0\1\35\7\0\14\35"+
    "\1\u039b\16\35\23\0\2\35\2\0\1\35\7\0\1\u039c"+
    "\32\35\23\0\2\35\2\0\1\35\7\0\5\35\1\u039d"+
    "\25\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u039e"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u039f"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u03a0"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u03a1"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u03a2"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u03a3"+
    "\20\35\23\0\2\35\2\0\1\35\7\0\27\35\1\u03a4"+
    "\3\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u03a5"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u03a6"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\10\35\1\u03a7"+
    "\22\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u03a8"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\21\35\1\u03a9"+
    "\11\35\23\0\2\35\2\0\1\35\7\0\3\35\1\u03aa"+
    "\27\35\23\0\2\35\2\0\1\35\7\0\2\35\1\u03ab"+
    "\30\35\23\0\2\35\2\0\1\35\7\0\1\u03ac\32\35"+
    "\23\0\2\35\2\0\1\35\7\0\12\35\1\u03ad\20\35"+
    "\23\0\2\35\2\0\1\35\7\0\4\35\1\u03ae\26\35"+
    "\23\0\2\35\2\0\1\35\7\0\4\35\1\u03af\26\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\u03b0\32\35\23\0"+
    "\2\35\2\0\1\35\7\0\11\35\1\u03b1\21\35\23\0"+
    "\2\35\2\0\1\35\7\0\10\35\1\u03b2\22\35\23\0"+
    "\2\35\2\0\1\35\7\0\12\35\1\u03b3\20\35\23\0"+
    "\2\35\2\0\1\35\7\0\13\35\1\u03b4\17\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u03b5\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\2\35\1\u03b6\30\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u03b7\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\4\35\1\u03b8\26\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u03b9\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\3\35\1\u03ba\27\35\23\0"+
    "\2\35\2\0\1\35\7\0\12\35\1\u03bb\20\35\23\0"+
    "\2\35\2\0\1\35\7\0\6\35\1\u03bc\24\35\23\0"+
    "\2\35\2\0\1\35\7\0\20\35\1\u03bd\12\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u03be\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u03bf\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\u03c0\32\35\23\0\2\35"+
    "\2\0\1\35\7\0\21\35\1\u03c1\11\35\23\0\2\35"+
    "\2\0\1\35\7\0\11\35\1\u03c2\21\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\u03c3\32\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u03c4\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u03c5\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u03c6\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u03c7\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u03c8\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u03c9\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u03ca\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u03cb\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u03cc\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u03cd\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\14\35\1\u03ce\16\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u03cf\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u03d0\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u03d1\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\25\35\1\u03d2\5\35\23\0\2\35\2\0"+
    "\1\35\7\0\24\35\1\u03d3\6\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u03d4\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u03d5\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\3\35\1\u03d6\27\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u03d7\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u03d8\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u03d9\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\23\35\1\u03da\7\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u03db\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\24\35\1\u03dc\6\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u03dd\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u03de\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u03df\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\21\35\1\u03e0\11\35\23\0\2\35\2\0"+
    "\1\35\7\0\21\35\1\u03e1\11\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u03e2\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u03e3\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u03e4\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\u03e5\32\35\23\0\2\35\2\0\1\35"+
    "\7\0\4\35\1\u03e6\26\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u03e7\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\17\35\1\u03e8\13\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\u03e9\32\35\23\0\2\35\2\0\1\35\7\0\12\35"+
    "\1\u03ea\20\35\23\0\2\35\2\0\1\35\7\0\12\35"+
    "\1\u03eb\20\35\23\0\2\35\2\0\1\35\7\0\10\35"+
    "\1\u03ec\22\35\23\0\2\35\2\0\1\35\7\0\1\u03ed"+
    "\32\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u03ee"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u03ef"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u03f0"+
    "\20\35\23\0\2\35\2\0\1\35\16\0\1\u03f1\62\0"+
    "\1\u03f2\32\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u03f3\24\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u03f4\23\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u03f5\21\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u03f6\23\35\23\0\2\35\2\0\1\35\7\0\21\35"+
    "\1\u03f7\11\35\23\0\2\35\2\0\1\35\7\0\10\35"+
    "\1\u03f8\22\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u03f9\1\35\1\u03fa\21\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\u03fb\32\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u03fc\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\5\35\1\u03fd\25\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u03fe\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u03ff\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\23\35\1\u0400\7\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0401\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\14\35\1\u0402\16\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u0403\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u0404\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0405\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\3\35\1\u0406\27\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u0407\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u0408\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0409\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\u040a\32\35\23\0\2\35\2\0\1\35\7\0\14\35"+
    "\1\u040b\16\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u040c\23\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u040d\26\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u040e\24\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u040f\24\35\23\0\2\35\2\0\1\35\7\0\1\u0410"+
    "\32\35\23\0\2\35\2\0\1\35\7\0\4\35\1\u0411"+
    "\26\35\23\0\2\35\2\0\1\35\7\0\1\u0412\32\35"+
    "\23\0\2\35\2\0\1\35\7\0\22\35\1\u0413\10\35"+
    "\23\0\2\35\2\0\1\35\7\0\2\35\1\u0414\30\35"+
    "\23\0\2\35\2\0\1\35\7\0\10\35\1\u0415\22\35"+
    "\23\0\2\35\2\0\1\35\7\0\2\35\1\u0416\30\35"+
    "\23\0\2\35\2\0\1\35\7\0\10\35\1\u0417\22\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\35\1\u0418\21\35"+
    "\1\u0419\7\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u041a\23\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u041b\26\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u041c\24\35\23\0\2\35\2\0\1\35\7\0\1\u041d"+
    "\6\35\1\u041e\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\2\35\1\u041f\30\35\23\0\2\35\2\0\1\35\7\0"+
    "\10\35\1\u0420\22\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\35\1\u0421\31\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u0422\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\14\35\1\u0423\16\35\23\0\2\35\2\0\1\35\7\0"+
    "\10\35\1\u0424\22\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u0425\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\13\35\1\u0426\17\35\23\0\2\35\2\0\1\35\7\0"+
    "\30\35\1\u0427\2\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u0428\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\10\35\1\u0429\22\35\23\0\2\35\2\0\1\35\7\0"+
    "\20\35\1\u042a\12\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u042b\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\u042c\32\35\23\0\2\35\2\0\1\35\7\0\12\35"+
    "\1\u042d\20\35\23\0\2\35\2\0\1\35\7\0\10\35"+
    "\1\u042e\22\35\23\0\2\35\2\0\1\35\7\0\14\35"+
    "\1\u042f\16\35\23\0\2\35\2\0\1\35\7\0\21\35"+
    "\1\u0430\11\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u0431\26\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u0432\27\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u0433\24\35\23\0\2\35\2\0\1\35\7\0\5\35"+
    "\1\u0434\25\35\23\0\2\35\2\0\1\35\7\0\20\35"+
    "\1\u0435\12\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u0436\21\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u0437\23\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u0438\23\35\23\0\2\35\2\0\1\35\7\0\15\35"+
    "\1\u0439\15\35\23\0\2\35\2\0\1\35\7\0\14\35"+
    "\1\u043a\16\35\23\0\2\35\2\0\1\35\7\0\33\35"+
    "\1\u043b\22\0\2\35\2\0\1\35\7\0\7\35\1\u043c"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u043d"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u043e"+
    "\20\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u043f"+
    "\20\35\23\0\2\35\2\0\1\35\7\0\3\35\1\u0440"+
    "\27\35\23\0\2\35\2\0\1\35\7\0\10\35\1\u0441"+
    "\22\35\23\0\2\35\2\0\1\35\7\0\30\35\1\u0442"+
    "\2\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0443"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\3\35\1\u0444"+
    "\27\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0445"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\17\35\1\u0446"+
    "\13\35\23\0\2\35\2\0\1\35\7\0\21\35\1\u0447"+
    "\11\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u0448"+
    "\20\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u0449"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\25\35\1\u044a"+
    "\5\35\23\0\2\35\2\0\1\35\7\0\15\35\1\u044b"+
    "\15\35\23\0\2\35\2\0\1\35\7\0\10\35\1\u044c"+
    "\22\35\23\0\2\35\2\0\1\35\7\0\5\35\1\u044d"+
    "\25\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u044e"+
    "\20\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u044f"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0450"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u0451"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\11\35\1\u0452"+
    "\21\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0453"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\2\35\1\u0454"+
    "\30\35\23\0\2\35\2\0\1\35\7\0\1\u0455\32\35"+
    "\23\0\2\35\2\0\1\35\7\0\2\35\1\u0456\30\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\u0457\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u0458\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u0459\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\26\35\1\u045a\4\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\u045b\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u045c\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\26\35\1\u045d\4\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u045e\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\21\35\1\u045f\11\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u0460\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u0461\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u0462\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\20\35\1\u0463\12\35"+
    "\23\0\2\35\2\0\1\35\17\0\1\u0464\61\0\4\35"+
    "\1\u0465\26\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u0466\27\35\23\0\2\35\2\0\1\35\7\0\13\35"+
    "\1\u0467\17\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u0468\23\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u0469\27\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u046a\21\35\23\0\2\35\2\0\1\35\7\0\2\35"+
    "\1\u046b\30\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u046c\23\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u046d\21\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u046e\27\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u046f\23\35\23\0\2\35\2\0\1\35\7\0\25\35"+
    "\1\u0470\5\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u0471\23\35\23\0\2\35\2\0\1\35\7\0\12\35"+
    "\1\u0472\20\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u0473\21\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u0474\27\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u0475\24\35\23\0\2\35\2\0\1\35\7\0\10\35"+
    "\1\u0476\22\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u0477\26\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u0478\26\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u0479\27\35\23\0\2\35\2\0\1\35\7\0\15\35"+
    "\1\u047a\15\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u047b\24\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u047c\26\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u047d\24\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u047e\23\35\23\0\2\35\2\0\1\35\7\0\1\u047f"+
    "\32\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0480"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u0481"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\1\35\1\u0482"+
    "\31\35\23\0\2\35\2\0\1\35\7\0\13\35\1\u0483"+
    "\17\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u0484"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u0485"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\5\35\1\u0486"+
    "\25\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0487"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\3\35\1\u0488"+
    "\27\35\23\0\2\35\2\0\1\35\7\0\22\35\1\u0489"+
    "\10\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u048a"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\10\35\1\u048b"+
    "\22\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u048c"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u048d"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u048e"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\21\35\1\u048f"+
    "\11\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u0490"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\10\35\1\u0491"+
    "\22\35\23\0\2\35\2\0\1\35\7\0\22\35\1\u0492"+
    "\10\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u0493"+
    "\20\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u0494"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0495"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\3\35\1\u0496"+
    "\27\35\23\0\2\35\2\0\1\35\7\0\21\35\1\u0497"+
    "\11\35\23\0\2\35\2\0\1\35\30\0\1\u0498\50\0"+
    "\30\35\1\u0499\2\35\23\0\2\35\2\0\1\35\7\0"+
    "\14\35\1\u049a\16\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u049b\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u049c\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\6\35\1\u049d\24\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u049e\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\1\u049f\32\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u04a0\24\35\23\0\2\35\2\0\1\35\7\0\21\35"+
    "\1\u04a1\11\35\23\0\2\35\2\0\1\35\7\0\10\35"+
    "\1\u04a2\22\35\23\0\2\35\2\0\1\35\7\0\5\35"+
    "\1\u04a3\25\35\23\0\2\35\2\0\1\35\7\0\1\u04a4"+
    "\32\35\23\0\2\35\2\0\1\35\7\0\2\35\1\u04a5"+
    "\17\35\1\u04a6\10\35\23\0\2\35\2\0\1\35\7\0"+
    "\2\35\1\u04a7\30\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u04a8\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\12\35\1\u04a9\20\35\23\0\2\35\2\0\1\35\7\0"+
    "\2\35\1\u04aa\30\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u04ab\23\35\23\0\2\35\2\0\1\35\7\0"+
    "\15\35\1\u04ac\15\35\23\0\2\35\2\0\1\35\7\0"+
    "\30\35\1\u04ad\2\35\23\0\2\35\2\0\1\35\7\0"+
    "\23\35\1\u04ae\7\35\23\0\2\35\2\0\1\35\7\0"+
    "\15\35\1\u04af\15\35\23\0\2\35\2\0\1\35\7\0"+
    "\23\35\1\u04b0\7\35\23\0\2\35\2\0\1\35\7\0"+
    "\25\35\1\u04b1\5\35\23\0\2\35\2\0\1\35\7\0"+
    "\11\35\1\u04b2\21\35\23\0\2\35\2\0\1\35\7\0"+
    "\7\35\1\u04b3\1\35\1\u04b4\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u04b5\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u04b6\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u04b7\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u04b8\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u04b9\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\3\35\1\u04ba\27\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u04bb\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\13\35\1\u04bc\17\35\23\0\2\35\2\0"+
    "\1\35\7\0\5\35\1\u04bd\1\u04be\4\35\1\u04bf\17\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\u04c0\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\21\35\1\u04c1\11\35"+
    "\23\0\2\35\2\0\1\35\7\0\12\35\1\u04c2\20\35"+
    "\23\0\2\35\2\0\1\35\7\0\12\35\1\u04c3\20\35"+
    "\23\0\2\35\2\0\1\35\7\0\11\35\1\u04c4\21\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u04c5\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\15\35\1\u04c6\15\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\u04c7\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\10\35\1\u04c8\14\35"+
    "\1\u04c9\5\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u04ca\23\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u04cb\23\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u04cc\24\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u04cd\27\35\23\0\2\35\2\0\1\35\7\0\4\35"+
    "\1\u04ce\26\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u04cf\21\35\23\0\2\35\2\0\1\35\7\0\6\35"+
    "\1\u04d0\24\35\23\0\2\35\2\0\1\35\7\0\10\35"+
    "\1\u04d1\22\35\23\0\2\35\2\0\1\35\7\0\14\35"+
    "\1\u04d2\16\35\23\0\2\35\2\0\1\35\7\0\3\35"+
    "\1\u04d3\27\35\23\0\2\35\2\0\1\35\7\0\5\35"+
    "\1\u04d4\25\35\23\0\2\35\2\0\1\35\7\0\11\35"+
    "\1\u04d5\21\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u04d6\23\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u04d7\23\35\23\0\2\35\2\0\1\35\7\0\12\35"+
    "\1\u04d8\20\35\23\0\2\35\2\0\1\35\7\0\7\35"+
    "\1\u04d9\23\35\23\0\2\35\2\0\1\35\23\0\1\u04da"+
    "\55\0\6\35\1\u04db\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\3\35\1\u04dc\27\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u04dd\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u04de\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\16\35\1\u04df\14\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u04e0\30\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u04e1\30\35\23\0\2\35\2\0\1\35"+
    "\7\0\5\35\1\u04e2\25\35\23\0\2\35\2\0\1\35"+
    "\7\0\11\35\1\u04e3\21\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u04e4\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u04e5\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\21\35\1\u04e6\11\35\23\0\2\35\2\0\1\35"+
    "\7\0\21\35\1\u04e7\11\35\23\0\2\35\2\0\1\35"+
    "\7\0\3\35\1\u04e8\27\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u04e9\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u04ea\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\4\35\1\u04eb\26\35\23\0\2\35\2\0\1\35"+
    "\7\0\16\35\1\u04ec\7\35\1\u04ed\4\35\23\0\2\35"+
    "\2\0\1\35\7\0\3\35\1\u04ee\27\35\23\0\2\35"+
    "\2\0\1\35\7\0\3\35\1\u04ef\27\35\23\0\2\35"+
    "\2\0\1\35\7\0\14\35\1\u04f0\16\35\23\0\2\35"+
    "\2\0\1\35\7\0\6\35\1\u04f1\24\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\u04f2\32\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u04f3\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\13\35\1\u04f4\17\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u04f5\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u04f6\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\u04f7\32\35\23\0\2\35\2\0\1\35"+
    "\7\0\25\35\1\u04f8\5\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u04f9\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u04fa\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\20\35\1\u04fb\12\35\23\0\2\35\2\0\1\35"+
    "\7\0\3\35\1\u04fc\27\35\23\0\2\35\2\0\1\35"+
    "\7\0\11\35\1\u04fd\21\35\23\0\2\35\2\0\1\35"+
    "\7\0\14\35\1\u04fe\16\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u04ff\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\14\35\1\u0500\16\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u0501\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\10\35\1\u0502\22\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u0503\23\35\23\0\2\35\2\0\1\35"+
    "\7\0\6\35\1\u0504\24\35\23\0\2\35\2\0\1\35"+
    "\7\0\4\35\1\u0505\26\35\23\0\2\35\2\0\1\35"+
    "\7\0\14\35\1\u0506\16\35\23\0\2\35\2\0\1\35"+
    "\7\0\3\35\1\u0507\27\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u0508\30\35\23\0\2\35\2\0\1\35"+
    "\7\0\2\35\1\u0509\30\35\23\0\2\35\2\0\1\35"+
    "\12\0\1\u050a\66\0\14\35\1\u050b\16\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\u050c\32\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u050d\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u050e\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\13\35\1\u050f\17\35\23\0\2\35\2\0"+
    "\1\35\7\0\26\35\1\u0510\4\35\23\0\2\35\2\0"+
    "\1\35\7\0\15\35\1\u0511\15\35\23\0\2\35\2\0"+
    "\1\35\7\0\14\35\1\u0512\16\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u0513\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\5\35\1\u0514\25\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u0515\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\3\35\1\u0516\27\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u0517\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u0518\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u0519\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u051a\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u051b\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\35\1\u051c\31\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u051d\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u051e\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\26\35\1\u051f\4\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u0520\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u0521\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\16\35\1\u0522\14\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u0523\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u0524\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u0525\20\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u0526\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u0527\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\13\35\1\u0528\17\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u0529\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\12\35\1\u052a\20\35\23\0\2\35\2\0"+
    "\1\35\14\0\1\u052b\64\0\1\35\1\u052c\31\35\23\0"+
    "\2\35\2\0\1\35\7\0\3\35\1\u052d\27\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u052e\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\11\35\1\u052f\21\35\23\0"+
    "\2\35\2\0\1\35\7\0\11\35\1\u0530\21\35\23\0"+
    "\2\35\2\0\1\35\7\0\23\35\1\u0531\7\35\23\0"+
    "\2\35\2\0\1\35\7\0\16\35\1\u0532\14\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u0533\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\5\35\1\u0534\25\35\23\0"+
    "\2\35\2\0\1\35\7\0\12\35\1\u0535\20\35\23\0"+
    "\2\35\2\0\1\35\7\0\4\35\1\u0536\26\35\23\0"+
    "\2\35\2\0\1\35\7\0\12\35\1\u0537\20\35\23\0"+
    "\2\35\2\0\1\35\7\0\14\35\1\u0538\16\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u0539\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u053a\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u053b\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\2\35\1\u053c\30\35\23\0"+
    "\2\35\2\0\1\35\7\0\13\35\1\u053d\17\35\23\0"+
    "\2\35\2\0\1\35\32\0\1\u053e\46\0\4\35\1\u053f"+
    "\26\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u0540"+
    "\20\35\23\0\2\35\2\0\1\35\7\0\6\35\1\u0541"+
    "\24\35\23\0\2\35\2\0\1\35\7\0\4\35\1\u0542"+
    "\26\35\23\0\2\35\2\0\1\35\7\0\16\35\1\u0543"+
    "\14\35\23\0\2\35\2\0\1\35\7\0\10\35\1\u0544"+
    "\22\35\23\0\2\35\2\0\1\35\7\0\14\35\1\u0545"+
    "\16\35\23\0\2\35\2\0\1\35\7\0\5\35\1\u0546"+
    "\25\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u0547"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\21\35\1\u0548"+
    "\11\35\23\0\2\35\2\0\1\35\7\0\2\35\1\u0549"+
    "\30\35\23\0\2\35\2\0\1\35\7\0\12\35\1\u054a"+
    "\20\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u054b"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\7\35\1\u054c"+
    "\23\35\23\0\2\35\2\0\1\35\7\0\1\u054d\32\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\u054e\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\7\35\1\u054f\23\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u0550\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\6\35\1\u0551\24\35"+
    "\23\0\2\35\2\0\1\35\7\0\21\35\1\u0552\11\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\u0553\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\14\35\1\u0554\16\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\u0555\32\35\23\0"+
    "\2\35\2\0\1\35\7\0\7\35\1\u0556\23\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\u0557\32\35\23\0\2\35"+
    "\2\0\1\35\7\0\6\35\1\u0558\24\35\23\0\2\35"+
    "\2\0\1\35\7\0\6\35\1\u0559\24\35\23\0\2\35"+
    "\2\0\1\35\7\0\11\35\1\u055a\21\35\23\0\2\35"+
    "\2\0\1\35\7\0\2\35\1\u055b\30\35\23\0\2\35"+
    "\2\0\1\35\7\0\26\35\1\u055c\4\35\23\0\2\35"+
    "\2\0\1\35\7\0\16\35\1\u055d\14\35\23\0\2\35"+
    "\2\0\1\35\7\0\6\35\1\u055e\24\35\23\0\2\35"+
    "\2\0\1\35\7\0\7\35\1\u055f\23\35\23\0\2\35"+
    "\2\0\1\35\7\0\23\35\1\u0560\7\35\23\0\2\35"+
    "\2\0\1\35\7\0\15\35\1\u0561\15\35\23\0\2\35"+
    "\2\0\1\35\7\0\6\35\1\u0562\24\35\23\0\2\35"+
    "\2\0\1\35\7\0\6\35\1\u0563\4\35\1\u0564\17\35"+
    "\23\0\2\35\2\0\1\35\7\0\1\u0565\32\35\23\0"+
    "\2\35\2\0\1\35\7\0\1\u0566\32\35\23\0\2\35"+
    "\2\0\1\35\7\0\7\35\1\u0567\23\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\35\1\u0568\31\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\35\1\u0569\31\35\23\0\2\35"+
    "\2\0\1\35\7\0\6\35\1\u056a\24\35\23\0\2\35"+
    "\2\0\1\35\7\0\4\35\1\u056b\26\35\23\0\2\35"+
    "\2\0\1\35\7\0\4\35\1\u056c\26\35\23\0\2\35"+
    "\2\0\1\35\7\0\1\u056d\32\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u056e\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\7\35\1\u056f\23\35\23\0\2\35\2\0"+
    "\1\35\7\0\11\35\1\u0570\21\35\23\0\2\35\2\0"+
    "\1\35\7\0\4\35\1\u0571\26\35\23\0\2\35\2\0"+
    "\1\35\7\0\2\35\1\u0572\30\35\23\0\2\35\2\0"+
    "\1\35\7\0\6\35\1\u0573\24\35\23\0\2\35\2\0"+
    "\1\35\7\0\1\u0574\32\35\23\0\2\35\2\0\1\35"+
    "\7\0\1\35\1\u0575\31\35\23\0\2\35\2\0\1\35"+
    "\7\0\4\35\1\u0576\26\35\23\0\2\35\2\0\1\35"+
    "\7\0\7\35\1\u0577\23\35\23\0\2\35\2\0\1\35";

  private static int [] zzUnpackTrans() {
    int [] result = new int[64264];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\34\1\1\11\5\1\3\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\4\1\1\0"+
    "\1\1\1\0\1\11\167\1\11\11\1\1\1\0\1\11"+
    "\1\0\1\1\2\0\1\11\304\1\1\0\1\11\117\1"+
    "\1\0\217\1\1\0\106\1\1\0\262\1\1\0\217\1"+
    "\1\0\111\1\1\0\50\1\1\11\63\1\1\0\101\1"+
    "\1\0\57\1\1\0\40\1\1\0\22\1\1\11\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1399];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int line;
    public int column;
    public int length;

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 91: 
          { return symbol(sym.TIME, new String("RESERVED WORD: " + yytext()));
          }
        case 352: break;
        case 196: 
          { return symbol(sym.DOUBLE, new String("RESERVED WORD: " + yytext()));
          }
        case 353: break;
        case 184: 
          { return symbol(sym.UNIQUE, new String("RESERVED WORD: " + yytext()));
          }
        case 354: break;
        case 38: 
          { return symbol(sym.GO, new String("RESERVED WORD: " + yytext()));
          }
        case 355: break;
        case 269: 
          { return symbol(sym.DESCRIBE, new String("RESERVED WORD: " + yytext()));
          }
        case 356: break;
        case 82: 
          { return symbol(sym.SIZE, new String("RESERVED WORD: " + yytext()));
          }
        case 357: break;
        case 112: 
          { return symbol(sym.DROP, new String("RESERVED WORD: " + yytext()));
          }
        case 358: break;
        case 238: 
          { return symbol(sym.RESTORE, new String("RESERVED WORD: " + yytext()));
          }
        case 359: break;
        case 260: 
          { return symbol(sym.EXTERNAL, new String("RESERVED WORD: " + yytext()));
          }
        case 360: break;
        case 127: 
          { return symbol(sym.WHEN, new String("RESERVED WORD: " + yytext()));
          }
        case 361: break;
        case 81: 
          { return symbol(sym.SOME, new String("RESERVED WORD: " + yytext()));
          }
        case 362: break;
        case 194: 
          { return symbol(sym.INSERT, new String("RESERVED WORD: " + yytext()));
          }
        case 363: break;
        case 162: 
          { return symbol(sym.PRINT, new String("RESERVED WORD: " + yytext()));
          }
        case 364: break;
        case 176: 
          { return symbol(sym.BROWSE, new String("RESERVED WORD: " + yytext()));
          }
        case 365: break;
        case 45: 
          { return symbol(sym.OP_PARENTESIS, yytext());
          }
        case 366: break;
        case 26: 
          { return symbol(sym.OP_OR, yytext());
          }
        case 367: break;
        case 43: 
          { return symbol(sym.OP_AND, yytext());
          }
        case 368: break;
        case 114: 
          { return symbol(sym.RULE, new String("RESERVED WORD: " + yytext()));
          }
        case 369: break;
        case 206: 
          { return symbol(sym.PUBLIC, new String("RESERVED WORD: " + yytext()));
          }
        case 370: break;
        case 137: 
          { return symbol(sym.OUTER, new String("RESERVED WORD: " + yytext()));
          }
        case 371: break;
        case 142: 
          { return symbol(sym.USAGE, new String("RESERVED WORD: " + yytext()));
          }
        case 372: break;
        case 145: 
          { return symbol(sym.UPPER, new String("RESERVED WORD: " + yytext()));
          }
        case 373: break;
        case 64: 
          { return symbol(sym.USE, new String("RESERVED WORD: " + yytext()));
          }
        case 374: break;
        case 190: 
          { return symbol(sym.COLUMN, new String("RESERVED WORD: " + yytext()));
          }
        case 375: break;
        case 300: 
          { return symbol(sym.PRECISION, new String("RESERVED WORD: " + yytext()));
          }
        case 376: break;
        case 198: 
          { return symbol(sym.DELETE, new String("RESERVED WORD: " + yytext()));
          }
        case 377: break;
        case 10: 
          { return symbol(sym.OP_ASIGNAR, yytext());
          }
        case 378: break;
        case 8: 
          { return symbol(sym.OP_PORCENTAJE, yytext());
          }
        case 379: break;
        case 13: 
          { return symbol(sym.OP_PUNTOYCOMA, yytext());
          }
        case 380: break;
        case 294: 
          { return symbol(sym.INTERSECT, new String("RESERVED WORD: " + yytext()));
          }
        case 381: break;
        case 211: 
          { return symbol(sym.SETUSER, new String("RESERVED WORD: " + yytext()));
          }
        case 382: break;
        case 197: 
          { return symbol(sym.DOMAIN, new String("RESERVED WORD: " + yytext()));
          }
        case 383: break;
        case 215: 
          { return symbol(sym.OFFSETS, new String("RESERVED WORD: " + yytext()));
          }
        case 384: break;
        case 5: 
          { return symbol(sym.OP_RESTA, yytext());
          }
        case 385: break;
        case 117: 
          { return symbol(sym.YEAR, new String("RESERVED WORD: " + yytext()));
          }
        case 386: break;
        case 339: 
          { return symbol(sym.SECURITYAUDIT, new String("RESERVED WORD: " + yytext()));
          }
        case 387: break;
        case 213: 
          { return symbol(sym.SQLCODE, new String("RESERVED WORD: " + yytext()));
          }
        case 388: break;
        case 229: 
          { return symbol(sym.CURRENT, new String("RESERVED WORD: " + yytext()));
          }
        case 389: break;
        case 236: 
          { return symbol(sym.DECIMAL, new String("RESERVED WORD: " + yytext()));
          }
        case 390: break;
        case 48: 
          { return symbol(sym.FLOAT, yytext());
          }
        case 391: break;
        case 102: 
          { return symbol(sym.INTO, new String("RESERVED WORD: " + yytext()));
          }
        case 392: break;
        case 150: 
          { return symbol(sym.CHECK, new String("RESERVED WORD: " + yytext()));
          }
        case 393: break;
        case 329: 
          { return symbol(sym.RECONFIGURE, new String("RESERVED WORD: " + yytext()));
          }
        case 394: break;
        case 325: 
          { return symbol(sym.INSENSITIVE, new String("RESERVED WORD: " + yytext()));
          }
        case 395: break;
        case 46: 
          { return symbol(sym.OP_LLAVES, yytext());
          }
        case 396: break;
        case 158: 
          { return symbol(sym.GRANT, new String("RESERVED WORD: " + yytext()));
          }
        case 397: break;
        case 263: 
          { return symbol(sym.CONTAINS, new String("RESERVED WORD: " + yytext()));
          }
        case 398: break;
        case 164: 
          { return symbol(sym.WHERE, new String("RESERVED WORD: " + yytext()));
          }
        case 399: break;
        case 204: 
          { return symbol(sym.GLOBAL, new String("RESERVED WORD: " + yytext()));
          }
        case 400: break;
        case 96: 
          { return symbol(sym.ELSE, new String("RESERVED WORD: " + yytext()));
          }
        case 401: break;
        case 160: 
          { return symbol(sym.PIVOT, new String("RESERVED WORD: " + yytext()));
          }
        case 402: break;
        case 101: 
          { return symbol(sym.CHAR, new String("RESERVED WORD: " + yytext()));
          }
        case 403: break;
        case 247: 
          { return symbol(sym.FOREIGN, new String("RESERVED WORD: " + yytext()));
          }
        case 404: break;
        case 314: 
          { return symbol(sym.ROWGUIDCOL, new String("RESERVED WORD: " + yytext()));
          }
        case 405: break;
        case 148: 
          { return symbol(sym.CLOSE, new String("RESERVED WORD: " + yytext()));
          }
        case 406: break;
        case 54: 
          { return symbol(sym.ANY, new String("RESERVED WORD: " + yytext()));
          }
        case 407: break;
        case 94: 
          { return symbol(sym.TRIM, new String("RESERVED WORD: " + yytext()));
          }
        case 408: break;
        case 246: 
          { return symbol(sym.FORTRAN, new String("RESERVED WORD: " + yytext()));
          }
        case 409: break;
        case 130: 
          { return symbol(sym.FROM, new String("RESERVED WORD: " + yytext()));
          }
        case 410: break;
        case 147: 
          { return symbol(sym.COUNT, new String("RESERVED WORD: " + yytext()));
          }
        case 411: break;
        case 186: 
          { return symbol(sym.ESCAPE, new String("RESERVED WORD: " + yytext()));
          }
        case 412: break;
        case 189: 
          { return symbol(sym.EXISTS, new String("RESERVED WORD: " + yytext()));
          }
        case 413: break;
        case 27: 
          { return symbol(sym.AS, new String("RESERVED WORD: " + yytext()));
          }
        case 414: break;
        case 234: 
          { return symbol(sym.NUMERIC, new String("RESERVED WORD: " + yytext()));
          }
        case 415: break;
        case 175: 
          { return symbol(sym.BACKUP, new String("RESERVED WORD: " + yytext()));
          }
        case 416: break;
        case 86: 
          { return symbol(sym.LAST, new String("RESERVED WORD: " + yytext()));
          }
        case 417: break;
        case 71: 
          { return symbol(sym.GET, new String("RESERVED WORD: " + yytext()));
          }
        case 418: break;
        case 70: 
          { return symbol(sym.DEC, new String("RESERVED WORD: " + yytext()));
          }
        case 419: break;
        case 107: 
          { return symbol(sym.DBCC, new String("RESERVED WORD: " + yytext()));
          }
        case 420: break;
        case 319: 
          { return symbol(sym.TABLESAMPLE, new String("RESERVED WORD: " + yytext()));
          }
        case 421: break;
        case 140: 
          { return symbol(sym.LOWER, new String("RESERVED WORD: " + yytext()));
          }
        case 422: break;
        case 202: 
          { return symbol(sym.HAVING, new String("RESERVED WORD: " + yytext()));
          }
        case 423: break;
        case 212: 
          { return symbol(sym.SECTION, new String("RESERVED WORD: " + yytext()));
          }
        case 424: break;
        case 261: 
          { return symbol(sym.CASCADED, new String("RESERVED WORD: " + yytext()));
          }
        case 425: break;
        case 103: 
          { return symbol(sym.NONE, new String("RESERVED WORD: " + yytext()));
          }
        case 426: break;
        case 25: 
          { /*se ignoran los comentarios de linea*/
          }
        case 427: break;
        case 100: 
          { return symbol(sym.CASE, new String("RESERVED WORD: " + yytext()));
          }
        case 428: break;
        case 49: 
          { return symbol(sym.STRING, yytext());
          }
        case 429: break;
        case 221: 
          { return symbol(sym.EXTRACT, new String("RESERVED WORD: " + yytext()));
          }
        case 430: break;
        case 209: 
          { return symbol(sym.BETWEEN, new String("RESERVED WORD: " + yytext()));
          }
        case 431: break;
        case 220: 
          { return symbol(sym.TRIGGER, new String("RESERVED WORD: " + yytext()));
          }
        case 432: break;
        case 109: 
          { return symbol(sym.DESC, new String("RESERVED WORD: " + yytext()));
          }
        case 433: break;
        case 230: 
          { return symbol(sym.INTEGER, new String("RESERVED WORD: " + yytext()));
          }
        case 434: break;
        case 335: 
          { return symbol(sym.CURRENT_DATE, new String("RESERVED WORD: " + yytext()));
          }
        case 435: break;
        case 255: 
          { return symbol(sym.LANGUAGE, new String("RESERVED WORD: " + yytext()));
          }
        case 436: break;
        case 28: 
          { return symbol(sym.AT, new String("RESERVED WORD: " + yytext()));
          }
        case 437: break;
        case 193: 
          { return symbol(sym.CREATE, new String("RESERVED WORD: " + yytext()));
          }
        case 438: break;
        case 105: 
          { return symbol(sym.NEXT, new String("RESERVED WORD: " + yytext()));
          }
        case 439: break;
        case 210: 
          { return symbol(sym.SESSION, new String("RESERVED WORD: " + yytext()));
          }
        case 440: break;
        case 285: 
          { return symbol(sym.OPENQUERY, new String("RESERVED WORD: " + yytext()));
          }
        case 441: break;
        case 179: 
          { return symbol(sym.SCROLL, new String("RESERVED WORD: " + yytext()));
          }
        case 442: break;
        case 153: 
          { return symbol(sym.INPUT, new String("RESERVED WORD: " + yytext()));
          }
        case 443: break;
        case 301: 
          { return symbol(sym.WRITETEXT, new String("RESERVED WORD: " + yytext()));
          }
        case 444: break;
        case 18: 
          { return symbol(sym.OP_PARENTESIS_IZQ, yytext());
          }
        case 445: break;
        case 134: 
          { return symbol(sym.BREAK, new String("RESERVED WORD: " + yytext()));
          }
        case 446: break;
        case 152: 
          { return symbol(sym.INDEX, new String("RESERVED WORD: " + yytext()));
          }
        case 447: break;
        case 328: 
          { return symbol(sym.DISTRIBUTED, new String("RESERVED WORD: " + yytext()));
          }
        case 448: break;
        case 88: 
          { return symbol(sym.LEFT, new String("RESERVED WORD: " + yytext()));
          }
        case 449: break;
        case 4: 
          { /*lleva la cuenta de lineas*/
          }
        case 450: break;
        case 273: 
          { return symbol(sym.ROWCOUNT, new String("RESERVED WORD: " + yytext()));
          }
        case 451: break;
        case 16: 
          { return symbol(sym.OP_CORCHETE_IZQ, yytext());
          }
        case 452: break;
        case 291: 
          { return symbol(sym.CLUSTERED, new String("RESERVED WORD: " + yytext()));
          }
        case 453: break;
        case 89: 
          { return symbol(sym.LIKE, new String("RESERVED WORD: " + yytext()));
          }
        case 454: break;
        case 14: 
          { return symbol(sym.OP_COMA, yytext());
          }
        case 455: break;
        case 44: 
          { return symbol(sym.OP_CORCHETES, yytext());
          }
        case 456: break;
        case 272: 
          { return symbol(sym.ROLLBACK, new String("RESERVED WORD: " + yytext()));
          }
        case 457: break;
        case 286: 
          { return symbol(sym.TEMPORARY, new String("RESERVED WORD: " + yytext()));
          }
        case 458: break;
        case 309: 
          { return symbol(sym.CHECKPOINT, new String("RESERVED WORD: " + yytext()));
          }
        case 459: break;
        case 73: 
          { return symbol(sym.PAD, new String("RESERVED WORD: " + yytext()));
          }
        case 460: break;
        case 79: 
          { return symbol(sym.BULK, new String("RESERVED WORD: " + yytext()));
          }
        case 461: break;
        case 305: 
          { return symbol(sym.OPENROWSET, new String("RESERVED WORD: " + yytext()));
          }
        case 462: break;
        case 267: 
          { return symbol(sym.NATIONAL, new String("RESERVED WORD: " + yytext()));
          }
        case 463: break;
        case 69: 
          { return symbol(sym.DAY, new String("RESERVED WORD: " + yytext()));
          }
        case 464: break;
        case 35: 
          { return symbol(sym.IN, new String("RESERVED WORD: " + yytext()));
          }
        case 465: break;
        case 115: 
          { return symbol(sym.REAL, new String("RESERVED WORD: " + yytext()));
          }
        case 466: break;
        case 132: 
          { return symbol(sym.ALTER, new String("RESERVED WORD: " + yytext()));
          }
        case 467: break;
        case 250: 
          { return symbol(sym.SHUTDOWN, new String("RESERVED WORD: " + yytext()));
          }
        case 468: break;
        case 118: 
          { return symbol(sym.HOUR, new String("RESERVED WORD: " + yytext()));
          }
        case 469: break;
        case 283: 
          { return symbol(sym.ASSERTION, new String("RESERVED WORD: " + yytext()));
          }
        case 470: break;
        case 302: 
          { return symbol(sym.BIT_LENGTH, new String("RESERVED WORD: " + yytext()));
          }
        case 471: break;
        case 119: 
          { return symbol(sym.ZONE, new String("RESERVED WORD: " + yytext()));
          }
        case 472: break;
        case 216: 
          { return symbol(sym.LEADING, new String("RESERVED WORD: " + yytext()));
          }
        case 473: break;
        case 219: 
          { return symbol(sym.TSEQUAL, new String("RESERVED WORD: " + yytext()));
          }
        case 474: break;
        case 297: 
          { return symbol(sym.IMMEDIATE, new String("RESERVED WORD: " + yytext()));
          }
        case 475: break;
        case 121: 
          { return symbol(sym.GOTO, new String("RESERVED WORD: " + yytext()));
          }
        case 476: break;
        case 336: 
          { return symbol(sym.NONCLUSTERED, new String("RESERVED WORD: " + yytext()));
          }
        case 477: break;
        case 331: 
          { return symbol(sym.SESSION_USER, new String("RESERVED WORD: " + yytext()));
          }
        case 478: break;
        case 290: 
          { return symbol(sym.COLLATION, new String("RESERVED WORD: " + yytext()));
          }
        case 479: break;
        case 77: 
          { /*se ignoran los comentarios de bloque*/
          }
        case 480: break;
        case 9: 
          { return symbol(sym.OP_MENOR, yytext());
          }
        case 481: break;
        case 7: 
          { return symbol(sym.OP_SUMA, yytext());
          }
        case 482: break;
        case 22: 
          { return symbol(sym.OP_ARROBA, yytext());
          }
        case 483: break;
        case 61: 
          { return symbol(sym.SET, new String("RESERVED WORD: " + yytext()));
          }
        case 484: break;
        case 124: 
          { return symbol(sym.PROC, new String("RESERVED WORD: " + yytext()));
          }
        case 485: break;
        case 136: 
          { return symbol(sym.SQLCA, new String("RESERVED WORD: " + yytext()));
          }
        case 486: break;
        case 40: 
          { return symbol(sym.OP_IGUAL, yytext());
          }
        case 487: break;
        case 225: 
          { return symbol(sym.COLLATE, new String("RESERVED WORD: " + yytext()));
          }
        case 488: break;
        case 237: 
          { return symbol(sym.DEFAULT, new String("RESERVED WORD: " + yytext()));
          }
        case 489: break;
        case 295: 
          { return symbol(sym.INITIALLY, new String("RESERVED WORD: " + yytext()));
          }
        case 490: break;
        case 223: 
          { return symbol(sym.CASCADE, new String("RESERVED WORD: " + yytext()));
          }
        case 491: break;
        case 3: 
          { return symbol(sym.OP_MULTIPLICACION, yytext());
          }
        case 492: break;
        case 97: 
          { return symbol(sym.EXEC, new String("RESERVED WORD: " + yytext()));
          }
        case 493: break;
        case 350: 
          { return symbol(sym.SEMANTICSIMILARITYTABLE, new String("RESERVED WORD: " + yytext()));
          }
        case 494: break;
        case 207: 
          { return symbol(sym.MODULE, new String("RESERVED WORD: " + yytext()));
          }
        case 495: break;
        case 173: 
          { return symbol(sym.FIRST, new String("RESERVED WORD: " + yytext()));
          }
        case 496: break;
        case 169: 
          { return symbol(sym.FALSE, new String("RESERVED WORD: " + yytext()));
          }
        case 497: break;
        case 317: 
          { return symbol(sym.FILLFACTOR, new String("RESERVED WORD: " + yytext()));
          }
        case 498: break;
        case 201: 
          { return symbol(sym.REVERT, new String("RESERVED WORD: " + yytext()));
          }
        case 499: break;
        case 226: 
          { return symbol(sym.CONNECT, new String("RESERVED WORD: " + yytext()));
          }
        case 500: break;
        case 67: 
          { return symbol(sym.INT, new String("RESERVED WORD: " + yytext()));
          }
        case 501: break;
        case 34: 
          { return symbol(sym.IS, new String("RESERVED WORD: " + yytext()));
          }
        case 502: break;
        case 55: 
          { return symbol(sym.ADA, new String("RESERVED WORD: " + yytext()));
          }
        case 503: break;
        case 163: 
          { return symbol(sym.WRITE, new String("RESERVED WORD: " + yytext()));
          }
        case 504: break;
        case 111: 
          { return symbol(sym.DISK, new String("RESERVED WORD: " + yytext()));
          }
        case 505: break;
        case 159: 
          { return symbol(sym.GROUP, new String("RESERVED WORD: " + yytext()));
          }
        case 506: break;
        case 233: 
          { return symbol(sym.NOCHECK, new String("RESERVED WORD: " + yytext()));
          }
        case 507: break;
        case 23: 
          { return symbol(sym.OP_NUMERAL, yytext());
          }
        case 508: break;
        case 330: 
          { return symbol(sym.REPLICATION, new String("RESERVED WORD: " + yytext()));
          }
        case 509: break;
        case 218: 
          { return symbol(sym.UNPIVOT, new String("RESERVED WORD: " + yytext()));
          }
        case 510: break;
        case 12: 
          { return symbol(sym.OP_NEGACION, yytext());
          }
        case 511: break;
        case 327: 
          { return symbol(sym.DIAGNOSTICS, new String("RESERVED WORD: " + yytext()));
          }
        case 512: break;
        case 333: 
          { return symbol(sym.CURRENT_USER, new String("RESERVED WORD: " + yytext()));
          }
        case 513: break;
        case 24: 
          { return symbol(sym.INTCONSTANT, new Integer(yytext()));
          }
        case 514: break;
        case 185: 
          { return symbol(sym.UPDATE, new String("RESERVED WORD: " + yytext()));
          }
        case 515: break;
        case 242: 
          { return symbol(sym.PERCENT, new String("RESERVED WORD: " + yytext()));
          }
        case 516: break;
        case 135: 
          { return symbol(sym.SPACE, new String("RESERVED WORD: " + yytext()));
          }
        case 517: break;
        case 239: 
          { return symbol(sym.VARCHAR, new String("RESERVED WORD: " + yytext()));
          }
        case 518: break;
        case 84: 
          { return symbol(sym.OVER, new String("RESERVED WORD: " + yytext()));
          }
        case 519: break;
        case 30: 
          { return symbol(sym.ON, new String("RESERVED WORD: " + yytext()));
          }
        case 520: break;
        case 191: 
          { return symbol(sym.COMMIT, new String("RESERVED WORD: " + yytext()));
          }
        case 521: break;
        case 231: 
          { return symbol(sym.INCLUDE, new String("RESERVED WORD: " + yytext()));
          }
        case 522: break;
        case 104: 
          { return symbol(sym.NULL, new String("RESERVED WORD: " + yytext()));
          }
        case 523: break;
        case 205: 
          { return symbol(sym.PASCAL, new String("RESERVED WORD: " + yytext()));
          }
        case 524: break;
        case 99: 
          { return symbol(sym.CAST, new String("RESERVED WORD: " + yytext()));
          }
        case 525: break;
        case 58: 
          { return symbol(sym.AVG, new String("RESERVED WORD: " + yytext()));
          }
        case 526: break;
        case 338: 
          { return symbol(sym.AUTHORIZATION, new String("RESERVED WORD: " + yytext()));
          }
        case 527: break;
        case 345: 
          { return symbol(sym.TIMEZONE_MINUTE, new String("RESERVED WORD: " + yytext()));
          }
        case 528: break;
        case 66: 
          { return symbol(sym.END, new String("RESERVED WORD: " + yytext()));
          }
        case 529: break;
        case 274: 
          { return symbol(sym.READTEXT, new String("RESERVED WORD: " + yytext()));
          }
        case 530: break;
        case 78: 
          { return symbol(sym.BOTH, new String("RESERVED WORD: " + yytext()));
          }
        case 531: break;
        case 324: 
          { return symbol(sym.CHAR_LENGTH, new String("RESERVED WORD: " + yytext()));
          }
        case 532: break;
        case 306: 
          { return symbol(sym.UPDATETEXT, new String("RESERVED WORD: " + yytext()));
          }
        case 533: break;
        case 59: 
          { return symbol(sym.BIT, new String("RESERVED WORD: " + yytext()));
          }
        case 534: break;
        case 31: 
          { return symbol(sym.OR, new String("RESERVED WORD: " + yytext()));
          }
        case 535: break;
        case 47: 
          { return symbol(sym.OP_DOBLE_NUMERAL, yytext());
          }
        case 536: break;
        case 315: 
          { return symbol(sym.REFERENCES, new String("RESERVED WORD: " + yytext()));
          }
        case 537: break;
        case 157: 
          { return symbol(sym.VALUE, new String("RESERVED WORD: " + yytext()));
          }
        case 538: break;
        case 93: 
          { return symbol(sym.TRUE, new String("RESERVED WORD: " + yytext()));
          }
        case 539: break;
        case 348: 
          { return symbol(sym.CURRENT_TIMESTAMP, new String("RESERVED WORD: " + yytext()));
          }
        case 540: break;
        case 113: 
          { return symbol(sym.ROWS, new String("RESERVED WORD: " + yytext()));
          }
        case 541: break;
        case 133: 
          { return symbol(sym.BEGIN, new String("RESERVED WORD: " + yytext()));
          }
        case 542: break;
        case 128: 
          { return symbol(sym.FULL, new String("RESERVED WORD: " + yytext()));
          }
        case 543: break;
        case 292: 
          { return symbol(sym.CHARACTER, new String("RESERVED WORD: " + yytext()));
          }
        case 544: break;
        case 342: 
          { return symbol(sym.CORRESPONDING, new String("RESERVED WORD: " + yytext()));
          }
        case 545: break;
        case 80: 
          { return symbol(sym.SAVE, new String("RESERVED WORD: " + yytext()));
          }
        case 546: break;
        case 279: 
          { return symbol(sym.PRESERVE, new String("RESERVED WORD: " + yytext()));
          }
        case 547: break;
        case 95: 
          { return symbol(sym.THEN, new String("RESERVED WORD: " + yytext()));
          }
        case 548: break;
        case 37: 
          { return symbol(sym.NO, new String("RESERVED WORD: " + yytext()));
          }
        case 549: break;
        case 280: 
          { return symbol(sym.WHENEVER, new String("RESERVED WORD: " + yytext()));
          }
        case 550: break;
        case 303: 
          { return symbol(sym.STATISTICS, new String("RESERVED WORD: " + yytext()));
          }
        case 551: break;
        case 122: 
          { return symbol(sym.KILL, new String("RESERVED WORD: " + yytext()));
          }
        case 552: break;
        case 187: 
          { return symbol(sym.ERRLVL, new String("RESERVED WORD: " + yytext()));
          }
        case 553: break;
        case 20: 
          { return symbol(sym.OP_LLAVE_IZQ, yytext());
          }
        case 554: break;
        case 156: 
          { return symbol(sym.RIGHT, new String("RESERVED WORD: " + yytext()));
          }
        case 555: break;
        case 6: 
          { if(yylength() > 31)
                                                                    {
                                                                        String aux = yytext().substring(0,31);
                                                                        
                                                                        //return "IDENTIFIER: " + aux + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1) + " exceeded the max limit length. Identifier truncated.";                                                                       
                                                                        return symbol(sym.IDENTIFICADOR, new String(aux));
                                                                    }
                                                                    else 
                                                                    {
                                                                        //return "IDENTIFIER: " + yytext() + " in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1); 
                                                                        return symbol(sym.IDENTIFICADOR, new String("IDENTIFIER: " + yytext()));
                                                                    }
          }
        case 556: break;
        case 257: 
          { return symbol(sym.TRAILING, new String("RESERVED WORD: " + yytext()));
          }
        case 557: break;
        case 174: 
          { return symbol(sym.ACTION, new String("RESERVED WORD: " + yytext()));
          }
        case 558: break;
        case 264: 
          { return symbol(sym.CONTINUE, new String("RESERVED WORD: " + yytext()));
          }
        case 559: break;
        case 262: 
          { return symbol(sym.COALESCE, new String("RESERVED WORD: " + yytext()));
          }
        case 560: break;
        case 214: 
          { return symbol(sym.OPENXML, new String("RESERVED WORD: " + yytext()));
          }
        case 561: break;
        case 252: 
          { return symbol(sym.SQLSTATE, new String("RESERVED WORD: " + yytext()));
          }
        case 562: break;
        case 60: 
          { return symbol(sym.SUM, new String("RESERVED WORD: " + yytext()));
          }
        case 563: break;
        case 41: 
          { return symbol(sym.OP_MAYORIGUAL, yytext());
          }
        case 564: break;
        case 106: 
          { return symbol(sym.DATE, new String("RESERVED WORD: " + yytext()));
          }
        case 565: break;
        case 138: 
          { return symbol(sym.ORDER, new String("RESERVED WORD: " + yytext()));
          }
        case 566: break;
        case 326: 
          { return symbol(sym.IDENTITYCOL, new String("RESERVED WORD: " + yytext()));
          }
        case 567: break;
        case 232: 
          { return symbol(sym.NATURAL, new String("RESERVED WORD: " + yytext()));
          }
        case 568: break;
        case 83: 
          { return symbol(sym.ONLY, new String("RESERVED WORD: " + yytext()));
          }
        case 569: break;
        case 349: 
          { return symbol(sym.SEMANTICKEYPHRASETABLE, new String("RESERVED WORD: " + yytext()));
          }
        case 570: break;
        case 170: 
          { return symbol(sym.FOUND, new String("RESERVED WORD: " + yytext()));
          }
        case 571: break;
        case 341: 
          { return symbol(sym.CONTAINSTABLE, new String("RESERVED WORD: " + yytext()));
          }
        case 572: break;
        case 36: 
          { return symbol(sym.IF, new String("RESERVED WORD: " + yytext()));
          }
        case 573: break;
        case 52: 
          { return symbol(sym.ALL, new String("RESERVED WORD: " + yytext()));
          }
        case 574: break;
        case 268: 
          { return symbol(sym.DATABASE, new String("RESERVED WORD: " + yytext()));
          }
        case 575: break;
        case 116: 
          { return symbol(sym.READ, new String("RESERVED WORD: " + yytext()));
          }
        case 576: break;
        case 98: 
          { return symbol(sym.EXIT, new String("RESERVED WORD: " + yytext()));
          }
        case 577: break;
        case 172: 
          { return symbol(sym.FETCH, new String("RESERVED WORD: " + yytext()));
          }
        case 578: break;
        case 235: 
          { return symbol(sym.DECLARE, new String("RESERVED WORD: " + yytext()));
          }
        case 579: break;
        case 39: 
          { return symbol(sym.OP_MENORIGUAL, yytext());
          }
        case 580: break;
        case 275: 
          { return symbol(sym.RESTRICT, new String("RESERVED WORD: " + yytext()));
          }
        case 581: break;
        case 17: 
          { return symbol(sym.OP_CORCHETE_DER, yytext());
          }
        case 582: break;
        case 344: 
          { return symbol(sym.OPENDATASOURCE, new String("RESERVED WORD: " + yytext()));
          }
        case 583: break;
        case 146: 
          { return symbol(sym.TABLE, new String("RESERVED WORD: " + yytext()));
          }
        case 584: break;
        case 258: 
          { return symbol(sym.TRUNCATE, new String("RESERVED WORD: " + yytext()));
          }
        case 585: break;
        case 151: 
          { return symbol(sym.INNER, new String("RESERVED WORD: " + yytext()));
          }
        case 586: break;
        case 110: 
          { return symbol(sym.DENY, new String("RESERVED WORD: " + yytext()));
          }
        case 587: break;
        case 316: 
          { return symbol(sym.PRIVILEGES, new String("RESERVED WORD: " + yytext()));
          }
        case 588: break;
        case 63: 
          { return symbol(sym.OFF, new String("RESERVED WORD: " + yytext()));
          }
        case 589: break;
        case 282: 
          { return symbol(sym.FREETEXT, new String("RESERVED WORD: " + yytext()));
          }
        case 590: break;
        case 131: 
          { return symbol(sym.JOIN, new String("RESERVED WORD: " + yytext()));
          }
        case 591: break;
        case 284: 
          { return symbol(sym.SUBSTRING, new String("RESERVED WORD: " + yytext()));
          }
        case 592: break;
        case 298: 
          { return symbol(sym.RAISERROR, new String("RESERVED WORD: " + yytext()));
          }
        case 593: break;
        case 271: 
          { return symbol(sym.DISTINCT, new String("RESERVED WORD: " + yytext()));
          }
        case 594: break;
        case 166: 
          { return symbol(sym.MATCH, new String("RESERVED WORD: " + yytext()));
          }
        case 595: break;
        case 92: 
          { return symbol(sym.TRAN, new String("RESERVED WORD: " + yytext()));
          }
        case 596: break;
        case 183: 
          { return symbol(sym.LINENO, new String("RESERVED WORD: " + yytext()));
          }
        case 597: break;
        case 120: 
          { return symbol(sym.VIEW, new String("RESERVED WORD: " + yytext()));
          }
        case 598: break;
        case 321: 
          { return symbol(sym.TRANSLATION, new String("RESERVED WORD: " + yytext()));
          }
        case 599: break;
        case 139: 
          { return symbol(sym.LOCAL, new String("RESERVED WORD: " + yytext()));
          }
        case 600: break;
        case 76: 
          { return symbol(sym.FOR, new String("RESERVED WORD: " + yytext()));
          }
        case 601: break;
        case 56: 
          { return symbol(sym.ADD, new String("RESERVED WORD: " + yytext()));
          }
        case 602: break;
        case 85: 
          { return symbol(sym.OPEN, new String("RESERVED WORD: " + yytext()));
          }
        case 603: break;
        case 343: 
          { return symbol(sym.FREETEXTTABLE, new String("RESERVED WORD: " + yytext()));
          }
        case 604: break;
        case 312: 
          { return symbol(sym.DEFERRABLE, new String("RESERVED WORD: " + yytext()));
          }
        case 605: break;
        case 180: 
          { return symbol(sym.SCHEMA, new String("RESERVED WORD: " + yytext()));
          }
        case 606: break;
        case 62: 
          { return symbol(sym.SQL, new String("RESERVED WORD: " + yytext()));
          }
        case 607: break;
        case 253: 
          { return symbol(sym.SQLERROR, new String("RESERVED WORD: " + yytext()));
          }
        case 608: break;
        case 2: 
          { return symbol(sym.OP_DIVISION, yytext());
          }
        case 609: break;
        case 29: 
          { return symbol(sym.BY, new String("RESERVED WORD: " + yytext()));
          }
        case 610: break;
        case 240: 
          { return symbol(sym.VARYING, new String("RESERVED WORD: " + yytext()));
          }
        case 611: break;
        case 332: 
          { return symbol(sym.OCTET_LENGTH, new String("RESERVED WORD: " + yytext()));
          }
        case 612: break;
        case 51: 
          { return symbol(sym.ASC, new String("RESERVED WORD: " + yytext()));
          }
        case 613: break;
        case 42: 
          { return symbol(sym.OP_DIFERENTE, yytext());
          }
        case 614: break;
        case 278: 
          { return symbol(sym.POSITION, new String("RESERVED WORD: " + yytext()));
          }
        case 615: break;
        case 33: 
          { return symbol(sym.TO, new String("RESERVED WORD: " + yytext()));
          }
        case 616: break;
        case 178: 
          { return symbol(sym.SECOND, new String("RESERVED WORD: " + yytext()));
          }
        case 617: break;
        case 245: 
          { return symbol(sym.WAITFOR, new String("RESERVED WORD: " + yytext()));
          }
        case 618: break;
        case 195: 
          { return symbol(sym.NULLIF, new String("RESERVED WORD: " + yytext()));
          }
        case 619: break;
        case 129: 
          { return symbol(sym.FILE, new String("RESERVED WORD: " + yytext()));
          }
        case 620: break;
        case 244: 
          { return symbol(sym.PRIMARY, new String("RESERVED WORD: " + yytext()));
          }
        case 621: break;
        case 203: 
          { return symbol(sym.VALUES, new String("RESERVED WORD: " + yytext()));
          }
        case 622: break;
        case 277: 
          { return symbol(sym.HOLDLOCK, new String("RESERVED WORD: " + yytext()));
          }
        case 623: break;
        case 287: 
          { return symbol(sym.TIMESTAMP, new String("RESERVED WORD: " + yytext()));
          }
        case 624: break;
        case 181: 
          { return symbol(sym.OUTPUT, new String("RESERVED WORD: " + yytext()));
          }
        case 625: break;
        case 171: 
          { return symbol(sym.FLOAT, new String("RESERVED WORD: " + yytext()));
          }
        case 626: break;
        case 266: 
          { return symbol(sym.IDENTITY, new String("RESERVED WORD: " + yytext()));
          }
        case 627: break;
        case 289: 
          { return symbol(sym.EXCEPTION, new String("RESERVED WORD: " + yytext()));
          }
        case 628: break;
        case 296: 
          { return symbol(sym.INDICATOR, new String("RESERVED WORD: " + yytext()));
          }
        case 629: break;
        case 340: 
          { return symbol(sym.TIMEZONE_HOUR, new String("RESERVED WORD: " + yytext()));
          }
        case 630: break;
        case 143: 
          { return symbol(sym.USING, new String("RESERVED WORD: " + yytext()));
          }
        case 631: break;
        case 347: 
          { return symbol(sym.CHARACTER_LENGTH, new String("RESERVED WORD: " + yytext()));
          }
        case 632: break;
        case 243: 
          { return symbol(sym.PREPARE, new String("RESERVED WORD: " + yytext()));
          }
        case 633: break;
        case 123: 
          { return symbol(sym.PLAN, new String("RESERVED WORD: " + yytext()));
          }
        case 634: break;
        case 199: 
          { return symbol(sym.RETURN, new String("RESERVED WORD: " + yytext()));
          }
        case 635: break;
        case 168: 
          { return symbol(sym.MERGE, new String("RESERVED WORD: " + yytext()));
          }
        case 636: break;
        case 322: 
          { return symbol(sym.TRY_CONVERT, new String("RESERVED WORD: " + yytext()));
          }
        case 637: break;
        case 165: 
          { return symbol(sym.WHILE, new String("RESERVED WORD: " + yytext()));
          }
        case 638: break;
        case 200: 
          { return symbol(sym.REVOKE, new String("RESERVED WORD: " + yytext()));
          }
        case 639: break;
        case 222: 
          { return symbol(sym.EXECUTE, new String("RESERVED WORD: " + yytext()));
          }
        case 640: break;
        case 281: 
          { return symbol(sym.FUNCTION, new String("RESERVED WORD: " + yytext()));
          }
        case 641: break;
        case 32: 
          { return symbol(sym.OF, new String("RESERVED WORD: " + yytext()));
          }
        case 642: break;
        case 192: 
          { return symbol(sym.CURSOR, new String("RESERVED WORD: " + yytext()));
          }
        case 643: break;
        case 265: 
          { return symbol(sym.INTERVAL, new String("RESERVED WORD: " + yytext()));
          }
        case 644: break;
        case 1: 
          { lexeme = yytext(); line = (yyline + 1); column = (yycolumn + 1); length = yylength();
                                                                    if (lexeme == "")
                                                                    {
                                                                    }
                                                                    else
                                                                    {
                                                                        System.out.print("Lexical error: invalid token - " + yytext()) ;

                                                                    }
          }
        case 645: break;
        case 217: 
          { return symbol(sym.UNKNOWN, new String("RESERVED WORD: " + yytext()));
          }
        case 646: break;
        case 72: 
          { return symbol(sym.KEY, new String("RESERVED WORD: " + yytext()));
          }
        case 647: break;
        case 182: 
          { return symbol(sym.OPTION, new String("RESERVED WORD: " + yytext()));
          }
        case 648: break;
        case 251: 
          { return symbol(sym.SMALLINT, new String("RESERVED WORD: " + yytext()));
          }
        case 649: break;
        case 108: 
          { return symbol(sym.DUMP, new String("RESERVED WORD: " + yytext()));
          }
        case 650: break;
        case 310: 
          { return symbol(sym.DEALLOCATE, new String("RESERVED WORD: " + yytext()));
          }
        case 651: break;
        case 188: 
          { return symbol(sym.EXCEPT, new String("RESERVED WORD: " + yytext()));
          }
        case 652: break;
        case 90: 
          { return symbol(sym.USER, new String("RESERVED WORD: " + yytext()));
          }
        case 653: break;
        case 288: 
          { return symbol(sym.TRANSLATE, new String("RESERVED WORD: " + yytext()));
          }
        case 654: break;
        case 154: 
          { return symbol(sym.NAMES, new String("RESERVED WORD: " + yytext()));
          }
        case 655: break;
        case 311: 
          { return symbol(sym.DESCRIPTOR, new String("RESERVED WORD: " + yytext()));
          }
        case 656: break;
        case 15: 
          { return symbol(sym.OP_PUNTO, yytext());
          }
        case 657: break;
        case 256: 
          { return symbol(sym.TEXTSIZE, new String("RESERVED WORD: " + yytext()));
          }
        case 658: break;
        case 74: 
          { return symbol(sym.MAX, new String("RESERVED WORD: " + yytext()));
          }
        case 659: break;
        case 227: 
          { return symbol(sym.CONVERT, new String("RESERVED WORD: " + yytext()));
          }
        case 660: break;
        case 125: 
          { return symbol(sym.WORK, new String("RESERVED WORD: " + yytext()));
          }
        case 661: break;
        case 224: 
          { return symbol(sym.CATALOG, new String("RESERVED WORD: " + yytext()));
          }
        case 662: break;
        case 177: 
          { return symbol(sym.SELECT, new String("RESERVED WORD: " + yytext()));
          }
        case 663: break;
        case 228: 
          { return symbol(sym.COMPUTE, new String("RESERVED WORD: " + yytext()));
          }
        case 664: break;
        case 68: 
          { return symbol(sym.NOT, new String("RESERVED WORD: " + yytext()));
          }
        case 665: break;
        case 337: 
          { return symbol(sym.WITHIN_GROUP, new String("RESERVED WORD: " + yytext()));
          }
        case 666: break;
        case 75: 
          { return symbol(sym.MIN, new String("RESERVED WORD: " + yytext()));
          }
        case 667: break;
        case 249: 
          { return symbol(sym.ALLOCATE, new String("RESERVED WORD: " + yytext()));
          }
        case 668: break;
        case 57: 
          { return symbol(sym.ARE, new String("RESERVED WORD: " + yytext()));
          }
        case 669: break;
        case 299: 
          { return symbol(sym.PROCEDURE, new String("RESERVED WORD: " + yytext()));
          }
        case 670: break;
        case 161: 
          { return symbol(sym.PRIOR, new String("RESERVED WORD: " + yytext()));
          }
        case 671: break;
        case 144: 
          { return symbol(sym.UNION, new String("RESERVED WORD: " + yytext()));
          }
        case 672: break;
        case 318: 
          { return symbol(sym.SYSTEM_USER, new String("RESERVED WORD: " + yytext()));
          }
        case 673: break;
        case 126: 
          { return symbol(sym.WITH, new String("RESERVED WORD: " + yytext()));
          }
        case 674: break;
        case 304: 
          { return symbol(sym.SQLWARNING, new String("RESERVED WORD: " + yytext()));
          }
        case 675: break;
        case 276: 
          { return symbol(sym.RELATIVE, new String("RESERVED WORD: " + yytext()));
          }
        case 676: break;
        case 155: 
          { return symbol(sym.NCHAR, new String("RESERVED WORD: " + yytext()));
          }
        case 677: break;
        case 346: 
          { return symbol(sym.IDENTITY_INSERT, new String("RESERVED WORD: " + yytext()));
          }
        case 678: break;
        case 50: 
          { System.out.print("Unfinished comment " + yytext() + " found in line: " + (yyline + 1) + " columns: " + (yycolumn + 1) + " - " + ((yycolumn + 1) + yylength() - 1));
          }
        case 679: break;
        case 334: 
          { return symbol(sym.CURRENT_TIME, new String("RESERVED WORD: " + yytext()));
          }
        case 680: break;
        case 11: 
          { return symbol(sym.OP_MAYOR, yytext());
          }
        case 681: break;
        case 19: 
          { return symbol(sym.OP_PARENTESIS_DER, yytext());
          }
        case 682: break;
        case 149: 
          { return symbol(sym.CROSS, new String("RESERVED WORD: " + yytext()));
          }
        case 683: break;
        case 313: 
          { return symbol(sym.DISCONNECT, new String("RESERVED WORD: " + yytext()));
          }
        case 684: break;
        case 293: 
          { return symbol(sym.ISOLATION, new String("RESERVED WORD: " + yytext()));
          }
        case 685: break;
        case 241: 
          { return symbol(sym.PARTIAL, new String("RESERVED WORD: " + yytext()));
          }
        case 686: break;
        case 21: 
          { return symbol(sym.OP_LLAVE_DER, yytext());
          }
        case 687: break;
        case 254: 
          { return symbol(sym.OVERLAPS, new String("RESERVED WORD: " + yytext()));
          }
        case 688: break;
        case 307: 
          { return symbol(sym.CONSTRAINT, new String("RESERVED WORD: " + yytext()));
          }
        case 689: break;
        case 320: 
          { return symbol(sym.TRANSACTION, new String("RESERVED WORD: " + yytext()));
          }
        case 690: break;
        case 65: 
          { return symbol(sym.TOP, new String("RESERVED WORD: " + yytext()));
          }
        case 691: break;
        case 270: 
          { return symbol(sym.DEFERRED, new String("RESERVED WORD: " + yytext()));
          }
        case 692: break;
        case 323: 
          { return symbol(sym.CONSTRAINTS, new String("RESERVED WORD: " + yytext()));
          }
        case 693: break;
        case 308: 
          { return symbol(sym.CONNECTION, new String("RESERVED WORD: " + yytext()));
          }
        case 694: break;
        case 87: 
          { return symbol(sym.LOAD, new String("RESERVED WORD: " + yytext()));
          }
        case 695: break;
        case 141: 
          { return symbol(sym.LEVEL, new String("RESERVED WORD: " + yytext()));
          }
        case 696: break;
        case 167: 
          { return symbol(sym.MONTH, new String("RESERVED WORD: " + yytext()));
          }
        case 697: break;
        case 248: 
          { return symbol(sym.ABSOLUTE, new String("RESERVED WORD: " + yytext()));
          }
        case 698: break;
        case 259: 
          { return symbol(sym.END_EXEC, new String("RESERVED WORD: " + yytext()));
          }
        case 699: break;
        case 351: 
          { return symbol(sym.SEMANTICSIMILARITYDETAILSTABLE, new String("RESERVED WORD: " + yytext()));
          }
        case 700: break;
        case 208: 
          { return symbol(sym.MINUTE, new String("RESERVED WORD: " + yytext()));
          }
        case 701: break;
        case 53: 
          { return symbol(sym.AND, new String("RESERVED WORD: " + yytext()));
          }
        case 702: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
